[kernel] Parsing tests/aorai/monostate.i (no preprocessing)
[aorai] Welcome to the Aorai plugin
[aorai] Warning: Call to main does not follow automaton's specification. This path is assumed to be dead
[aorai] tests/aorai/monostate.i:8: Warning: 
  Call to main not conforming to automaton (pre-cond). Assuming it is on a dead path
[kernel] Parsing /tmp/aorai_monostate_0.i (no preprocessing)
/* Generated by Frama-C */
enum aorai_States {
    aorai_reject_state = -2,
    Init = 0,
    aorai_intermediate_state = 1,
    aorai_reject = 2
};
enum aorai_ListOper {
    op_f = 1,
    op_main = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/*@ lemma aorai_reject_deterministic_trans{L}: \true;
 */
/*@ ghost enum aorai_ListOper aorai_CurOperation = op_main; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus = aorai_Called; */
/*@
lemma aorai_intermediate_state_deterministic_trans{L}:
  ¬(\at(aorai_CurOperation,L) ≡ op_main ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
     ¬(\at(aorai_CurOperation,L) ≡ op_main ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Terminated));
 */
/*@
lemma Init_deterministic_trans{L}:
  ¬(\at(aorai_CurOperation,L) ≡ op_main ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Called ∧
     ¬(\at(aorai_CurOperation,L) ≡ op_main ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Called));
 */
/*@ ghost int aorai_CurStates = Init; */
/*@ ghost
  /@ ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_Init_out:
       ensures aorai_CurStates ≢ Init;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_reject_in:
       assumes
         aorai_CurStates ≡ aorai_reject ∨
         aorai_CurStates ≡ aorai_intermediate_state;
       ensures aorai_CurStates ≡ aorai_reject;
     
     behavior buch_state_aorai_reject_out:
       assumes
         aorai_CurStates ≢ aorai_reject ∧
         aorai_CurStates ≢ aorai_intermediate_state;
       ensures aorai_CurStates ≢ aorai_reject;
   @/
  void f_pre_func(void)
  {
    int aorai_CurStates_tmp;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_f;
    aorai_CurStates_tmp = aorai_CurStates;
    if (2 == aorai_CurStates) aorai_CurStates_tmp = aorai_reject;
    else 
      if (1 == aorai_CurStates) aorai_CurStates_tmp = aorai_reject;
    aorai_CurStates = aorai_CurStates_tmp;
    return;
  }

*/

/*@ ghost
  /@ requires \false;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_Init_out:
       ensures aorai_CurStates ≢ Init;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_reject_in:
       assumes aorai_CurStates ≡ aorai_reject;
       ensures aorai_CurStates ≡ aorai_reject;
     
     behavior buch_state_aorai_reject_out:
       assumes aorai_CurStates ≢ aorai_reject;
       ensures aorai_CurStates ≢ aorai_reject;
   @/
  void f_post_func(void)
  {
    int aorai_CurStates_tmp;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_f;
    aorai_CurStates_tmp = aorai_CurStates;
    if (2 == aorai_CurStates) aorai_CurStates_tmp = aorai_reject;
    aorai_CurStates = aorai_CurStates_tmp;
    return;
  }

*/

/*@ requires \false;
    requires
      aorai_CurStates ≡ aorai_reject ∨ aorai_CurStates ≢ aorai_reject;
    requires
      aorai_CurStates ≡ aorai_intermediate_state ∨
      aorai_CurStates ≢ aorai_intermediate_state;
    ensures \false;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ aorai_reject;
 */
void f(void)
{
  /*@ ghost f_pre_func(); */
  /*@ ghost f_post_func(); */
  return;
}

/*@ ghost
  /@ ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_Init_out:
       ensures aorai_CurStates ≢ Init;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
   @/
  void main_pre_func(void)
  {
    int aorai_CurStates_tmp;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_main;
    aorai_CurStates_tmp = aorai_CurStates;
    aorai_CurStates = aorai_CurStates_tmp;
    return;
  }

*/

/*@ ghost
  /@ requires \false;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_Init_out:
       ensures aorai_CurStates ≢ Init;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
   @/
  void main_post_func(void)
  {
    int aorai_CurStates_tmp;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_main;
    aorai_CurStates_tmp = aorai_CurStates;
    aorai_CurStates = aorai_CurStates_tmp;
    return;
  }

*/

/*@ requires \false; */
void main(void)
{
  /*@ ghost int aorai_Loop_Init_3; */
  /*@ ghost main_pre_func(); */
  /*@ ghost aorai_Loop_Init_3 = 1; */
  aorai_loop_3:
  /*@ loop invariant Aorai: aorai_CurStates ≢ Init;
      loop invariant Aorai: aorai_CurStates ≢ aorai_intermediate_state;
      loop invariant Aorai: aorai_CurStates ≢ aorai_reject;
  */
  while (1) {
    /*@ ghost aorai_Loop_Init_3 = 0; */
    f();
  }
  /*@ ghost main_post_func(); */
  return;
}


