[kernel] Parsing tests/aorai/not_prm.i (no preprocessing)
[aorai] Welcome to the Aorai plugin
[kernel] Parsing /tmp/aorai_not_prm_0.i (no preprocessing)
/* Generated by Frama-C */
enum aorai_ListOper {
    op_f = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/*@ ghost enum aorai_ListOper aorai_CurOperation = op_f; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus = aorai_Called; */
/*@ ghost int S0 = 1; */
/*@ ghost int Sf = 0; */
/*@ ghost
  /@ ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, S0, Sf;
     
     behavior buch_state_S0_out:
       ensures 0 ≡ S0;
     
     behavior buch_state_Sf_in:
       assumes 1 ≡ S0 ∧ x ≥ 4;
       ensures 1 ≡ Sf;
     
     behavior buch_state_Sf_out:
       assumes 0 ≡ S0 ∨ ¬(x ≥ 4);
       ensures 0 ≡ Sf;
   @/
  void f_pre_func(int x)
  {
    int S0_tmp;
    int Sf_tmp;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_f;
    S0_tmp = S0;
    Sf_tmp = Sf;
    if (S0 == 1) 
      if (x >= 4) Sf_tmp = 1; else Sf_tmp = 0;
    else Sf_tmp = 0;
    S0_tmp = 0;
    S0 = S0_tmp;
    Sf = Sf_tmp;
    return;
  }

*/

/*@ ghost
  /@ requires 1 ≡ Sf ∧ 0 ≡ S0;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, S0, Sf;
     
     behavior buch_state_S0_out:
       ensures 0 ≡ S0;
     
     behavior buch_state_Sf_in:
       assumes 1 ≡ Sf;
       ensures 1 ≡ Sf;
     
     behavior buch_state_Sf_out:
       assumes 0 ≡ Sf;
       ensures 0 ≡ Sf;
   @/
  void f_post_func(int res)
  {
    int S0_tmp;
    int Sf_tmp;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_f;
    S0_tmp = S0;
    Sf_tmp = Sf;
    if (Sf == 1) Sf_tmp = 1; else Sf_tmp = 0;
    S0_tmp = 0;
    S0 = S0_tmp;
    Sf = Sf_tmp;
    return;
  }

*/

/*@ requires 1 ≡ S0 ∧ 0 ≡ Sf;
    requires 1 ≡ S0 ⇒ x ≥ 4;
    
    behavior aorai_acceptance:
      ensures 1 ≡ Sf;
    
    behavior Buchi_property_behavior:
      ensures 0 ≡ S0;
      ensures 1 ≡ Sf;
 */
int f(int x)
{
  /*@ ghost f_pre_func(x); */
  /*@ ghost f_post_func(x); */
  return x;
}


