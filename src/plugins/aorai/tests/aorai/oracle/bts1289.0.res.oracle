[kernel] Parsing tests/aorai/bts1289.i (no preprocessing)
[aorai] Welcome to the Aorai plugin
[aorai] Warning: Call to main does not follow automaton's specification. This path is assumed to be dead
[kernel] Parsing /tmp/aorai_bts1289_0.i (no preprocessing)
/* Generated by Frama-C */
enum aorai_ListOper {
    op_a = 1,
    op_main = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/*@ ghost enum aorai_ListOper aorai_CurOperation = op_main; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus = aorai_Called; */
/*@ ghost int S = 0; */
/*@ ghost
  /@ ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_a;
     assigns aorai_CurOpStatus, aorai_CurOperation, S;
     
     behavior buch_state_S_out:
       ensures 0 ≡ S;
   @/
  void a_pre_func(void)
  {
    int S_tmp;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_a;
    S_tmp = S;
    S_tmp = 0;
    S = S_tmp;
    return;
  }

*/

/*@ ghost
  /@ requires \false;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_a;
     assigns aorai_CurOpStatus, aorai_CurOperation, S;
     
     behavior buch_state_S_out:
       ensures 0 ≡ S;
   @/
  void a_post_func(void)
  {
    int S_tmp;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_a;
    S_tmp = S;
    S_tmp = 0;
    S = S_tmp;
    return;
  }

*/

/*@ requires \false;
    
    behavior Buchi_behavior_out_0:
      ensures 0 ≡ S; */
void a(void)
{
  /*@ ghost a_pre_func(); */
  /*@ ghost a_post_func(); */
  return;
}

/*@ ghost
  /@ ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, S;
     
     behavior buch_state_S_out:
       ensures 0 ≡ S;
   @/
  void main_pre_func(void)
  {
    int S_tmp;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_main;
    S_tmp = S;
    S_tmp = 0;
    S = S_tmp;
    return;
  }

*/

/*@ ghost
  /@ requires \false;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, S;
     
     behavior buch_state_S_out:
       ensures 0 ≡ S;
   @/
  void main_post_func(void)
  {
    int S_tmp;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_main;
    S_tmp = S;
    S_tmp = 0;
    S = S_tmp;
    return;
  }

*/

/*@ requires \false;
    
    behavior Buchi_behavior_out_0:
      ensures 0 ≡ S; */
void main(void)
{
  /*@ ghost int aorai_Loop_Init_4; */
  /*@ ghost main_pre_func(); */
  int i = 0;
  /*@ ghost aorai_Loop_Init_4 = 1; */
  aorai_loop_4:
  /*@ loop invariant Aorai: 0 ≡ S;
      loop assigns i, aorai_Loop_Init_4, aorai_CurOpStatus,
                   aorai_CurOperation, S;
      loop assigns aorai_Loop_Init_4 \from \nothing;
  */
  while (i < 10) {
    /*@ ghost aorai_Loop_Init_4 = 0; */
    a();
    i ++;
  }
  /*@ ghost main_post_func(); */
  return;
}


