[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/aorai/test_factorial2.c (with preprocessing)
[aorai] Welcome to the Aorai plugin
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing /tmp/aorai_test_factorial20.i (no preprocessing)
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
[wp] [Qed] Goal typed_decode_int_post_func_assign_part2 : Valid
[wp] [Qed] Goal typed_decode_int_post_func_assign_part1 : Valid
[wp] [Qed] Goal typed_decode_int_post_func_post_2 : Valid
[wp] [Qed] Goal typed_decode_int_post_func_post : Valid
[wp] [Qed] Goal typed_decode_int_post_func_assign_part6 : Valid
[wp] [Qed] Goal typed_decode_int_post_func_assign_part5 : Valid
[wp] [Qed] Goal typed_decode_int_post_func_assign_part4 : Valid
[wp] [Qed] Goal typed_decode_int_post_func_assign_part3 : Valid
[wp] [Qed] Goal typed_decode_int_post_func_buch_state_S1_in_post : Valid
[wp] [Qed] Goal typed_decode_int_post_func_assign_part9 : Valid
[wp] [Qed] Goal typed_decode_int_post_func_assign_part8 : Valid
[wp] [Qed] Goal typed_decode_int_post_func_assign_part7 : Valid
[wp] [Qed] Goal typed_decode_int_post_func_buch_state_main_0_out_post : Valid
[wp] [Qed] Goal typed_decode_int_post_func_buch_state_S2_out_post : Valid
[wp] [Qed] Goal typed_decode_int_post_func_buch_state_S2_in_post : Valid
[wp] [Qed] Goal typed_decode_int_post_func_buch_state_S1_out_post : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_assign_part2 : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_assign_part1 : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_post_2 : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_post : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_assign_part6 : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_assign_part5 : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_assign_part4 : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_assign_part3 : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_buch_state_S2_out_post : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_buch_state_S1_out_post : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_buch_state_S1_in_post : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_assign_part7 : Valid
[wp] [Qed] Goal typed_decode_int_pre_func_buch_state_main_0_out_post : Valid
[wp] [Qed] Goal typed_factorial_post_func_assign_part02 : Valid
[wp] [Qed] Goal typed_factorial_post_func_assign_part01 : Valid
[wp] [Qed] Goal typed_factorial_post_func_post_2 : Valid
[wp] [Qed] Goal typed_factorial_post_func_post : Valid
[wp] [Qed] Goal typed_factorial_post_func_assign_part06 : Valid
[wp] [Qed] Goal typed_factorial_post_func_assign_part05 : Valid
[wp] [Qed] Goal typed_factorial_post_func_assign_part04 : Valid
[wp] [Qed] Goal typed_factorial_post_func_assign_part03 : Valid
[wp] [Qed] Goal typed_factorial_post_func_assign_part10 : Valid
[wp] [Qed] Goal typed_factorial_post_func_assign_part09 : Valid
[wp] [Qed] Goal typed_factorial_post_func_assign_part08 : Valid
[wp] [Qed] Goal typed_factorial_post_func_assign_part07 : Valid
[wp] [Qed] Goal typed_factorial_post_func_buch_state_S2_in_post : Valid
[wp] [Qed] Goal typed_factorial_post_func_buch_state_S1_out_post : Valid
[wp] [Qed] Goal typed_factorial_post_func_buch_state_S1_in_post : Valid
[wp] [Qed] Goal typed_factorial_post_func_assign_part11 : Valid
[wp] [Qed] Goal typed_factorial_post_func_buch_state_main_0_out_post : Valid
[wp] [Qed] Goal typed_factorial_post_func_buch_state_S2_out_post : Valid
[wp] [Qed] Goal typed_factorial_pre_func_assign_part2 : Valid
[wp] [Qed] Goal typed_factorial_pre_func_assign_part1 : Valid
[wp] [Qed] Goal typed_factorial_pre_func_post_2 : Valid
[wp] [Qed] Goal typed_factorial_pre_func_post : Valid
[wp] [Qed] Goal typed_factorial_pre_func_assign_part6 : Valid
[wp] [Qed] Goal typed_factorial_pre_func_assign_part5 : Valid
[wp] [Qed] Goal typed_factorial_pre_func_assign_part4 : Valid
[wp] [Qed] Goal typed_factorial_pre_func_assign_part3 : Valid
[wp] [Qed] Goal typed_factorial_pre_func_buch_state_S2_in_post : Valid
[wp] [Qed] Goal typed_factorial_pre_func_buch_state_S1_out_post : Valid
[wp] [Qed] Goal typed_factorial_pre_func_assign_part8 : Valid
[wp] [Qed] Goal typed_factorial_pre_func_assign_part7 : Valid
[wp] [Qed] Goal typed_factorial_pre_func_buch_state_main_0_out_post : Valid
[wp] [Qed] Goal typed_factorial_pre_func_buch_state_S2_out_post : Valid
[wp] [Qed] Goal typed_main_post_func_assign_part2 : Valid
[wp] [Qed] Goal typed_main_post_func_assign_part1 : Valid
[wp] [Qed] Goal typed_main_post_func_post_2 : Valid
[wp] [Qed] Goal typed_main_post_func_post : Valid
[wp] [Qed] Goal typed_main_post_func_assign_part6 : Valid
[wp] [Qed] Goal typed_main_post_func_assign_part5 : Valid
[wp] [Qed] Goal typed_main_post_func_assign_part4 : Valid
[wp] [Qed] Goal typed_main_post_func_assign_part3 : Valid
[wp] [Qed] Goal typed_main_post_func_buch_state_S1_in_post : Valid
[wp] [Qed] Goal typed_main_post_func_assign_part9 : Valid
[wp] [Qed] Goal typed_main_post_func_assign_part8 : Valid
[wp] [Qed] Goal typed_main_post_func_assign_part7 : Valid
[wp] [Qed] Goal typed_main_post_func_buch_state_main_0_out_post : Valid
[wp] [Qed] Goal typed_main_post_func_buch_state_S2_out_post : Valid
[wp] [Qed] Goal typed_main_post_func_buch_state_S2_in_post : Valid
[wp] [Qed] Goal typed_main_post_func_buch_state_S1_out_post : Valid
[wp] [Qed] Goal typed_main_pre_func_assign_part2 : Valid
[wp] [Qed] Goal typed_main_pre_func_assign_part1 : Valid
[wp] [Qed] Goal typed_main_pre_func_post_2 : Valid
[wp] [Qed] Goal typed_main_pre_func_post : Valid
[wp] [Qed] Goal typed_main_pre_func_assign_part6 : Valid
[wp] [Qed] Goal typed_main_pre_func_assign_part5 : Valid
[wp] [Qed] Goal typed_main_pre_func_assign_part4 : Valid
[wp] [Qed] Goal typed_main_pre_func_assign_part3 : Valid
[wp] [Qed] Goal typed_main_pre_func_buch_state_S2_out_post : Valid
[wp] [Qed] Goal typed_main_pre_func_buch_state_S1_out_post : Valid
[wp] [Qed] Goal typed_main_pre_func_buch_state_S1_in_post : Valid
[wp] [Qed] Goal typed_main_pre_func_assign_part7 : Valid
[wp] [Qed] Goal typed_main_pre_func_buch_state_main_0_out_post : Valid
/* Generated by Frama-C */
enum aorai_ListOper {
    op_decode_int = 2,
    op_factorial = 1,
    op_main = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/*@ ghost enum aorai_ListOper aorai_CurOperation = op_main; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus = aorai_Called; */
/*@ ghost int S1 = 0; */
/*@ ghost int S2 = 0; */
/*@ ghost int main_0 = 1; */
/*@ ensures aorai_CurOpStatus ≡ aorai_Called;
    ensures aorai_CurOperation ≡ op_decode_int;
    assigns aorai_CurOpStatus, aorai_CurOperation, S1, S2, main_0;
    
    behavior buch_state_S1_in:
      assumes 1 ≡ S1;
      ensures 1 ≡ S1;
    
    behavior buch_state_S1_out:
      assumes 0 ≡ S1;
      ensures 0 ≡ S1;
    
    behavior buch_state_S2_out:
      ensures 0 ≡ S2;
    
    behavior buch_state_main_0_out:
      ensures 0 ≡ main_0;
 */
void decode_int_pre_func(char *s)
{
  /*@ ghost int S1_tmp; */
  /*@ ghost int S2_tmp; */
  /*@ ghost int main_0_tmp; */
  aorai_CurOpStatus = aorai_Called;
  aorai_CurOperation = op_decode_int;
  S1_tmp = S1;
  S2_tmp = S2;
  main_0_tmp = main_0;
  main_0_tmp = 0;
  S2_tmp = 0;
  if (S1 == 1) S1_tmp = 1; else S1_tmp = 0;
  S1 = S1_tmp;
  S2 = S2_tmp;
  main_0 = main_0_tmp;
  return;
}

/*@ requires 1 ≡ S1 ∧ 0 ≡ S2 ∧ 0 ≡ main_0;
    ensures aorai_CurOpStatus ≡ aorai_Terminated;
    ensures aorai_CurOperation ≡ op_decode_int;
    assigns aorai_CurOpStatus, aorai_CurOperation, S1, S2, main_0;
    
    behavior buch_state_S1_in:
      assumes 1 ≡ S1;
      ensures 1 ≡ S1;
    
    behavior buch_state_S1_out:
      assumes 0 ≡ S1;
      ensures 0 ≡ S1;
    
    behavior buch_state_S2_in:
      assumes 1 ≡ S1 ∧ 1 ≢ 0;
      ensures 1 ≡ S2;
    
    behavior buch_state_S2_out:
      assumes 0 ≡ S1 ∨ 1 ≡ 0;
      ensures 0 ≡ S2;
    
    behavior buch_state_main_0_out:
      ensures 0 ≡ main_0;
 */
void decode_int_post_func(int res)
{
  /*@ ghost int S1_tmp; */
  /*@ ghost int S2_tmp; */
  /*@ ghost int main_0_tmp; */
  aorai_CurOpStatus = aorai_Terminated;
  aorai_CurOperation = op_decode_int;
  S1_tmp = S1;
  S2_tmp = S2;
  main_0_tmp = main_0;
  main_0_tmp = 0;
  if (S1 == 1) S2_tmp = 1; else S2_tmp = 0;
  if (S1 == 1) S1_tmp = 1; else S1_tmp = 0;
  S1 = S1_tmp;
  S2 = S2_tmp;
  main_0 = main_0_tmp;
  return;
}

/*@ requires 1 ≡ S1 ∧ 0 ≡ S2 ∧ 0 ≡ main_0;
    
    behavior Buchi_property_behavior:
      ensures 1 ≡ S2 ⇒ 1 ≢ 0;
      ensures 1 ≡ S1 ∨ 0 ≡ S1;
      ensures 1 ≡ S2 ∨ 0 ≡ S2;
      ensures 0 ≡ main_0;
      ensures 1 ≡ S1 ∨ 1 ≡ S2;
 */
int decode_int(char *s)
{
  int aorai_Loop_Init_81;
  int __retres;
  int intmax;
  int cutlim;
  int cutoff;
  int value;
  char c;
  decode_int_pre_func(s);
  intmax = ~ (1 << (sizeof(int) * (unsigned int)8 - (unsigned int)1));
  cutlim = intmax % 10;
  cutoff = intmax / 10;
  value = 0;
  /*@ ghost aorai_Loop_Init_81 = 1; */
  aorai_loop_81:
    /*@ loop invariant Aorai: 1 ≡ S1;
        loop invariant Aorai: 0 ≡ S2;
        loop invariant Aorai: 0 ≡ main_0;
    */
    while (1) {
      {
        char *tmp;
        /*@ ghost aorai_Loop_Init_81 = 0; */
        tmp = s;
        s ++;
        c = *tmp;
        if (! c) goto while_0_break;
        {
          int v;
          v = 0;
          switch ((int)c) {
            case '0': v = 0;
            goto switch_1_break;
            case '1': v = 1;
            goto switch_1_break;
            case '2': v = 2;
            goto switch_1_break;
            case '3': v = 3;
            goto switch_1_break;
            case '4': v = 4;
            goto switch_1_break;
            case '5': v = 5;
            goto switch_1_break;
            case '6': v = 6;
            goto switch_1_break;
            case '7': v = 7;
            goto switch_1_break;
            case '8': v = 8;
            goto switch_1_break;
            case '9': v = 9;
            goto switch_1_break;
            default: ;
            __retres = -1;
            goto return_label;
          }
          switch_1_break: ;
          if (value > cutoff) {
            __retres = -1;
            goto return_label;
          }
          else 
            if (value == cutoff) 
              if (v > cutlim) {
                __retres = -1;
                goto return_label;
              }
          value = value * 10 + v;
        }
      }
    }
  while_0_break: ;
  __retres = value;
  return_label: decode_int_post_func(__retres);
  return __retres;
}

/*@ ensures aorai_CurOpStatus ≡ aorai_Called;
    ensures aorai_CurOperation ≡ op_factorial;
    assigns aorai_CurOpStatus, aorai_CurOperation, S1, S2, main_0;
    
    behavior buch_state_S1_out:
      ensures 0 ≡ S1;
    
    behavior buch_state_S2_in:
      assumes 1 ≡ S2 ∨ (1 ≡ S1 ∧ 1 ≢ 0);
      ensures 1 ≡ S2;
    
    behavior buch_state_S2_out:
      assumes 0 ≡ S2 ∧ (0 ≡ S1 ∨ 1 ≡ 0);
      ensures 0 ≡ S2;
    
    behavior buch_state_main_0_out:
      ensures 0 ≡ main_0;
 */
void factorial_pre_func(int value)
{
  /*@ ghost int S1_tmp; */
  /*@ ghost int S2_tmp; */
  /*@ ghost int main_0_tmp; */
  aorai_CurOpStatus = aorai_Called;
  aorai_CurOperation = op_factorial;
  S1_tmp = S1;
  S2_tmp = S2;
  main_0_tmp = main_0;
  main_0_tmp = 0;
  if (S1 == 1) S2_tmp = 1;
  else 
    if (S2 == 1) S2_tmp = 1; else S2_tmp = 0;
  S1_tmp = 0;
  S1 = S1_tmp;
  S2 = S2_tmp;
  main_0 = main_0_tmp;
  return;
}

/*@ requires (1 ≡ S1 ∨ 1 ≡ S2) ∧ 0 ≡ main_0;
    ensures aorai_CurOpStatus ≡ aorai_Terminated;
    ensures aorai_CurOperation ≡ op_factorial;
    assigns aorai_CurOpStatus, aorai_CurOperation, S1, S2, main_0;
    
    behavior buch_state_S1_in:
      assumes 1 ≡ S2 ∨ 1 ≡ S1;
      ensures 1 ≡ S1;
    
    behavior buch_state_S1_out:
      assumes 0 ≡ S2 ∧ 0 ≡ S1;
      ensures 0 ≡ S1;
    
    behavior buch_state_S2_in:
      assumes 1 ≡ S2 ∨ (1 ≡ S1 ∧ 1 ≢ 0);
      ensures 1 ≡ S2;
    
    behavior buch_state_S2_out:
      assumes 0 ≡ S2 ∧ (0 ≡ S1 ∨ 1 ≡ 0);
      ensures 0 ≡ S2;
    
    behavior buch_state_main_0_out:
      ensures 0 ≡ main_0;
 */
void factorial_post_func(int res)
{
  /*@ ghost int S1_tmp; */
  /*@ ghost int S2_tmp; */
  /*@ ghost int main_0_tmp; */
  aorai_CurOpStatus = aorai_Terminated;
  aorai_CurOperation = op_factorial;
  S1_tmp = S1;
  S2_tmp = S2;
  main_0_tmp = main_0;
  main_0_tmp = 0;
  if (S1 == 1) S2_tmp = 1;
  else 
    if (S2 == 1) S2_tmp = 1; else S2_tmp = 0;
  if (S1 == 1) S1_tmp = 1;
  else 
    if (S2 == 1) S1_tmp = 1; else S1_tmp = 0;
  S1 = S1_tmp;
  S2 = S2_tmp;
  main_0 = main_0_tmp;
  return;
}

/*@ requires (1 ≡ S1 ∨ 1 ≡ S2) ∧ 0 ≡ main_0;
    requires 1 ≡ S1 ⇒ 1 ≢ 0;
    requires 1 ≡ S2 ∨ 0 ≡ S2;
    requires 1 ≡ S1 ∨ 0 ≡ S1;
    requires 0 ≤ value ≤ 12;
    decreases value;
    ensures \result ≥ 1;
    
    behavior Buchi_property_behavior:
      ensures 1 ≡ S1 ∨ 0 ≡ S1;
      ensures 1 ≡ S2 ∨ 0 ≡ S2;
      ensures 0 ≡ main_0;
      ensures 1 ≡ S1 ∨ 1 ≡ S2;
 */
int factorial(int value)
{
  int tmp_0;
  factorial_pre_func(value);
  if (value > 0) {
    int tmp;
    tmp = factorial(value - 1);
    tmp_0 = tmp * value;
  }
  else tmp_0 = 1;
  factorial_post_func(tmp_0);
  return tmp_0;
}

/*@ ensures aorai_CurOpStatus ≡ aorai_Called;
    ensures aorai_CurOperation ≡ op_main;
    assigns aorai_CurOpStatus, aorai_CurOperation, S1, S2, main_0;
    
    behavior buch_state_S1_in:
      assumes 1 ≡ main_0;
      ensures 1 ≡ S1;
    
    behavior buch_state_S1_out:
      assumes 0 ≡ main_0;
      ensures 0 ≡ S1;
    
    behavior buch_state_S2_out:
      ensures 0 ≡ S2;
    
    behavior buch_state_main_0_out:
      ensures 0 ≡ main_0;
 */
void main_pre_func(int argc, char **argv)
{
  /*@ ghost int S1_tmp; */
  /*@ ghost int S2_tmp; */
  /*@ ghost int main_0_tmp; */
  aorai_CurOpStatus = aorai_Called;
  aorai_CurOperation = op_main;
  S1_tmp = S1;
  S2_tmp = S2;
  main_0_tmp = main_0;
  main_0_tmp = 0;
  S2_tmp = 0;
  if (main_0 == 1) S1_tmp = 1; else S1_tmp = 0;
  S1 = S1_tmp;
  S2 = S2_tmp;
  main_0 = main_0_tmp;
  return;
}

/*@ requires 1 ≡ S1 ∧ 0 ≡ S2 ∧ 0 ≡ main_0;
    ensures aorai_CurOpStatus ≡ aorai_Terminated;
    ensures aorai_CurOperation ≡ op_main;
    assigns aorai_CurOpStatus, aorai_CurOperation, S1, S2, main_0;
    
    behavior buch_state_S1_in:
      assumes 1 ≡ S1;
      ensures 1 ≡ S1;
    
    behavior buch_state_S1_out:
      assumes 0 ≡ S1;
      ensures 0 ≡ S1;
    
    behavior buch_state_S2_in:
      assumes 1 ≡ S1 ∧ 1 ≢ 0;
      ensures 1 ≡ S2;
    
    behavior buch_state_S2_out:
      assumes 0 ≡ S1 ∨ 1 ≡ 0;
      ensures 0 ≡ S2;
    
    behavior buch_state_main_0_out:
      ensures 0 ≡ main_0;
 */
void main_post_func(int res)
{
  /*@ ghost int S1_tmp; */
  /*@ ghost int S2_tmp; */
  /*@ ghost int main_0_tmp; */
  aorai_CurOpStatus = aorai_Terminated;
  aorai_CurOperation = op_main;
  S1_tmp = S1;
  S2_tmp = S2;
  main_0_tmp = main_0;
  main_0_tmp = 0;
  if (S1 == 1) S2_tmp = 1; else S2_tmp = 0;
  if (S1 == 1) S1_tmp = 1; else S1_tmp = 0;
  S1 = S1_tmp;
  S2 = S2_tmp;
  main_0 = main_0_tmp;
  return;
}

/*@ requires 1 ≡ main_0 ∧ 0 ≡ S1 ∧ 0 ≡ S2;
    requires argc ≡ 2;
    ensures \result ≡ 0 ∨ \result ≡ 1;
    
    behavior Buchi_property_behavior:
      ensures 1 ≡ S2 ⇒ 1 ≢ 0;
      ensures 1 ≡ S1 ∨ 0 ≡ S1;
      ensures 1 ≡ S2 ∨ 0 ≡ S2;
      ensures 0 ≡ main_0;
      ensures 1 ≡ S1 ∨ 1 ≡ S2;
 */
int main(int argc, char **argv)
{
  int __retres;
  int value;
  main_pre_func(argc,argv);
  if (argc != 2) {
    __retres = 1;
    goto return_label;
  }
  else {
    value = decode_int(*(argv + 1));
    if (value < 0) {
      __retres = 1;
      goto return_label;
    }
    else 
      if (value > 12) {
        __retres = 1;
        goto return_label;
      }
  }
  factorial(value);
  __retres = 0;
  return_label: main_post_func(__retres);
  return __retres;
}


