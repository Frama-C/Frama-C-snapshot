(**************************************************************************)
(*                                                                        *)
(*  This file is part of WP plug-in of Frama-C.                           *)
(*                                                                        *)
(*  Copyright (C) 2007-2019                                               *)
(*    CEA (Commissariat a l'energie atomique et aux energies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

(* ---------------------------------------------------------------------- *)
(* --- Lists for Why-3                                                --- *)
(* ---------------------------------------------------------------------- *)

theory Vlist

  use int.Int
  use int.ComputerDivision

  (* -------------------------------------------------------------------- *)
  (* --- Classical Lists for Alt-Ergo                                 --- *)
  (* -------------------------------------------------------------------- *)

  type list 'a

  function nil : list 'a
  function cons 'a (list 'a) : list 'a
  function concat (list 'a) (list 'a) : list 'a
  function repeat (list 'a) int : list 'a
  function length (list 'a) : int
  function nth (list 'a) int : 'a

  function elt (x:'a) : list 'a  = cons x nil

  (* -------------------------------------------------------------------- *)
  (* --- length                                                       --- *)
  (* -------------------------------------------------------------------- *)

  axiom length_pos : forall w:list 'a. (Int.(<=) 0 (length w))

  axiom length_nil : length (nil: list 'a) = 0

  axiom length_nil_bis : forall w:list 'a. length w = 0 -> w = nil

  axiom length_cons :
    forall x:'a, w:list 'a [length (cons x w)].
      length (cons x w) = (Int.(+) 1 (length w))

  axiom length_concat :
    forall u,v:list 'a [length (concat u v)].
      length (concat u v) = (Int.(+) (length u) (length v))

  axiom length_repeat : 
    forall w:list 'a, n:int [length (repeat w n)].
      (Int.(<=) 0 n) -> length (repeat w n) = (Int.( * ) n (length w))

  (* -------------------------------------------------------------------- *)
  (* --- nth                                                          --- *)
  (* -------------------------------------------------------------------- *)

  axiom nth_cons: 
    forall k:int, x:'a, w:list 'a [nth (cons x w) k].
      nth (cons x w) k = if k = 0 then x else nth w (k-1)

  axiom nth_concat: 
    forall u,v:list 'a, k:int [nth (concat u v) k].
      nth (concat u v) k = if k < length u then nth u k 
                                           else nth v (Int.(-) k (length u))

  axiom nth_repeat: 
    forall n,k:int, w:list 'a [nth (repeat w n) k].
      0 <= k < (Int.( * ) n (length w)) -> (Int.(<) 0 (length w)) ->
      nth (repeat w n) k = nth w (mod k (length w))

  (* -------------------------------------------------------------------- *)
  (* --- equality of Lists                                            --- *)
  (* -------------------------------------------------------------------- *)

  predicate vlist_eq (u : list 'a) (v : list 'a) =
    length u = length v &&
    forall i:int. 0 <= i < length u -> nth u i = nth v i

  axiom extensionality:
    forall u,v:list 'a. vlist_eq u v -> u = v

  (* -------------------------------------------------------------------- *)
  (* --- neutral elements                                             --- *)
  (* -------------------------------------------------------------------- *)

  lemma eq_nil_concat:
    forall w:list 'a. vlist_eq (concat nil w) w /\ vlist_eq (concat w nil) w
  meta "remove_for_" lemma eq_nil_concat

  lemma rw_nil_concat_left:
    forall w:list 'a [concat nil w]. concat nil w = w

  lemma rw_nil_concat_right:
    forall w:list 'a [concat w nil]. concat w nil = w

  (* -------------------------------------------------------------------- *)
  (* --- normalization                                                --- *)
  (* -------------------------------------------------------------------- *)

  lemma eq_cons_concat:
    forall x:'a, v,w:list 'a [concat (cons x v) w]. 
      vlist_eq (concat (cons x v) w) (cons x (concat v w))
  meta "remove_for_" lemma eq_cons_concat

  lemma rw_cons_concat:
    forall x:'a, v,w:list 'a [concat (cons x v) w].
      (concat (cons x v) w) = (cons x (concat v w))
  meta "remove_for_" lemma rw_cons_concat

  lemma rw_nil_cons_concat:
    forall x:'a, w:list 'a [concat (cons x nil) w].
      (concat (cons x nil) w) = (cons x w)
  meta "remove_for_" lemma rw_nil_cons_concat

  (* -------------------------------------------------------------------- *)
  (* --- associativity                                                --- *)
  (* -------------------------------------------------------------------- *)

  lemma eq_assoc_concat: 
    forall u,v,w:list 'a.
      vlist_eq (concat (concat u v) w) (concat u (concat v w))
  meta "remove_for_" lemma eq_assoc_concat

  (* -------------------------------------------------------------------- *)
  (* --- repeat                                                       --- *)
  (* -------------------------------------------------------------------- *)

  lemma rw_nil_repeat:
    forall n:int [repeat (nil: list 'a) n].
      n >= 0 -> repeat (nil: list 'a) n = (nil: list 'a)

  lemma rw_repeat_zero:
    forall w:list 'a [repeat w 0].
      repeat w 0 = nil

  lemma eq_repeat_one:
    forall w:list 'a. vlist_eq (repeat w 1) w
  meta "remove_for_" lemma eq_repeat_one

  lemma rw_repeat_one:
    forall w:list 'a [repeat w 1]. repeat w 1 = w

  lemma eq_repeat_concat:
    forall p,q:int, w:list 'a.
      0 <= p -> 0 <= q ->
      vlist_eq (repeat w (Int.(+) p q)) (concat (repeat w p) (repeat w q))
  meta "remove_for_" lemma eq_repeat_concat

  lemma rw_repeat_concat:
    forall p,q:int, w:list 'a.
      0 <= p -> 0 <= q ->
      repeat w (Int.(+) p q) = concat (repeat w p) (repeat w q)
  meta "remove_for_" lemma rw_repeat_concat

  lemma rw_repeat_after:
    forall p:int, w:list 'a.
       0 <= p -> concat (repeat w p) w = repeat w (Int.(+) p 1)
  meta "remove_for_" lemma rw_repeat_after

  lemma rw_repeat_before:
    forall p:int, w:list 'a.
      0 <= p -> concat w (repeat w p) = repeat w (Int.(+) p 1)
  meta "remove_for_" lemma rw_repeat_before

(*--- To avoid exponential blowup of use of repeat_after by alt-ergo ---*)

function repeat_box (list 'a) int : (list 'a) (* repeat *)

axiom rw_repeat_box_unfold: 
  forall w:list 'a, n:int [ repeat_box w n ].
    repeat_box w n = repeat w n

axiom rw_repeat_plus_box_unfold: 
  forall w:list 'a, a,b: int [ repeat_box w (Int.(+) a b) ].
    (Int.(<=) 0 a)
 -> (Int.(<=) 0 b)
 -> repeat_box w (Int.(+) a b) = concat (repeat w a)
                                                (repeat w b)
axiom rw_repeat_plus_one_box_unfold: 
  forall w:list 'a, n:int [ repeat_box w n ].
    (Int.(<) 0 n)
 -> (repeat_box w n = (concat (repeat w (Int.(-) n 1)) w)
 && (repeat_box w (Int.(+) n 1) = concat (repeat w n) w))

end
