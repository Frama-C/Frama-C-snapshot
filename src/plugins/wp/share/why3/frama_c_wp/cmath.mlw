(**************************************************************************)
(*                                                                        *)
(*  This file is part of WP plug-in of Frama-C.                           *)
(*                                                                        *)
(*  Copyright (C) 2007-2019                                               *)
(*    CEA (Commissariat a l'energie atomique et aux energies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

(* -------------------------------------------------------------------------- *)
(* --- Mathematics for Why-3                                              --- *)
(* -------------------------------------------------------------------------- *)

theory Cmath [@ W:non_conservative_extension:N]
  use int.Int
  use int.Abs
  use real.RealInfix

  lemma abs_def :
    forall x:int [abs(x)].
    if x >= 0 then abs(x)=x else abs(x)=(-x)

end

theory Square [@ W:non_conservative_extension:N]

  use real.RealInfix
  use real.Square

  lemma sqrt_lin1 : forall x:real [sqrt(x)]. 1. <. x -> sqrt(x) <. x
  lemma sqrt_lin0 : forall x:real [sqrt(x)]. 0. <. x <. 1. -> x <. sqrt(x)
  lemma sqrt_0 : sqrt(0.) = 0.
  lemma sqrt_1 : sqrt(1.) = 1.

end

theory ExpLog [@ W:non_conservative_extension:N]

  use real.RealInfix
  use real.ExpLog

  axiom exp_pos : forall x:real. exp x >. 0.

end

theory ArcTrigo

  use real.RealInfix
  use real.Trigonometry as Trigo

  function atan (x : real) : real = Trigo.atan x
  function asin real : real
  function acos real : real

  lemma Sin_asin: forall x:real. -. 1.0 <=. x <=. 1.0 -> Trigo.sin (asin x) = x
  lemma Cos_acos: forall x:real. -. 1.0 <=. x <=. 1.0 -> Trigo.cos (acos x) = x

end
