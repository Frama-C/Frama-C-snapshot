# frama-c -wp -wp-model 'Typed (Ref)' [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_hoare/reference_array.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
[wp] Collecting variable usage
------------------------------------------------------------
  Function add_1_5
------------------------------------------------------------

Goal Post-condition (file tests/wp_hoare/reference_array.i, line 49) in 'add_1_5':
Let a = shift_A5_sint32(ap_0, 0).
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 4).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(ap_0.base) <= 0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), 5).
  (* Call 'add_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_add_0[i_1] = (reg_load_0[i_1] + Mint_0[shift_sint32(a, i_1)])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_add_0[i_1] = reg_add_1[i_1])))).
}
Prove: reg_add_0[i] = (reg_load_0[i] + Mint_0[shift_sint32(a, i)]).

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 48) in 'add_1_5':
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 48) in 'add_1_5':
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_hoare/reference_array.i, line 26) in 'add_5'' in 'add_1_5' at call 'add_5' (file tests/wp_hoare/reference_array.i, line 52)
:
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function calls_on_array_dim_1
------------------------------------------------------------

Goal Post-condition 'Pload' in 'calls_on_array_dim_1':
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 4).
  (* Call 'load_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_load_0[i_1] = t[i_1]))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_load_0[i_1] = reg_load_1[i_1])))).
  (* Call 'reset_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) -> (0 = t_1[i_1]))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 19) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (t_1[i_1] = t[i_1])))).
  (* Call 'add_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_add_0[i_1] = (reg_load_0[i_1] + t_1[i_1])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_add_0[i_1] = reg_add_1[i_1])))).
}
Prove: reg_load_0[i] = t[i].

------------------------------------------------------------

Goal Post-condition 'Preset' in 'calls_on_array_dim_1':
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 4).
  (* Call 'load_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_load_0[i_1] = t_1[i_1]))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_load_0[i_1] = reg_load_1[i_1])))).
  (* Call 'reset_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) -> (0 = t[i_1]))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 19) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (t[i_1] = t_1[i_1])))).
  (* Call 'add_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_add_0[i_1] = (reg_load_0[i_1] + t[i_1])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_add_0[i_1] = reg_add_1[i_1])))).
}
Prove: 0 = t[i].

------------------------------------------------------------

Goal Post-condition 'Padd' in 'calls_on_array_dim_1':
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 4).
  (* Call 'load_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_load_0[i_1] = t[i_1]))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_load_0[i_1] = reg_load_1[i_1])))).
  (* Call 'reset_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) -> (0 = t_1[i_1]))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 19) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (t_1[i_1] = t[i_1])))).
  (* Call 'add_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_add_0[i_1] = (reg_load_0[i_1] + t_1[i_1])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_add_0[i_1] = reg_add_1[i_1])))).
}
Prove: reg_add_0[i] = t[i].

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 58) in 'calls_on_array_dim_1':
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 58) in 'calls_on_array_dim_1':
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_hoare/reference_array.i, line 19) in 'load_5'' in 'calls_on_array_dim_1' at call 'load_5' (file tests/wp_hoare/reference_array.i, line 65)
:
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_hoare/reference_array.i, line 9) in 'reset_5'' in 'calls_on_array_dim_1' at call 'reset_5' (file tests/wp_hoare/reference_array.i, line 66)
:
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_hoare/reference_array.i, line 26) in 'add_5'' in 'calls_on_array_dim_1' at call 'add_5' (file tests/wp_hoare/reference_array.i, line 67)
:
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function calls_on_array_dim_2
------------------------------------------------------------

Goal Post-condition 'Pload' in 'calls_on_array_dim_2':
Let m = tt_1[0].
Let m_1 = tt_0[0].
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 4).
  (* Call 'load_1_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_load_0[i_1] = m_1[i_1]))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_load_0[i_1] = reg_load_1[i_1])))).
  (* Call 'reset_1_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) -> (0 = m[i_1]))).
  (* Call Effects *)
  Have: (forall i_1 : Z. ((0 != i_1) -> (tt_1[i_1] = tt_0[i_1]))) /\
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
       (((i_1 < 0) \/ (5 <= i_1)) -> (m[i_1] = m_1[i_1]))))).
  (* Call 'add_1_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_add_0[i_1] = (reg_load_0[i_1] + m[i_1])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_add_0[i_1] = reg_add_1[i_1])))).
}
Prove: reg_load_0[i] = m_1[i].

------------------------------------------------------------

Goal Post-condition 'Preset' in 'calls_on_array_dim_2':
Let m = tt_0[0].
Let m_1 = tt_1[0].
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 4).
  (* Call 'load_1_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_load_0[i_1] = m_1[i_1]))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_load_0[i_1] = reg_load_1[i_1])))).
  (* Call 'reset_1_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) -> (0 = m[i_1]))).
  (* Call Effects *)
  Have: (forall i_1 : Z. ((0 != i_1) -> (tt_0[i_1] = tt_1[i_1]))) /\
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
       (((i_1 < 0) \/ (5 <= i_1)) -> (m[i_1] = m_1[i_1]))))).
  (* Call 'add_1_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_add_0[i_1] = (reg_load_0[i_1] + m[i_1])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_add_0[i_1] = reg_add_1[i_1])))).
}
Prove: 0 = m[i].

------------------------------------------------------------

Goal Post-condition 'Padd' in 'calls_on_array_dim_2':
Let m = tt_1[0].
Let m_1 = tt_0[0].
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 4).
  (* Call 'load_1_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_load_0[i_1] = m_1[i_1]))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_load_0[i_1] = reg_load_1[i_1])))).
  (* Call 'reset_1_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) -> (0 = m[i_1]))).
  (* Call Effects *)
  Have: (forall i_1 : Z. ((0 != i_1) -> (tt_1[i_1] = tt_0[i_1]))) /\
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
       (((i_1 < 0) \/ (5 <= i_1)) -> (m[i_1] = m_1[i_1]))))).
  (* Call 'add_1_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_add_0[i_1] = (reg_load_0[i_1] + m[i_1])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_add_0[i_1] = reg_add_1[i_1])))).
}
Prove: reg_add_0[i] = m_1[i].

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 91) in 'calls_on_array_dim_2':
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 91) in 'calls_on_array_dim_2':
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_hoare/reference_array.i, line 40) in 'load_1_5'' in 'calls_on_array_dim_2' at call 'load_1_5' (file tests/wp_hoare/reference_array.i, line 98)
:
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_hoare/reference_array.i, line 33) in 'reset_1_5'' in 'calls_on_array_dim_2' at call 'reset_1_5' (file tests/wp_hoare/reference_array.i, line 99)
:
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_hoare/reference_array.i, line 47) in 'add_1_5'' in 'calls_on_array_dim_2' at call 'add_1_5' (file tests/wp_hoare/reference_array.i, line 100)
:
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function calls_on_array_dim_2_to_1
------------------------------------------------------------

Goal Post-condition 'todo,Pload' in 'calls_on_array_dim_2_to_1':
Let a = shift_A20_A5_sint32(global(G_tt_110), 0).
Let a_1 = shift_sint32(a, 0).
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 4).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Call 'load_5' *)
  Have: valid_rw(Malloc_0, a_1, 5) /\
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
       (reg_load_0[i_1] = Mint_0[shift_sint32(a, i_1)])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_load_0[i_1] = reg_load_1[i_1])))).
  (* Call 'reset_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (0 = Mint_1[shift_sint32(a, i_1)]))).
  (* Call Effects *)
  Have: havoc(Mint_0, Mint_1, a_1, 5).
  (* Call 'add_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_add_0[i_1] = (reg_load_0[i_1] + Mint_1[shift_sint32(a, i_1)])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_add_0[i_1] = reg_add_1[i_1])))).
}
Prove: reg_load_0[i] = tt_0[0][i].

------------------------------------------------------------

Goal Post-condition 'todo,Preset' in 'calls_on_array_dim_2_to_1':
Let a = shift_A20_A5_sint32(global(G_tt_110), 0).
Let a_1 = shift_sint32(a, 0).
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 4).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Call 'load_5' *)
  Have: valid_rw(Malloc_0, a_1, 5) /\
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
       (reg_load_0[i_1] = Mint_0[shift_sint32(a, i_1)])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_load_0[i_1] = reg_load_1[i_1])))).
  (* Call 'reset_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (0 = Mint_1[shift_sint32(a, i_1)]))).
  (* Call Effects *)
  Have: havoc(Mint_0, Mint_1, a_1, 5).
  (* Call 'add_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_add_0[i_1] = (reg_load_0[i_1] + Mint_1[shift_sint32(a, i_1)])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_add_0[i_1] = reg_add_1[i_1])))).
}
Prove: 0 = tt_0[0][i].

------------------------------------------------------------

Goal Post-condition 'todo,Padd' in 'calls_on_array_dim_2_to_1':
Let a = shift_A20_A5_sint32(global(G_tt_110), 0).
Let a_1 = shift_sint32(a, 0).
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 4).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Call 'load_5' *)
  Have: valid_rw(Malloc_0, a_1, 5) /\
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
       (reg_load_0[i_1] = Mint_0[shift_sint32(a, i_1)])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_load_0[i_1] = reg_load_1[i_1])))).
  (* Call 'reset_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (0 = Mint_1[shift_sint32(a, i_1)]))).
  (* Call Effects *)
  Have: havoc(Mint_0, Mint_1, a_1, 5).
  (* Call 'add_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_add_0[i_1] = (reg_load_0[i_1] + Mint_1[shift_sint32(a, i_1)])))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_add_0[i_1] = reg_add_1[i_1])))).
}
Prove: reg_add_0[i] = tt_0[0][i].

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 73) in 'calls_on_array_dim_2_to_1' (1/2):
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 73) in 'calls_on_array_dim_2_to_1' (2/2):
Call Effect at line 84
Let a = shift_A20_A5_sint32(global(G_tt_110), 0).
Let a_1 = shift_sint32(a, 0).
Assume {
  (* Heap *)
  Have: linked(Malloc_0).
  (* Call 'load_5' *)
  Have: valid_rw(Malloc_0, a_1, 5) /\
      (forall i : Z. ((0 <= i) -> ((i <= 4) ->
       (reg_load_0[i] = Mint_0[shift_sint32(a, i)])))).
  (* Call Effects *)
  Have: forall i : Z. ((0 <= i) -> ((i <= 4) -> (((i < 0) \/ (5 <= i)) ->
      (reg_load_0[i] = reg_load_1[i])))).
  (* Merge *)
  Either {
    Case:
      Have: Mint_1 = Mint_0.
      (* Call 'reset_5' *)
      Have: forall i : Z. ((0 <= i) -> ((i <= 4) ->
          (0 = Mint_2[shift_sint32(a, i)]))).
      (* Call Effects *)
      Have: havoc(Mint_1, Mint_2, a_1, 5).
    Case:
      Have: Mint_3 = Mint_0.
      (* Exit Effects *)
      Have: havoc(Mint_3, Mint_4, a_1, 5).
  }
}
Prove: !valid_rd(Malloc_0, a_1, 5).

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 73) in 'calls_on_array_dim_2_to_1' (1/2):
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 73) in 'calls_on_array_dim_2_to_1' (2/2):
Call Effect at line 84
Let a = shift_A20_A5_sint32(global(G_tt_110), 0).
Let a_1 = shift_sint32(a, 0).
Assume {
  (* Heap *)
  Have: linked(Malloc_0).
  (* Call 'load_5' *)
  Have: valid_rw(Malloc_0, a_1, 5) /\
      (forall i : Z. ((0 <= i) -> ((i <= 4) ->
       (reg_load_0[i] = Mint_0[shift_sint32(a, i)])))).
  (* Call Effects *)
  Have: forall i : Z. ((0 <= i) -> ((i <= 4) -> (((i < 0) \/ (5 <= i)) ->
      (reg_load_0[i] = reg_load_1[i])))).
  (* Call 'reset_5' *)
  Have: forall i : Z. ((0 <= i) -> ((i <= 4) ->
      (0 = Mint_1[shift_sint32(a, i)]))).
  (* Call Effects *)
  Have: havoc(Mint_0, Mint_1, a_1, 5).
}
Prove: !valid_rd(Malloc_0, a_1, 5).

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_hoare/reference_array.i, line 19) in 'load_5'' in 'calls_on_array_dim_2_to_1' at call 'load_5' (file tests/wp_hoare/reference_array.i, line 83)
:
Assume { (* Heap *) Have: linked(Malloc_0). }
Prove: valid_rw(Malloc_0,
         shift_sint32(shift_A20_A5_sint32(global(G_tt_110), 0), 0), 5).

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_hoare/reference_array.i, line 9) in 'reset_5'' in 'calls_on_array_dim_2_to_1' at call 'reset_5' (file tests/wp_hoare/reference_array.i, line 84)
:
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_hoare/reference_array.i, line 26) in 'add_5'' in 'calls_on_array_dim_2_to_1' at call 'add_5' (file tests/wp_hoare/reference_array.i, line 85)
:
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function load_1_5
------------------------------------------------------------

Goal Post-condition (file tests/wp_hoare/reference_array.i, line 42) in 'load_1_5':
Let a = shift_A5_sint32(lp_0, 0).
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 4).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(lp_0.base) <= 0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), 5).
  (* Call 'load_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (reg_load_0[i_1] = Mint_0[shift_sint32(a, i_1)]))).
  (* Call Effects *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (((i_1 < 0) \/ (5 <= i_1)) -> (reg_load_0[i_1] = reg_load_1[i_1])))).
}
Prove: reg_load_0[i] = Mint_0[shift_sint32(a, i)].

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 41) in 'load_1_5':
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 41) in 'load_1_5':
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_hoare/reference_array.i, line 19) in 'load_5'' in 'load_1_5' at call 'load_5' (file tests/wp_hoare/reference_array.i, line 45)
:
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function reset_1_5
------------------------------------------------------------

Goal Post-condition (file tests/wp_hoare/reference_array.i, line 36) in 'reset_1_5':
Let a = shift_A5_sint32(rp_0, 0).
Let a_1 = shift_sint32(a, 0).
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 4).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(rp_0.base) <= 0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, 5).
  (* Call 'reset_5' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 4) ->
      (0 = Mint_0[shift_sint32(a, i_1)]))).
  (* Call Effects *)
  Have: havoc(Mint_1, Mint_0, a_1, 5).
}
Prove: 0 = Mint_0[shift_sint32(a, i)].

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 34) in 'reset_1_5':
Call Effect at line 38
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_hoare/reference_array.i, line 34) in 'reset_1_5':
Call Effect at line 38
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_hoare/reference_array.i, line 9) in 'reset_5'' in 'reset_1_5' at call 'reset_5' (file tests/wp_hoare/reference_array.i, line 38)
:
Prove: true.

------------------------------------------------------------
