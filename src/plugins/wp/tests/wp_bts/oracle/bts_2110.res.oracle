# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_bts/bts_2110.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
[wp] 2 goals scheduled
---------------------------------------------
--- File 'typed/myMain_stmt_assign.ergo' 
---------------------------------------------
(* ---------------------------------------------------------- *)
(* --- Assigns 'KO' at call 'myRead' (file tests/wp_bts/bts_2110.i, line 36) --- *)
(* ---------------------------------------------------------- *)

goal myMain_stmt_assign:
  forall i : int.
  forall t : int farray.
  forall t_2,t_1 : (addr,int) farray.
  forall a_1,a : addr.
  let a_2 = shiftfield_F1_FD_pos(a) : addr in
  let x = t_1[a_2] : int in
  let x_1 = t_2[a_2] : int in
  linked(t) ->
  (x <> x_1) ->
  (region(a.base) <= 0) ->
  (region(a_1.base) <= 0) ->
  is_sint32(x) ->
  is_sint32(x_1) ->
  valid_rd(t, a_2, 1) ->
  havoc(t_2[a_2 <- i], t_1, a_1, 1) ->
  (a_1 = a_2)

---------------------------------------------
--- File 'typed/Compound.ergo' 
---------------------------------------------
(* ---------------------------------------------------------- *)
(* --- Memory Compound Updates                            --- *)
(* ---------------------------------------------------------- *)

function shiftfield_F2_A_dummy(p:addr) : addr = shift(p, 0)

function Load_S2_A
    (p:addr,
    Mint_0:(addr,int) farray) :
    S2_A =
    { F2_A_dummy = Mint_0[shiftfield_F2_A_dummy(p)] }

function shiftfield_F1_FD_pos(p:addr) : addr = shift(p, 0)

axiom Q_Load_S2_A_havoc_Mint:
  forall p,q : addr.
  forall Mint_0,Mint_1 : (addr,int) farray.
  forall k : int
  [havoc(Mint_0, Mint_1, q, k),Load_S2_A(p, Mint_0)|
    havoc(Mint_0, Mint_1, q, k),Load_S2_A(p, Mint_1)].
  separated(p, 1, q, k) -> havoc(Mint_0, Mint_1, q, k) ->
    (Load_S2_A(p, Mint_0) = Load_S2_A(p, Mint_1))

axiom Q_Load_S2_A_eqmem_Mint:
  forall p,q : addr.
  forall Mint_0,Mint_1 : (addr,int) farray.
  forall k : int
  [eqmem(Mint_0, Mint_1, q, k),Load_S2_A(p, Mint_0)|
    eqmem(Mint_0, Mint_1, q, k),Load_S2_A(p, Mint_1)].
  included(p, 1, q, k) -> eqmem(Mint_0, Mint_1, q, k) ->
    (Load_S2_A(p, Mint_0) = Load_S2_A(p, Mint_1))

axiom Q_Load_S2_A_update_Mint:
  forall p,q : addr.
  forall Mint_0 : (addr,int) farray.
  forall v : int
  [Load_S2_A(p, Mint_0[q <- v])].
  (p <> q) -> (Load_S2_A(p, Mint_0) = Load_S2_A(p, Mint_0[q <- v]))

---------------------------------------------
--- File 'typed/S2_A.ergo' 
---------------------------------------------
(* ---------------------------------------------------------- *)
(* --- Struct 'A'                                         --- *)
(* ---------------------------------------------------------- *)

type S2_A = { F2_A_dummy : int }

predicate EqS2_A(S:S2_A, S_1:S2_A) = (S.F2_A_dummy) = (S_1.F2_A_dummy)

predicate IsS2_A(S:S2_A) = is_sint32(S.F2_A_dummy)

---------------------------------------------
--- File 'typed/myMain_post_KO.ergo' 
---------------------------------------------
(* ---------------------------------------------------------- *)
(* --- Post-condition 'KO' in 'myMain'                    --- *)
(* ---------------------------------------------------------- *)

goal myMain_post_KO:
  forall t_1,t : (addr,int) farray.
  forall a_1,a : addr.
  let a_2 = Load_S2_A(a_1, t) : S2_A in
  let a_3 = Load_S2_A(a_1, t_1) : S2_A in
  (region(a.base) <= 0) ->
  (region(a_1.base) <= 0) ->
  IsS2_A(a_2) ->
  IsS2_A(a_3) ->
  havoc(t, t_1, a_1, 1) ->
  EqS2_A(a_3, a_2)

[wp] 2 goals generated
