# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_plugin/copy.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function copy
------------------------------------------------------------

Goal Post-condition (file tests/wp_plugin/copy.i, line 5) in 'copy':
Let a_1 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Heap *)
  Have: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: separated(a_1, n, shift_sint32(b, 0), n).
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, a_1, n).
  (* Invariant 'Copy' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(b, i_2)]))).
  (* Invariant 'Range' *)
  Have: (0 <= i_1) /\ (i_1 <= n).
  (* Else *)
  Have: n <= i_1.
}
Prove: Mint_0[shift_sint32(a, i)] = Mint_0[shift_sint32(b, i)].

------------------------------------------------------------

Goal Preservation of Invariant 'Copy' (file tests/wp_plugin/copy.i, line 11):
Let m = Mint_0[shift_sint32(a, i) <- Mint_0[shift_sint32(b, i)]].
Let a_1 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(1 + i).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Heap *)
  Have: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: separated(a_1, n, shift_sint32(b, 0), n).
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, a_1, n).
  (* Invariant 'Copy' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(b, i_2)]))).
  (* Invariant 'Range' *)
  Have: (0 <= i) /\ (i <= n).
  (* Then *)
  Have: i < n.
  (* Assertion 'A' *)
  Have: forall i_2 : Z. let a_2 = shift_sint32(a, i_2) in ((0 <= i_2) ->
      ((i_2 < i) -> (Mint_0[a_2] = m[a_2]))).
  (* Assertion 'B' *)
  Have: forall i_2 : Z. let a_2 = shift_sint32(b, i_2) in ((0 <= i_2) ->
      ((i_2 < i) -> (Mint_0[a_2] = m[a_2]))).
}
Prove: m[shift_sint32(a, i_1)] = m[shift_sint32(b, i_1)].

------------------------------------------------------------

Goal Establishment of Invariant 'Copy' (file tests/wp_plugin/copy.i, line 11):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'Range' (file tests/wp_plugin/copy.i, line 10):
Let m = Mint_1[shift_sint32(a, i) <- Mint_1[shift_sint32(b, i)]].
Let a_1 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(1 + i).
  (* Heap *)
  Have: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: separated(a_1, n, shift_sint32(b, 0), n).
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, a_1, n).
  (* Invariant 'Copy' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (Mint_1[shift_sint32(a, i_1)] = Mint_1[shift_sint32(b, i_1)]))).
  (* Invariant 'Range' *)
  Have: (0 <= i) /\ (i <= n).
  (* Then *)
  Have: i < n.
  (* Assertion 'A' *)
  Have: forall i_1 : Z. let a_2 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      ((i_1 < i) -> (Mint_1[a_2] = m[a_2]))).
  (* Assertion 'B' *)
  Have: forall i_1 : Z. let a_2 = shift_sint32(b, i_1) in ((0 <= i_1) ->
      ((i_1 < i) -> (Mint_1[a_2] = m[a_2]))).
}
Prove: (-1) <= i.

------------------------------------------------------------

Goal Establishment of Invariant 'Range' (file tests/wp_plugin/copy.i, line 10):
Prove: true.

------------------------------------------------------------

Goal Assertion 'A' (file tests/wp_plugin/copy.i, line 17):
Let a_1 = shift_sint32(a, 0).
Let a_2 = shift_sint32(a, i).
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Heap *)
  Have: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: separated(a_1, n, shift_sint32(b, 0), n).
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, a_1, n).
  (* Invariant 'Copy' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(b, i_2)]))).
  (* Invariant 'Range' *)
  Have: (0 <= i_1) /\ (i_1 <= n).
  (* Then *)
  Have: i_1 < n.
}
Prove: Mint_0[a_2]
         = Mint_0[shift_sint32(a, i_1) <- Mint_0[shift_sint32(b, i_1)]][a_2].

------------------------------------------------------------

Goal Assertion 'B' (file tests/wp_plugin/copy.i, line 18):
Let m = Mint_0[shift_sint32(a, i_1) <- Mint_0[shift_sint32(b, i_1)]].
Let a_1 = shift_sint32(a, 0).
Let a_2 = shift_sint32(b, i).
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Heap *)
  Have: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: separated(a_1, n, shift_sint32(b, 0), n).
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, a_1, n).
  (* Invariant 'Copy' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(b, i_2)]))).
  (* Invariant 'Range' *)
  Have: (0 <= i_1) /\ (i_1 <= n).
  (* Then *)
  Have: i_1 < n.
  (* Assertion 'A' *)
  Have: forall i_2 : Z. let a_3 = shift_sint32(a, i_2) in ((0 <= i_2) ->
      ((i_2 < i_1) -> (Mint_0[a_3] = m[a_3]))).
}
Prove: Mint_0[a_2] = m[a_2].

------------------------------------------------------------

Goal Loop assigns (file tests/wp_plugin/copy.i, line 12) (1/3):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_plugin/copy.i, line 12) (2/3):
Effect at line 14
Let m = Mint_1[shift_sint32(a, i) <- Mint_1[shift_sint32(b, i)]].
Let a_1 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(i) /\ is_sint32(n).
  (* Goal *)
  When: valid_rd(Malloc_0, a_1, n).
  (* Heap *)
  Have: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: separated(a_1, n, shift_sint32(b, 0), n).
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, a_1, n).
  (* Invariant 'Copy' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (Mint_1[shift_sint32(a, i_1)] = Mint_1[shift_sint32(b, i_1)]))).
  (* Invariant 'Range' *)
  Have: (0 <= i) /\ (i <= n).
  (* Then *)
  Have: i < n.
  (* Assertion 'A' *)
  Have: forall i_1 : Z. let a_2 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      ((i_1 < i) -> (Mint_1[a_2] = m[a_2]))).
  (* Assertion 'B' *)
  Have: forall i_1 : Z. let a_2 = shift_sint32(b, i_1) in ((0 <= i_1) ->
      ((i_1 < i) -> (Mint_1[a_2] = m[a_2]))).
}
Prove: included(a_1, n, a_1, n).

------------------------------------------------------------

Goal Loop assigns (file tests/wp_plugin/copy.i, line 12) (3/3):
Effect at line 16
Let a_1 = shift_sint32(a, i).
Let m = Mint_1[a_1 <- Mint_1[shift_sint32(b, i)]].
Let a_2 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(i) /\ is_sint32(n).
  (* Goal *)
  When: valid_rd(Malloc_0, a_1, 1).
  (* Heap *)
  Have: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: separated(a_2, n, shift_sint32(b, 0), n).
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, a_2, n).
  (* Invariant 'Copy' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (Mint_1[shift_sint32(a, i_1)] = Mint_1[shift_sint32(b, i_1)]))).
  (* Invariant 'Range' *)
  Have: (0 <= i) /\ (i <= n).
  (* Then *)
  Have: i < n.
  (* Assertion 'A' *)
  Have: forall i_1 : Z. let a_3 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      ((i_1 < i) -> (Mint_1[a_3] = m[a_3]))).
  (* Assertion 'B' *)
  Have: forall i_1 : Z. let a_3 = shift_sint32(b, i_1) in ((0 <= i_1) ->
      ((i_1 < i) -> (Mint_1[a_3] = m[a_3]))).
}
Prove: included(a_1, 1, a_2, n).

------------------------------------------------------------

Goal Assigns (file tests/wp_plugin/copy.i, line 6) in 'copy' (1/2):
Effect at line 14
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_plugin/copy.i, line 6) in 'copy' (2/2):
Effect at line 14
Let a_1 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(n).
  (* Heap *)
  Have: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: separated(a_1, n, shift_sint32(b, 0), n).
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, a_1, n).
}
Prove: (valid_rd(Malloc_0, a_1, n) -> included(a_1, n, a_1, n)).

------------------------------------------------------------
