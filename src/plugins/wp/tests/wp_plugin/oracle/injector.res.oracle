# frama-c -wp [...]
[kernel] Parsing tests/wp_plugin/injector.c (with preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function f
------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_plugin/injector.c, line 13) in 'g'' in 'f' at call 'g' (file tests/wp_plugin/injector.c, line 54)
:
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_plugin/injector.c, line 13) in 'g'' in 'f' at call 'g' (file tests/wp_plugin/injector.c, line 56)
:
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function f with behavior FST_FAIL
------------------------------------------------------------

Goal Post-condition for 'FST_FAIL' 'qed_ok' in 'f':
Prove: true.

------------------------------------------------------------

Goal Post-condition for 'FST_FAIL' 'qed_ok' in 'f':
Prove: true.

------------------------------------------------------------

Goal Post-condition for 'FST_FAIL' 'qed_ok' in 'f':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function f with behavior SND_FAIL
------------------------------------------------------------

Goal Post-condition for 'SND_FAIL' 'qed_ok' in 'f':
Prove: true.

------------------------------------------------------------

Goal Post-condition for 'SND_FAIL' 'qed_ok' in 'f':
Prove: true.

------------------------------------------------------------

Goal Post-condition for 'SND_FAIL' 'qed_ok' in 'f':
Prove: true.

------------------------------------------------------------

Goal Post-condition for 'SND_FAIL' 'qed_ok' in 'f':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function f with behavior SUCCESS
------------------------------------------------------------

Goal Post-condition for 'SUCCESS' 'qed_ok' in 'f':
Prove: true.

------------------------------------------------------------

Goal Post-condition for 'SUCCESS' 'qed_ok' in 'f':
Prove: true.

------------------------------------------------------------

Goal Post-condition for 'SUCCESS' 'qed_ok' in 'f':
Prove: true.

------------------------------------------------------------

Goal Post-condition for 'SUCCESS' 'qed_ok' in 'f':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function f with behavior ko
------------------------------------------------------------

Goal Post-condition for 'ko' 'qed_ko' in 'f':
Let x = out_0[0].
Let x_1 = inp_0[0].
Assume {
  Type: is_sint32(b) /\ is_sint32(v) /\ is_sint32(x_1) /\ is_sint32(x).
  If x != 33
  Then { Have: inp_1[0 <- v] = inp_0. }
  Else { (* Call Effects *) Have: inp_1[0 <- v][1 <- b] = inp_0. }
}
Prove: x_1 = b.

------------------------------------------------------------
------------------------------------------------------------
  Function f with behavior ko_1
------------------------------------------------------------

Goal Post-condition for 'ko_1' 'qed_ko' in 'f':
Assume {
  (* Pre-condition for 'ko_1' *)
  Have: out_0[0] = 33.
  (* Pre-condition for 'ko_1' *)
  Have: out_0[1] = 33.
}
Prove: false.

------------------------------------------------------------

Goal Post-condition for 'ko_1' 'qed_ko' in 'f':
Assume {
  Type: is_sint32(b) /\ is_sint32(v).
  (* Pre-condition for 'ko_1' *)
  Have: out_0[0] = 33.
  (* Pre-condition for 'ko_1' *)
  Have: out_0[1] = 33.
}
Prove: v = b.

------------------------------------------------------------

Goal Post-condition for 'ko_1' 'qed_ko' in 'f':
Assume {
  (* Pre-condition for 'ko_1' *)
  Have: out_0[0] = 33.
  (* Pre-condition for 'ko_1' *)
  Have: out_0[1] = 33.
}
Prove: false.

------------------------------------------------------------
