# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_plugin/model.i (no preprocessing)
tests/wp_plugin/model.i:11:[kernel] warning: parsing obsolete ACSL construct 'logic declaration'. 'an axiomatic block' should be used instead.
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
[wp] 1 goal scheduled
---------------------------------------------
--- File 'typed/f_post.ergo' 
---------------------------------------------
(* ---------------------------------------------------------- *)
(* --- Post-condition (file tests/wp_plugin/model.i, line 13) in 'f' --- *)
(* ---------------------------------------------------------- *)

goal f_post:
  forall i : int.
  forall t : (addr,int) farray.
  forall a : addr.
  let x = t[shift_sint32(a, i)] : int in
  is_sint32(i) ->
  (region(a.base) <= 0) ->
  is_sint32(x) ->
  P_P(x)

---------------------------------------------
--- File 'typed/Compound.ergo' 
---------------------------------------------
(* ---------------------------------------------------------- *)
(* --- Memory Compound Updates                            --- *)
(* ---------------------------------------------------------- *)

function shift_sint32(p:addr, k:int) : addr = shift(p, k)

---------------------------------------------
--- File 'typed/Axiomatic.ergo' 
---------------------------------------------
(* ---------------------------------------------------------- *)
(* --- Global Definitions                                 --- *)
(* ---------------------------------------------------------- *)

logic P_P : int -> prop

[wp] 1 goal generated
------------------------------------------------------------
  Function f
------------------------------------------------------------

Goal Post-condition (file tests/wp_plugin/model.i, line 13) in 'f':
Let x = Mint_0[shift_sint32(p, k)].
Assume {
  Type: is_sint32(k) /\ is_sint32(x).
  (* Heap *)
  Have: region(p.base) <= 0.
}
Prove: P_P(x).

------------------------------------------------------------
[wp] Running WP plugin...
[wp] Collecting variable usage
[wp] 2 goals scheduled
---------------------------------------------
--- File 'typed_ref/f_post.ergo' 
---------------------------------------------
(* ---------------------------------------------------------- *)
(* --- Post-condition (file tests/wp_plugin/model.i, line 13) in 'f' --- *)
(* ---------------------------------------------------------- *)

goal f_post:
  forall i : int.
  forall t : (addr,int) farray.
  forall a : addr.
  let x = t[shift_sint32(a, i)] : int in
  is_sint32(i) ->
  (region(a.base) <= 0) ->
  is_sint32(x) ->
  P_P(x)

---------------------------------------------
--- File 'typed_ref/Compound.ergo' 
---------------------------------------------
(* ---------------------------------------------------------- *)
(* --- Memory Compound Updates                            --- *)
(* ---------------------------------------------------------- *)

function shift_sint32(p:addr, k:int) : addr = shift(p, k)

---------------------------------------------
--- File 'typed_ref/Axiomatic.ergo' 
---------------------------------------------
(* ---------------------------------------------------------- *)
(* --- Global Definitions                                 --- *)
(* ---------------------------------------------------------- *)

logic P_P : int -> prop

---------------------------------------------
--- File 'typed/f_post.ergo' 
---------------------------------------------
(* ---------------------------------------------------------- *)
(* --- Post-condition (file tests/wp_plugin/model.i, line 13) in 'f' --- *)
(* ---------------------------------------------------------- *)

goal f_post:
  forall i : int.
  forall t : (addr,int) farray.
  forall a : addr.
  let x = t[shift_sint32(a, i)] : int in
  is_sint32(i) ->
  (region(a.base) <= 0) ->
  is_sint32(x) ->
  P_P(x)

[wp] 2 goals generated
------------------------------------------------------------
  Function f
------------------------------------------------------------

Goal Post-condition (file tests/wp_plugin/model.i, line 13) in 'f':
Let x = Mint_0[shift_sint32(p, k)].
Assume {
  Type: is_sint32(k) /\ is_sint32(x).
  (* Heap *)
  Have: region(p.base) <= 0.
}
Prove: P_P(x).

------------------------------------------------------------

Goal Post-condition (file tests/wp_plugin/model.i, line 13) in 'f':
Let x = Mint_0[shift_sint32(p, k)].
Assume {
  Type: is_sint32(k) /\ is_sint32(x).
  (* Heap *)
  Have: region(p.base) <= 0.
}
Prove: P_P(x).

------------------------------------------------------------
