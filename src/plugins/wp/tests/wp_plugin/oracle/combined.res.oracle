# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_plugin/combined.c (with preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function job
------------------------------------------------------------

Goal Assertion (file tests/wp_plugin/combined.c, line 26):
Assume {
  Type: is_sint32(A).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(t.base) <= 0).
}
Prove: (50 <= A) /\ (A <= 100).

------------------------------------------------------------

Goal Preservation of Invariant (file tests/wp_plugin/combined.c, line 28):
Assume {
  Type: is_sint32(A) /\ is_sint32(i) /\ is_sint32(v) /\ is_sint32(1 + i).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(t.base) <= 0).
  (* Assertion *)
  Have: (50 <= A) /\ (A <= 100).
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, shift_sint32(t, 0), 50).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < i) -> ((0 <= i_1) ->
      P_P(Mint_1[shift_sint32(t, i_1)]))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 50).
  (* Then *)
  Have: i <= 49.
  (* Call 'f' *)
  Have: P_P(v).
}
Prove: (-1) <= i.

------------------------------------------------------------

Goal Establishment of Invariant (file tests/wp_plugin/combined.c, line 28):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant (file tests/wp_plugin/combined.c, line 29):
Assume {
  Type: is_sint32(A) /\ is_sint32(i) /\ is_sint32(v) /\ is_sint32(1 + i).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(t.base) <= 0).
  (* Assertion *)
  Have: (50 <= A) /\ (A <= 100).
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, shift_sint32(t, 0), 50).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < i) -> ((0 <= i_2) ->
      P_P(Mint_0[shift_sint32(t, i_2)]))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 50).
  (* Then *)
  Have: i <= 49.
  (* Call 'f' *)
  Have: P_P(v).
}
Prove: P_P(Mint_0[shift_sint32(t, i) <- v][shift_sint32(t, i_1)]).

------------------------------------------------------------

Goal Establishment of Invariant (file tests/wp_plugin/combined.c, line 29):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant (file tests/wp_plugin/combined.c, line 34):
Let x = 1 + j.
Assume {
  Type: is_sint32(A) /\ is_sint32(i) /\ is_sint32(j) /\ is_sint32(x).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(t.base) <= 0).
  (* Assertion *)
  Have: (50 <= A) /\ (A <= 100).
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, shift_sint32(t, 0), 50).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < i) -> ((0 <= i_1) ->
      P_P(Mint_1[shift_sint32(t, i_1)]))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 50).
  (* Else *)
  Have: 50 <= i.
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_2, shift_sint32(t, A), 100 - A).
  (* Invariant *)
  Have: (A <= j) /\ (j <= 100).
  (* Then *)
  Have: j <= 99.
}
Prove: A <= x.

------------------------------------------------------------

Goal Establishment of Invariant (file tests/wp_plugin/combined.c, line 34):
Prove: true.

------------------------------------------------------------

Goal Assertion (file tests/wp_plugin/combined.c, line 39):
Assume {
  Type: is_sint32(A) /\ is_sint32(i_1) /\ is_sint32(j).
  (* Goal *)
  When: (0 <= i) /\ (i <= 49).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(t.base) <= 0).
  (* Assertion *)
  Have: (50 <= A) /\ (A <= 100).
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_2, shift_sint32(t, 0), 50).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < i_1) -> ((0 <= i_2) ->
      P_P(Mint_2[shift_sint32(t, i_2)]))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= 50).
  (* Else *)
  Have: 50 <= i_1.
  (* Loop assigns ... *)
  Have: havoc(Mint_2, Mint_0, shift_sint32(t, A), 100 - A).
  (* Invariant *)
  Have: (A <= j) /\ (j <= 100).
  (* Else *)
  Have: 100 <= j.
}
Prove: P_P(Mint_0[shift_sint32(t, i)]).

------------------------------------------------------------

Goal Loop assigns (file tests/wp_plugin/combined.c, line 30) (1/3):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_plugin/combined.c, line 30) (2/3):
Effect at line 32
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_plugin/combined.c, line 30) (3/3):
Call Result at line 32
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_plugin/combined.c, line 35) (1/3):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_plugin/combined.c, line 35) (2/3):
Effect at line 37
Let a = shift_sint32(t, A).
Let x = 100 - A.
Assume {
  Type: is_sint32(A) /\ is_sint32(i) /\ is_sint32(j).
  (* Goal *)
  When: valid_rd(Malloc_0, a, x).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(t.base) <= 0).
  (* Assertion *)
  Have: (50 <= A) /\ (A <= 100).
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, shift_sint32(t, 0), 50).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < i) -> ((0 <= i_1) ->
      P_P(Mint_1[shift_sint32(t, i_1)]))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 50).
  (* Else *)
  Have: 50 <= i.
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_2, a, x).
  (* Invariant *)
  Have: (A <= j) /\ (j <= 100).
  (* Then *)
  Have: j <= 99.
}
Prove: included(a, x, a, x).

------------------------------------------------------------

Goal Loop assigns (file tests/wp_plugin/combined.c, line 35) (3/3):
Call Result at line 37
Let a = shift_sint32(t, A).
Let x = 100 - A.
Let a_1 = shift_sint32(t, j).
Assume {
  Type: is_sint32(A) /\ is_sint32(i) /\ is_sint32(j).
  (* Goal *)
  When: valid_rd(Malloc_0, a_1, 1).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(t.base) <= 0).
  (* Assertion *)
  Have: (50 <= A) /\ (A <= 100).
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, shift_sint32(t, 0), 50).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < i) -> ((0 <= i_1) ->
      P_P(Mint_1[shift_sint32(t, i_1)]))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 50).
  (* Else *)
  Have: 50 <= i.
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_2, a, x).
  (* Invariant *)
  Have: (A <= j) /\ (j <= 100).
  (* Then *)
  Have: j <= 99.
}
Prove: included(a_1, 1, a, x).

------------------------------------------------------------
