# frama-c -wp -wp-model 'Typed (Caveat)' [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_plugin/sequence.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function loops
------------------------------------------------------------

Goal Post-condition 'ok,first' in 'loops':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_3).
Let a_2 = L_call_obs(call_seq_2).
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Call 'f' *)
  Have: cons(x,nil) = a_2.
  (* Invariant 'ok,inv' *)
  Have: a_1 = concat(a_2, repeat_box(cons(y,nil), i)).
  (* Invariant 'ok,id_max' *)
  Have: if (0 <= n) then (i <= n) else (i <= 0).
  (* Invariant 'ok,id_min' *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Call 'f' *)
  Have: a = concat(a_1, cons(z,nil)).
}
Prove: x = nth(a, 0).

------------------------------------------------------------

Goal Post-condition 'ok,last' in 'loops':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_3).
Let a_2 = L_call_obs(call_seq_2).
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Call 'f' *)
  Have: cons(x,nil) = a_2.
  (* Invariant 'ok,inv' *)
  Have: a_1 = concat(a_2, repeat_box(cons(y,nil), i)).
  (* Invariant 'ok,id_max' *)
  Have: if (0 <= n) then (i <= n) else (i <= 0).
  (* Invariant 'ok,id_min' *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Call 'f' *)
  Have: a = concat(a_1, cons(z,nil)).
}
Prove: z = nth(a, length(a) - 1).

------------------------------------------------------------

Goal Preservation of Invariant 'ok,id_max' (file tests/wp_plugin/sequence.i, line 97):
Let a = L_call_obs(call_seq_2).
Let a_1 = cons(y,nil).
Let a_2 = L_call_obs(call_seq_1).
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(1 + i).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_0).
  (* Call 'f' *)
  Have: cons(x,nil) = a_2.
  (* Invariant 'ok,inv' *)
  Have: a = concat(a_2, repeat_box(a_1, i)).
  (* Invariant 'ok,id_max' *)
  Have: if (0 <= n) then (i <= n) else (i <= 0).
  (* Invariant 'ok,id_min' *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Call 'g' *)
  Have: L_call_obs(call_seq_3) = concat(a, a_1).
}
Prove: 0 <= n.

------------------------------------------------------------

Goal Establishment of Invariant 'ok,id_max' (file tests/wp_plugin/sequence.i, line 97):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'ok,id_min' (file tests/wp_plugin/sequence.i, line 96):
Let a = L_call_obs(call_seq_2).
Let a_1 = cons(y,nil).
Let a_2 = L_call_obs(call_seq_1).
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(1 + i).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_0).
  (* Call 'f' *)
  Have: cons(x,nil) = a_2.
  (* Invariant 'ok,inv' *)
  Have: a = concat(a_2, repeat_box(a_1, i)).
  (* Invariant 'ok,id_max' *)
  Have: if (0 <= n) then (i <= n) else (i <= 0).
  (* Invariant 'ok,id_min' *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Call 'g' *)
  Have: L_call_obs(call_seq_3) = concat(a, a_1).
}
Prove: (-1) <= i.

------------------------------------------------------------

Goal Establishment of Invariant 'ok,id_min' (file tests/wp_plugin/sequence.i, line 96):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'ok,inv' (file tests/wp_plugin/sequence.i, line 98):
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_3).
Let a_2 = cons(y,nil).
Let a_3 = L_call_obs(call_seq_1).
Let x_1 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_1).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_2).
  (* Call 'f' *)
  Have: cons(x,nil) = a_3.
  (* Invariant 'ok,inv' *)
  Have: a_1 = concat(a_3, repeat_box(a_2, i)).
  (* Invariant 'ok,id_max' *)
  Have: if (0 <= n) then (i <= n) else (i <= 0).
  (* Invariant 'ok,id_min' *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Call 'g' *)
  Have: a = concat(a_1, a_2).
}
Prove: a = concat(a_3, repeat_box(a_2, x_1)).

------------------------------------------------------------

Goal Establishment of Invariant 'ok,inv' (file tests/wp_plugin/sequence.i, line 98):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_plugin/sequence.i, line 95):
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_plugin/sequence.i, line 79) in 'loops' (1/3):
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_plugin/sequence.i, line 79) in 'loops' (2/3):
Effect at line 100
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_plugin/sequence.i, line 79) in 'loops' (3/3):
Effect at line 100
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_plugin/sequence.i, line 79) in 'loops' (1/3):
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_plugin/sequence.i, line 79) in 'loops' (2/3):
Effect at line 100
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_plugin/sequence.i, line 79) in 'loops' (3/3):
Effect at line 100
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function loops with behavior g_called
------------------------------------------------------------

Goal Post-condition for 'g_called' 'ok,u1' in 'loops':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_3).
Let a_2 = L_call_obs(call_seq_2).
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Pre-condition for 'g_called' *)
  Have: 0 < n.
  (* Call 'f' *)
  Have: cons(x,nil) = a_2.
  (* Invariant 'ok,inv' *)
  Have: a_1 = concat(a_2, repeat_box(cons(y,nil), i)).
  (* Invariant 'ok,id_max' *)
  Have: i <= n.
  (* Invariant 'ok,id_min' *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Call 'f' *)
  Have: a = concat(a_1, cons(z,nil)).
}
Prove: (2 + n) = length(a).

------------------------------------------------------------

Goal Post-condition for 'g_called' 'ok,u2' in 'loops':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_3).
Let a_2 = cons(z,nil).
Let a_3 = L_call_obs(call_seq_2).
Let a_4 = cons(y,nil).
Let a_5 = cons(x,nil).
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Pre-condition for 'g_called' *)
  Have: 0 < n.
  (* Call 'f' *)
  Have: a_5 = a_3.
  (* Invariant 'ok,inv' *)
  Have: a_1 = concat(a_3, repeat_box(a_4, i)).
  (* Invariant 'ok,id_max' *)
  Have: i <= n.
  (* Invariant 'ok,id_min' *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Call 'f' *)
  Have: a = concat(a_1, a_2).
}
Prove: a = concat(concat(a_5, repeat_box(a_4, n)), a_2).

------------------------------------------------------------
------------------------------------------------------------
  Function loops with behavior g_not_called
------------------------------------------------------------

Goal Post-condition for 'g_not_called' 'ok,v1' in 'loops':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_3).
Let a_2 = L_call_obs(call_seq_2).
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Pre-condition for 'g_not_called' *)
  Have: n <= 0.
  (* Call 'f' *)
  Have: cons(x,nil) = a_2.
  (* Invariant 'ok,inv' *)
  Have: a_1 = concat(a_2, repeat_box(cons(y,nil), i)).
  (* Invariant 'ok,id_max' *)
  Have: if (0 <= n) then (i <= n) else (i <= 0).
  (* Invariant 'ok,id_min' *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Call 'f' *)
  Have: a = concat(a_1, cons(z,nil)).
}
Prove: 2 = length(a).

------------------------------------------------------------

Goal Post-condition for 'g_not_called' 'ok,v2' in 'loops':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_3).
Let a_2 = cons(z,nil).
Let a_3 = L_call_obs(call_seq_2).
Let a_4 = cons(x,nil).
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Pre-condition for 'g_not_called' *)
  Have: n <= 0.
  (* Call 'f' *)
  Have: a_4 = a_3.
  (* Invariant 'ok,inv' *)
  Have: a_1 = concat(a_3, repeat_box(cons(y,nil), i)).
  (* Invariant 'ok,id_max' *)
  Have: if (0 <= n) then (i <= n) else (i <= 0).
  (* Invariant 'ok,id_min' *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Call 'f' *)
  Have: a = concat(a_1, a_2).
}
Prove: a = concat(a_4, a_2).

------------------------------------------------------------
------------------------------------------------------------
  Function no_calls
------------------------------------------------------------

Goal Post-condition 'ok,m1' in 'no_calls':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'ok,m2' in 'no_calls':
Assume { (* Pre-condition 'init' *) Have: nil = L_call_obs(call_seq_0). }
Prove: 0 = length(L_call_nil).

------------------------------------------------------------

Goal Post-condition 'ok,bug_why3,n1' in 'no_calls':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'ok,n2' in 'no_calls':
Assume { (* Pre-condition 'init' *) Have: nil = L_call_obs(call_seq_0). }
Prove: nil = L_call_nil.

------------------------------------------------------------

Goal Post-condition 'ok,n3' in 'no_calls':
Assume { (* Pre-condition 'init' *) Have: nil = L_call_obs(call_seq_0). }
Prove: nil = L_call_nil.

------------------------------------------------------------

Goal Post-condition 'ok,bug_why3,n5' in 'no_calls':
Assume {
  Type: is_sint32(a).
  (* Goal *)
  When: 0 <= a.
  (* Pre-condition 'init' *)
  Have: nil = L_call_obs(call_seq_0).
}
Prove: nil = repeat_box(L_call_nil, a).

------------------------------------------------------------

Goal Post-condition 'ok,bug_why3,n6' in 'no_calls':
Assume {
  Type: is_sint32(a).
  (* Goal *)
  When: 0 <= a.
  (* Pre-condition 'init' *)
  Have: nil = L_call_obs(call_seq_0).
}
Prove: nil = repeat_box(nil, a).

------------------------------------------------------------

Goal Post-condition 'ko,bug_why3,n5_ko' in 'no_calls':
Assume {
  Type: is_sint32(a).
  (* Pre-condition 'init' *)
  Have: nil = L_call_obs(call_seq_0).
}
Prove: nil = repeat_box(L_call_nil, a).

------------------------------------------------------------

Goal Post-condition 'ko,bug_why3,n6_ko' in 'no_calls':
Assume {
  Type: is_sint32(a).
  (* Pre-condition 'init' *)
  Have: nil = L_call_obs(call_seq_0).
}
Prove: nil = repeat_box(nil, a).

------------------------------------------------------------

Goal Assigns (file tests/wp_plugin/sequence.i, line 35) in 'no_calls':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function sequence
------------------------------------------------------------

Goal Assigns (file tests/wp_plugin/sequence.i, line 54) in 'sequence':
Prove: true.

------------------------------------------------------------

Goal Assigns (file tests/wp_plugin/sequence.i, line 54) in 'sequence':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function sequence with behavior g_called
------------------------------------------------------------

Goal Post-condition for 'g_called' 'ok,o1' in 'sequence':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_3).
Let a_2 = L_call_obs(call_seq_2).
Assume {
  Type: is_sint32(c) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Pre-condition for 'g_called' *)
  Have: 0 != c.
  (* Call 'f' *)
  Have: cons(x,nil) = a_2.
  (* Call 'g' *)
  Have: a_1 = concat(a_2, cons(y,nil)).
  (* Call 'f' *)
  Have: a = concat(a_1, cons(z,nil)).
}
Prove: 3 = length(a).

------------------------------------------------------------

Goal Post-condition for 'g_called' 'ok,p1' in 'sequence':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_3).
Let a_2 = cons(z,nil).
Let a_3 = L_call_obs(call_seq_2).
Let a_4 = cons(y,nil).
Let a_5 = cons(x,nil).
Assume {
  Type: is_sint32(c) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Pre-condition for 'g_called' *)
  Have: 0 != c.
  (* Call 'f' *)
  Have: a_5 = a_3.
  (* Call 'g' *)
  Have: a_1 = concat(a_3, a_4).
  (* Call 'f' *)
  Have: a = concat(a_1, a_2).
}
Prove: a = concat(concat(a_5, a_4), a_2).

------------------------------------------------------------

Goal Post-condition for 'g_called' 'ok,p2' in 'sequence':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_3).
Let a_2 = cons(z,nil).
Let a_3 = L_call_obs(call_seq_2).
Let a_4 = cons(y,nil).
Let a_5 = cons(x,nil).
Assume {
  Type: is_sint32(c) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Pre-condition for 'g_called' *)
  Have: 0 != c.
  (* Call 'f' *)
  Have: a_5 = a_3.
  (* Call 'g' *)
  Have: a_1 = concat(a_3, a_4).
  (* Call 'f' *)
  Have: a = concat(a_1, a_2).
}
Prove: a = concat(concat(a_5, a_4), a_2).

------------------------------------------------------------

Goal Post-condition for 'g_called' 'ok,p3' in 'sequence':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_3).
Let a_2 = cons(z,nil).
Let a_3 = L_call_obs(call_seq_2).
Let a_4 = cons(y,nil).
Let a_5 = cons(x,nil).
Assume {
  Type: is_sint32(c) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Pre-condition for 'g_called' *)
  Have: 0 != c.
  (* Call 'f' *)
  Have: a_5 = a_3.
  (* Call 'g' *)
  Have: a_1 = concat(a_3, a_4).
  (* Call 'f' *)
  Have: a = concat(a_1, a_2).
}
Prove: a = concat(concat(concat(a_5, a_4), a_2), L_call_nil).

------------------------------------------------------------
------------------------------------------------------------
  Function sequence with behavior g_not_called
------------------------------------------------------------

Goal Post-condition for 'g_not_called' 'ok,o2' in 'sequence':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_2).
Assume {
  Type: is_sint32(x) /\ is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Call 'f' *)
  Have: cons(x,nil) = a_1.
  (* Call 'f' *)
  Have: a = concat(a_1, cons(z,nil)).
}
Prove: 2 = length(a).

------------------------------------------------------------

Goal Post-condition for 'g_not_called' 'ok,q1' in 'sequence':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_2).
Let a_2 = cons(z,nil).
Let a_3 = cons(x,nil).
Assume {
  Type: is_sint32(x) /\ is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Call 'f' *)
  Have: a_3 = a_1.
  (* Call 'f' *)
  Have: a = concat(a_1, a_2).
}
Prove: a = concat(a_3, a_2).

------------------------------------------------------------

Goal Post-condition for 'g_not_called' 'ok,q2' in 'sequence':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_2).
Let a_2 = cons(z,nil).
Let a_3 = cons(x,nil).
Assume {
  Type: is_sint32(x) /\ is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Call 'f' *)
  Have: a_3 = a_1.
  (* Call 'f' *)
  Have: a = concat(a_1, a_2).
}
Prove: a = concat(a_3, a_2).

------------------------------------------------------------

Goal Post-condition for 'g_not_called' 'ok,q3' in 'sequence':
Let a = L_call_obs(call_seq_0).
Let a_1 = L_call_obs(call_seq_2).
Let a_2 = cons(z,nil).
Let a_3 = cons(x,nil).
Assume {
  Type: is_sint32(x) /\ is_sint32(z).
  (* Pre-condition *)
  Have: nil = L_call_obs(call_seq_1).
  (* Call 'f' *)
  Have: a_3 = a_1.
  (* Call 'f' *)
  Have: a = concat(a_1, a_2).
}
Prove: a = concat(concat(a_3, L_call_nil), a_2).

------------------------------------------------------------
