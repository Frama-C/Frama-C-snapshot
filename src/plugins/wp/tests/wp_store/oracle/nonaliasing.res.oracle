# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_store/nonaliasing.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function f
------------------------------------------------------------

Goal Post-condition 'qed_ok,P' in 'f':
Let x = Mint_0[p].
Let x_1 = Mint_0[q].
Let x_2 = 1 + x.
Let m = Mint_0[p <- x_2].
Let x_3 = m[q].
Let x_4 = 1 + x_3.
Let x_5 = m[q <- x_4][p].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(x_5).
  (* Goal *)
  When: p != q.
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(p.base) <= 0) /\ (region(q.base) <= 0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, p, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, q, 1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (0 <= x_1) /\ (x <= 199) /\ (x_1 <= 199).
}
Prove: x_2 = x_5.

------------------------------------------------------------

Goal Post-condition 'qed_ok,Q' in 'f':
Let x = Mint_0[p].
Let x_1 = Mint_0[q].
Let m = Mint_0[p <- 1 + x].
Let x_2 = m[q].
Let x_3 = 1 + x_2.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(m[q <- x_3][p]).
  (* Goal *)
  When: p != q.
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(p.base) <= 0) /\ (region(q.base) <= 0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, p, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, q, 1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (0 <= x_1) /\ (x <= 199) /\ (x_1 <= 199).
}
Prove: x_1 = x_2.

------------------------------------------------------------

Goal Post-condition 'qed_ko,P_oracle_ko' in 'f':
Let x = Mint_0[p].
Let x_1 = Mint_0[q].
Let x_2 = 1 + x.
Let m = Mint_0[p <- x_2].
Let x_3 = m[q].
Let x_4 = 1 + x_3.
Let x_5 = m[q <- x_4][p].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(x_5).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(p.base) <= 0) /\ (region(q.base) <= 0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, p, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, q, 1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (0 <= x_1) /\ (x <= 199) /\ (x_1 <= 199).
}
Prove: x_2 = x_5.

------------------------------------------------------------

Goal Post-condition 'qed_ko,Q_oracle_ko' in 'f':
Let x = Mint_0[p].
Let x_1 = Mint_0[q].
Let m = Mint_0[p <- 1 + x].
Let x_2 = m[q].
Let x_3 = 1 + x_2.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(m[q <- x_3][p]).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(p.base) <= 0) /\ (region(q.base) <= 0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, p, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, q, 1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (0 <= x_1) /\ (x <= 199) /\ (x_1 <= 199).
}
Prove: x_1 = x_2.

------------------------------------------------------------
