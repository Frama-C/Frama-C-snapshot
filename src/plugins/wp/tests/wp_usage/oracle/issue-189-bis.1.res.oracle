# frama-c -wp [...]
[kernel] Parsing tests/wp_usage/issue-189-bis.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Warning: Missing RTE guards

Goal Post-condition 'memcpy,ok' in 'memcpy_context_vars':
Let a = global(G_src_43).
Let a_1 = global(G_dst_44).
Assume {
  Type: is_sint32(len_0) /\ is_sint32(len_1).
  (* Goal *)
  When: (0 <= i) /\ ((2 + i) <= len_0).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Pre-condition 'write_access' *)
  Have: ((0 < len_0) -> (len_0 <= 1)).
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, shift_uint8(a_1, 0), len_0).
  (* Invariant 'ok,cpy' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((len_1 + i_1) < len_0) ->
      (Mint_0[shift_uint8(a, i_1)] = Mint_0[shift_uint8(a_1, i_1)]))).
  (* Invariant 'ok,dst' *)
  Have: shift_uint8(a_1, len_0) = shift_uint8(dst2_0, len_1).
  (* Invariant 'ok,src' *)
  Have: shift_uint8(a, len_0) = shift_uint8(src2_0, len_1).
  (* Invariant 'ok,len' *)
  Have: len_1 <= len_0.
  (* Else *)
  Have: len_1 <= 0.
}
Prove: Mint_0[shift_uint8(a_1, i)] = Mint_1[shift_uint8(a, i)].

------------------------------------------------------------

Goal Post-condition 'unmodified,ok' in 'memcpy_context_vars':
Let a = global(G_src_43).
Let a_1 = global(G_dst_44).
Let a_2 = shift_uint8(a, i).
Assume {
  Type: is_sint32(len_0) /\ is_sint32(len_1).
  (* Goal *)
  When: (0 <= i) /\ ((2 + i) <= len_0).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Pre-condition 'write_access' *)
  Have: ((0 < len_0) -> (len_0 <= 1)).
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, shift_uint8(a_1, 0), len_0).
  (* Invariant 'ok,cpy' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((len_1 + i_1) < len_0) ->
      (Mint_0[shift_uint8(a, i_1)] = Mint_0[shift_uint8(a_1, i_1)]))).
  (* Invariant 'ok,dst' *)
  Have: shift_uint8(a_1, len_0) = shift_uint8(dst2_0, len_1).
  (* Invariant 'ok,src' *)
  Have: shift_uint8(a, len_0) = shift_uint8(src2_0, len_1).
  (* Invariant 'ok,len' *)
  Have: len_1 <= len_0.
  (* Else *)
  Have: len_1 <= 0.
}
Prove: Mint_0[a_2] = Mint_1[a_2].

------------------------------------------------------------

Goal Preservation of Invariant 'ok,cpy' (file tests/wp_usage/issue-189-bis.i, line 55):
Let a = global(G_src_43).
Let a_1 = global(G_dst_44).
Let m = Mint_0[dst2_0 <- Mint_0[src2_0]].
Assume {
  Type: is_sint32(len_0) /\ is_sint32(len_1) /\ is_sint32(len_1 - 1).
  (* Goal *)
  When: (0 <= i) /\ ((i + len_1) <= len_0).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Pre-condition 'write_access' *)
  Have: ((0 < len_0) -> (len_0 <= 1)).
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, shift_uint8(a_1, 0), len_0).
  (* Invariant 'ok,cpy' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((len_1 + i_1) < len_0) ->
      (Mint_0[shift_uint8(a, i_1)] = Mint_0[shift_uint8(a_1, i_1)]))).
  (* Invariant 'ok,dst' *)
  Have: shift_uint8(a_1, len_0) = shift_uint8(dst2_0, len_1).
  (* Invariant 'ok,src' *)
  Have: shift_uint8(a, len_0) = shift_uint8(src2_0, len_1).
  (* Invariant 'ok,len' *)
  Have: len_1 <= len_0.
  (* Then *)
  Have: 0 < len_1.
}
Prove: m[shift_uint8(a, i)] = m[shift_uint8(a_1, i)].

------------------------------------------------------------

Goal Establishment of Invariant 'ok,cpy' (file tests/wp_usage/issue-189-bis.i, line 55):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'ok,dst' (file tests/wp_usage/issue-189-bis.i, line 53):
Prove: true.

------------------------------------------------------------

Goal Establishment of Invariant 'ok,dst' (file tests/wp_usage/issue-189-bis.i, line 53):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'ok,len' (file tests/wp_usage/issue-189-bis.i, line 51):
Let a = global(G_src_43).
Let a_1 = global(G_dst_44).
Assume {
  Type: is_sint32(len_1) /\ is_sint32(len_0) /\ is_sint32(len_0 - 1).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Pre-condition 'write_access' *)
  Have: ((0 < len_1) -> (len_1 <= 1)).
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, shift_uint8(a_1, 0), len_1).
  (* Invariant 'ok,cpy' *)
  Have: forall i : Z. ((0 <= i) -> (((len_0 + i) < len_1) ->
      (Mint_1[shift_uint8(a, i)] = Mint_1[shift_uint8(a_1, i)]))).
  (* Invariant 'ok,dst' *)
  Have: shift_uint8(a_1, len_1) = shift_uint8(dst2_0, len_0).
  (* Invariant 'ok,src' *)
  Have: shift_uint8(a, len_1) = shift_uint8(src2_0, len_0).
  (* Invariant 'ok,len' *)
  Have: len_0 <= len_1.
  (* Then *)
  Have: 0 < len_0.
}
Prove: len_0 <= (1 + len_1).

------------------------------------------------------------

Goal Establishment of Invariant 'ok,len' (file tests/wp_usage/issue-189-bis.i, line 51):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'ok,src' (file tests/wp_usage/issue-189-bis.i, line 52):
Prove: true.

------------------------------------------------------------

Goal Establishment of Invariant 'ok,src' (file tests/wp_usage/issue-189-bis.i, line 52):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_usage/issue-189-bis.i, line 54) (1/4):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_usage/issue-189-bis.i, line 54) (2/4):
Effect at line 60
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_usage/issue-189-bis.i, line 54) (3/4):
Effect at line 60
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_usage/issue-189-bis.i, line 54) (4/4):
Effect at line 60
Let a = global(G_src_43).
Let a_1 = global(G_dst_44).
Let a_2 = shift_uint8(a_1, 0).
Assume {
  Type: is_sint32(len_0) /\ is_sint32(len_1).
  (* Goal *)
  When: !invalid(Malloc_0, tmp_0, 1).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Pre-condition 'write_access' *)
  Have: ((0 < len_0) -> (len_0 <= 1)).
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, a_2, len_0).
  (* Invariant 'ok,cpy' *)
  Have: forall i : Z. ((0 <= i) -> (((len_1 + i) < len_0) ->
      (Mint_1[shift_uint8(a, i)] = Mint_1[shift_uint8(a_1, i)]))).
  (* Invariant 'ok,dst' *)
  Have: shift_uint8(a_1, len_0) = shift_uint8(tmp_0, len_1).
  (* Invariant 'ok,src' *)
  Have: shift_uint8(a, len_0) = shift_uint8(src2_0, len_1).
  (* Invariant 'ok,len' *)
  Have: len_1 <= len_0.
  (* Then *)
  Have: 0 < len_1.
}
Prove: included(tmp_0, 1, a_2, len_0).

------------------------------------------------------------

Goal Assigns (file tests/wp_usage/issue-189-bis.i, line 44) in 'memcpy_context_vars':
Effect at line 59
Prove: true.

------------------------------------------------------------
[wp] Warning: Separation hypotheses for function 'memcpy_context_vars':
  /*@ behavior typed: requires \separated(src,dst); */
  void memcpy_context_vars(unsigned char *src, unsigned char *dst, int len);
