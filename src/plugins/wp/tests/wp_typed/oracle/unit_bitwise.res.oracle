# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_typed/unit_bitwise.c (with preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Global
------------------------------------------------------------

Lemma band_sint8:
Assume: 'bor_sint8' 'bxor_sint8' 'bnot_sint8'
Prove: let x_1 = (land x_0 y_0) in
       (is_sint8 x_0) -> (is_sint8 y_0) -> (x_1=(to_sint8 x_1))

------------------------------------------------------------

Lemma band_uint8:
Assume: 'bor_uint8' 'blsr_sint8' 'band_sint8' 'bor_sint8' 'bxor_sint8'
  'bnot_sint8'
Prove: let x_1 = (land x_0 y_0) in
       (is_uint8 x_0) -> (is_uint8 y_0) -> (x_1=(to_uint8 x_1))

------------------------------------------------------------

Lemma blsr_sint8:
Assume: 'band_sint8' 'bor_sint8' 'bxor_sint8' 'bnot_sint8'
Prove: let x_1 = (lsr x_0 y_0) in
       (0<=y_0) -> (is_sint8 x_0) -> (is_sint8 y_0) -> (x_1=(to_sint8 x_1))

------------------------------------------------------------

Lemma blsr_uint8:
Assume: 'band_uint8' 'bor_uint8' 'blsr_sint8' 'band_sint8' 'bor_sint8'
  'bxor_sint8' 'bnot_sint8'
Prove: let x_1 = (lsr x_0 y_0) in
       (0<=y_0) -> (is_uint8 x_0) -> (is_uint8 y_0) -> (x_1=(to_uint8 x_1))

------------------------------------------------------------

Lemma bnot_sint8:
Prove: let x_1 = (lnot x_0) in (is_sint8 x_0) -> (x_1=(to_sint8 x_1))

------------------------------------------------------------

Lemma bor_sint8:
Assume: 'bxor_sint8' 'bnot_sint8'
Prove: let x_1 = (lor x_0 y_0) in
       (is_sint8 x_0) -> (is_sint8 y_0) -> (x_1=(to_sint8 x_1))

------------------------------------------------------------

Lemma bor_uint8:
Assume: 'blsr_sint8' 'band_sint8' 'bor_sint8' 'bxor_sint8' 'bnot_sint8'
Prove: (is_uint8 x_0) -> (is_uint8 y_0)
       -> ((lor x_0 y_0)=(lor (to_uint8 x_0) (to_uint8 y_0)))

------------------------------------------------------------

Lemma bxor_sint8:
Assume: 'bnot_sint8'
Prove: let x_1 = (lxor x_0 y_0) in
       (is_sint8 x_0) -> (is_sint8 y_0) -> (x_1=(to_sint8 x_1))

------------------------------------------------------------

Lemma land_abs:
Assume: 'land_com' 'land_assoc' 'blsr_uint8' 'band_uint8' 'bor_uint8'
  'blsr_sint8' 'band_sint8' 'bor_sint8' 'bxor_sint8' 'bnot_sint8'
Prove: true

------------------------------------------------------------

Lemma land_assoc:
Assume: 'blsr_uint8' 'band_uint8' 'bor_uint8' 'blsr_sint8' 'band_sint8'
  'bor_sint8' 'bxor_sint8' 'bnot_sint8'
Prove: true

------------------------------------------------------------

Lemma land_com:
Assume: 'land_assoc' 'blsr_uint8' 'band_uint8' 'bor_uint8' 'blsr_sint8'
  'band_sint8' 'bor_sint8' 'bxor_sint8' 'bnot_sint8'
Prove: true

------------------------------------------------------------

Lemma land_stb:
Assume: 'land_abs' 'land_com' 'land_assoc' 'blsr_uint8' 'band_uint8'
  'bor_uint8' 'blsr_sint8' 'band_sint8' 'bor_sint8' 'bxor_sint8' 'bnot_sint8'
Prove: true

------------------------------------------------------------

Lemma lor_assoc:
Assume: 'land_stb' 'land_abs' 'land_com' 'land_assoc' 'blsr_uint8'
  'band_uint8' 'bor_uint8' 'blsr_sint8' 'band_sint8' 'bor_sint8' 'bxor_sint8'
  'bnot_sint8'
Prove: true

------------------------------------------------------------

Lemma lor_com:
Assume: 'lor_assoc' 'land_stb' 'land_abs' 'land_com' 'land_assoc'
  'blsr_uint8' 'band_uint8' 'bor_uint8' 'blsr_sint8' 'band_sint8' 'bor_sint8'
  'bxor_sint8' 'bnot_sint8'
Prove: true

------------------------------------------------------------

Lemma lor_neu:
Assume: 'lor_com' 'lor_assoc' 'land_stb' 'land_abs' 'land_com' 'land_assoc'
  'blsr_uint8' 'band_uint8' 'bor_uint8' 'blsr_sint8' 'band_sint8' 'bor_sint8'
  'bxor_sint8' 'bnot_sint8'
Prove: true

------------------------------------------------------------

Lemma lor_stb:
Assume: 'lor_neu' 'lor_com' 'lor_assoc' 'land_stb' 'land_abs' 'land_com'
  'land_assoc' 'blsr_uint8' 'band_uint8' 'bor_uint8' 'blsr_sint8'
  'band_sint8' 'bor_sint8' 'bxor_sint8' 'bnot_sint8'
Prove: true

------------------------------------------------------------

Lemma lxor_assoc:
Assume: 'lor_stb' 'lor_neu' 'lor_com' 'lor_assoc' 'land_stb' 'land_abs'
  'land_com' 'land_assoc' 'blsr_uint8' 'band_uint8' 'bor_uint8' 'blsr_sint8'
  'band_sint8' 'bor_sint8' 'bxor_sint8' 'bnot_sint8'
Prove: true

------------------------------------------------------------

Lemma lxor_com:
Assume: 'lxor_assoc' 'lor_stb' 'lor_neu' 'lor_com' 'lor_assoc' 'land_stb'
  'land_abs' 'land_com' 'land_assoc' 'blsr_uint8' 'band_uint8' 'bor_uint8'
  'blsr_sint8' 'band_sint8' 'bor_sint8' 'bxor_sint8' 'bnot_sint8'
Prove: true

------------------------------------------------------------
------------------------------------------------------------
  Function band1_uchar
------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 116):
Prove: true.

------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 117):
Let x = land(1, a). Assume { Type: is_uint8(a) /\ is_uint8(x). }
Prove: 0 <= x.

------------------------------------------------------------
------------------------------------------------------------
  Function band1_uint
------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 51):
Prove: true.

------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 52):
Let x = land(1, a). Assume { Type: is_uint32(a) /\ is_uint32(x). }
Prove: 0 <= x.

------------------------------------------------------------
------------------------------------------------------------
  Function band1_ulong
------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 169):
Prove: true.

------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 170):
Let x = land(1, a). Assume { Type: is_uint32(a) /\ is_uint32(x). }
Prove: 0 <= x.

------------------------------------------------------------
------------------------------------------------------------
  Function band1_ushort
------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 164):
Prove: true.

------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 165):
Let x = land(1, a). Assume { Type: is_uint16(a) /\ is_uint16(x). }
Prove: 0 <= x.

------------------------------------------------------------
------------------------------------------------------------
  Function band_char
------------------------------------------------------------

Goal Post-condition 'ok' in 'band_char':
Let x = land(a, b). Assume { Type: is_sint8(a) /\ is_sint8(b). }
Prove: x = to_sint8(x).

------------------------------------------------------------
------------------------------------------------------------
  Function band_int
------------------------------------------------------------

Goal Post-condition 'ok' in 'band_int':
Prove: true.

------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 19):
Prove: true.

------------------------------------------------------------

Goal Assertion 'ko' (file tests/wp_typed/unit_bitwise.c, line 20):
Assume { Type: is_sint32(a). }
Prove: land(281, a) <= 172.

------------------------------------------------------------
------------------------------------------------------------
  Function band_uchar
------------------------------------------------------------

Goal Post-condition 'ok' in 'band_uchar':
Let x = land(a, b). Assume { Type: is_uint8(a) /\ is_uint8(b). }
Prove: x = to_uint8(x).

------------------------------------------------------------
------------------------------------------------------------
  Function band_uint
------------------------------------------------------------

Goal Post-condition 'ok' in 'band_uint':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function bnot_char
------------------------------------------------------------

Goal Post-condition 'ok' in 'bnot_char':
Let x = lnot(a). Assume { Type: is_sint8(a). }
Prove: x = to_sint8(x).

------------------------------------------------------------
------------------------------------------------------------
  Function bnot_int
------------------------------------------------------------

Goal Post-condition 'ok' in 'bnot_int':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function bnot_uchar
------------------------------------------------------------

Goal Post-condition 'ok' in 'bnot_uchar':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'ko' in 'bnot_uchar':
Let x = lnot(a). Assume { Type: is_uint8(a). }
Prove: x = to_uint8(x).

------------------------------------------------------------
------------------------------------------------------------
  Function bnot_uint
------------------------------------------------------------

Goal Post-condition 'ok' in 'bnot_uint':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'ko' in 'bnot_uint':
Let x = lnot(a). Assume { Type: is_uint32(a). }
Prove: x = to_uint32(x).

------------------------------------------------------------
------------------------------------------------------------
  Function bor_char
------------------------------------------------------------

Goal Post-condition 'ok' in 'bor_char':
Let x = lor(a, b). Assume { Type: is_sint8(a) /\ is_sint8(b). }
Prove: x = to_sint8(x).

------------------------------------------------------------
------------------------------------------------------------
  Function bor_int
------------------------------------------------------------

Goal Post-condition 'ok' in 'bor_int':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function bor_uchar
------------------------------------------------------------

Goal Post-condition 'ok' in 'bor_uchar':
Assume { Type: is_uint8(a) /\ is_uint8(b). }
Prove: lor(a, b) = lor(to_uint8(a), to_uint8(b)).

------------------------------------------------------------
------------------------------------------------------------
  Function bor_uint
------------------------------------------------------------

Goal Post-condition 'ok' in 'bor_uint':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function bxor_char
------------------------------------------------------------

Goal Post-condition 'ok' in 'bxor_char':
Let x = lxor(a, b). Assume { Type: is_sint8(a) /\ is_sint8(b). }
Prove: x = to_sint8(x).

------------------------------------------------------------
------------------------------------------------------------
  Function bxor_int
------------------------------------------------------------

Goal Post-condition 'ok' in 'bxor_int':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function bxor_uchar
------------------------------------------------------------

Goal Post-condition 'ok' in 'bxor_uchar':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'ok' in 'bxor_uchar':
Let x = lxor(a, b). Assume { Type: is_uint8(a) /\ is_uint8(b). }
Prove: x = to_uint8(x).

------------------------------------------------------------
------------------------------------------------------------
  Function bxor_uint
------------------------------------------------------------

Goal Post-condition 'ok' in 'bxor_uint':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'ok' in 'bxor_uint':
Let x = lxor(a, b). Assume { Type: is_uint32(a) /\ is_uint32(b). }
Prove: x = to_uint32(x).

------------------------------------------------------------
------------------------------------------------------------
  Function cast
------------------------------------------------------------

Goal Post-condition 'ok' in 'cast':
Let x = to_sint8(c).
Assume {
  Type: is_uint8(c) /\ is_uint32(i).
  (* Assertion 'ok' *)
  Have: i = to_uint32(i).
  (* Assertion 'ko' *)
  Have: x = to_uint32(x).
}
Prove: c = to_uint8(c).

------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 176):
Assume { Type: is_uint32(i). }
Prove: i = to_uint32(i).

------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 177):
Prove: true.

------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 178):
Prove: true.

------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 180):
Prove: true.

------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 181):
Prove: true.

------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 182):
Prove: true.

------------------------------------------------------------

Goal Assertion 'ok' (file tests/wp_typed/unit_bitwise.c, line 184):
Prove: true.

------------------------------------------------------------

Goal Assertion 'ko' (file tests/wp_typed/unit_bitwise.c, line 186):
Let x = to_sint8(c).
Assume {
  Type: is_uint8(c) /\ is_uint32(i).
  (* Assertion 'ok' *)
  Have: i = to_uint32(i).
}
Prove: x = to_uint32(x).

------------------------------------------------------------
------------------------------------------------------------
  Function lshift_char
------------------------------------------------------------

Goal Post-condition 'ok' in 'lshift_char':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function lshift_int
------------------------------------------------------------

Goal Post-condition 'ok' in 'lshift_int':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function lshift_uchar
------------------------------------------------------------

Goal Post-condition 'ok' in 'lshift_uchar':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function lshift_uint
------------------------------------------------------------

Goal Post-condition 'ok' in 'lshift_uint':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function rshift_char
------------------------------------------------------------

Goal Post-condition 'ok' in 'rshift_char':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function rshift_int
------------------------------------------------------------

Goal Post-condition 'ok' in 'rshift_int':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function rshift_uchar
------------------------------------------------------------

Goal Post-condition 'ok' in 'rshift_uchar':
Let x = lsr(a, n). Assume { Type: is_uint8(a) /\ is_uint8(n). }
Prove: x = to_uint8(x).

------------------------------------------------------------
------------------------------------------------------------
  Function rshift_uint
------------------------------------------------------------

Goal Post-condition 'ok' in 'rshift_uint':
Prove: true.

------------------------------------------------------------
