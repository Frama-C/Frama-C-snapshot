# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_typed/struct_array_type.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] warning: Missing RTE guards
[wp] 1 goal scheduled
[wp:print-generated] (* ---------------------------------------------------------- *)
                     (* --- Post-condition (file tests/wp_typed/struct_array_type.i, line 16) in 'f' --- *)
                     (* ---------------------------------------------------------- *)
                     
                     goal f_post:
                       forall i_3,i_2,i_1,i : int.
                       forall t : S1_s farray.
                       let a = t[i_1] : S1_s in
                       let a_1 = t[i_2] : S1_s in
                       let a_2 = t[i_3] : S1_s in
                       let a_3 = (a_2.F1_s_a)[0] : int in
                       let a_4 = (a_2.F1_s_b)[0] : int in
                       (0 <= i_3) ->
                       (i_3 <= 9) ->
                       is_uint32(i_3) ->
                       is_sint32(i) ->
                       is_sint32((a.F1_s_a)[0]) ->
                       is_sint32((a.F1_s_b)[0]) ->
                       is_sint32((a_1.F1_s_a)[0]) ->
                       is_sint32((a_1.F1_s_b)[0]) ->
                       is_sint32(a_3) ->
                       is_sint32(a_4) ->
                       (((a_3 <= a_4) -> ((i + a_3) = (1 + (2 * a_4)))) and
                        ((a_4 < a_3) -> ((i + a_4) = (1 + (2 * a_3))))) ->
                       (a_4 < i)
[wp] 1 goal generated
------------------------------------------------------------
  Function f
------------------------------------------------------------

Goal Post-condition (file tests/wp_typed/struct_array_type.i, line 16) in 'f':
Let a = t[SynchroId_0].
Let a_1 = (a.F1_s_b)[0].
Let a_2 = (a.F1_s_a)[0].
Let a_3 = t[SynchroId_1].
Let a_4 = t[SynchroId_2].
Assume {
  Type: is_uint32(SynchroId_0) /\ is_sint32(f) /\ is_sint32(a_2) /\
      is_sint32(a_1) /\ is_sint32((a_3.F1_s_a)[0]) /\
      is_sint32((a_3.F1_s_b)[0]) /\ is_sint32((a_4.F1_s_a)[0]) /\
      is_sint32((a_4.F1_s_b)[0]).
  (* Pre-condition *)
  Have: (0 <= SynchroId_0) /\ (SynchroId_0 <= 9).
  If a_1 < a_2
  Then { Have: (f + a_1) = (1 + (2 * a_2)). }
  Else { Have: (f + a_2) = (1 + (2 * a_1)). }
}
Prove: a_1 < f.

------------------------------------------------------------
