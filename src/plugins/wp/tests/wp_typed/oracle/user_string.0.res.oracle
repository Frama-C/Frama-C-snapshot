# frama-c -wp [...]
[kernel] Parsing tests/wp_typed/user_string.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function strlen
------------------------------------------------------------

Goal Post-condition (file tests/wp_typed/user_string.i, line 23) in 'strlen':
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'BASE' (file tests/wp_typed/user_string.i, line 28):
Prove: true.

------------------------------------------------------------

Goal Establishment of Invariant 'BASE' (file tests/wp_typed/user_string.i, line 28):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant 'RANGE' (file tests/wp_typed/user_string.i, line 29):
Let x = Mchar_0[ss_0].
Let x_1 = s.base.
Let a = shift_sint8(s, L_Length(Mchar_0, s)).
Let a_1 = shift_sint8(ss_0, 1).
Assume {
  Type: is_sint8(x).
  (* Heap *)
  Have: (region(x_1) <= 0) /\ linked(Malloc_0) /\ sconst(Mchar_0).
  (* Pre-condition *)
  Have: P_Length_of_str_is(Malloc_0, Mchar_0, s, i).
  (* Invariant 'ZERO' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((i_1 + s.offset) < ss_0.offset) ->
      (Mchar_0[shift_sint8(s, i_1)] != 0))).
  (* Invariant 'RANGE' *)
  Have: addr_le(s, ss_0) /\ addr_le(ss_0, a).
  (* Invariant 'BASE' *)
  Have: ss_0.base = x_1.
  (* Then *)
  Have: x != 0.
}
Prove: addr_le(s, a_1) /\ addr_le(a_1, a).

------------------------------------------------------------

Goal Establishment of Invariant 'RANGE' (file tests/wp_typed/user_string.i, line 29):
Assume {
  (* Heap *)
  Have: (region(s.base) <= 0) /\ linked(Malloc_0) /\ sconst(Mchar_0).
  (* Pre-condition *)
  Have: P_Length_of_str_is(Malloc_0, Mchar_0, s, i).
}
Prove: addr_le(s, s) /\ addr_le(s, shift_sint8(s, L_Length(Mchar_0, s))).

------------------------------------------------------------

Goal Preservation of Invariant 'ZERO' (file tests/wp_typed/user_string.i, line 30):
Let x = Mchar_0[ss_0].
Let x_1 = s.base.
Let x_2 = s.offset.
Let x_3 = ss_0.offset.
Assume {
  Type: is_sint8(x).
  (* Goal *)
  When: (0 <= i) /\ ((i + x_2) <= x_3).
  (* Heap *)
  Have: (region(x_1) <= 0) /\ linked(Malloc_0) /\ sconst(Mchar_0).
  (* Pre-condition *)
  Have: P_Length_of_str_is(Malloc_0, Mchar_0, s, i_1).
  (* Invariant 'ZERO' *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((i_2 + x_2) < x_3) ->
      (Mchar_0[shift_sint8(s, i_2)] != 0))).
  (* Invariant 'RANGE' *)
  Have: addr_le(s, ss_0) /\
      addr_le(ss_0, shift_sint8(s, L_Length(Mchar_0, s))).
  (* Invariant 'BASE' *)
  Have: ss_0.base = x_1.
  (* Then *)
  Have: x != 0.
}
Prove: Mchar_0[shift_sint8(s, i)] != 0.

------------------------------------------------------------

Goal Establishment of Invariant 'ZERO' (file tests/wp_typed/user_string.i, line 30):
Prove: true.

------------------------------------------------------------

Goal Assertion 'END' (file tests/wp_typed/user_string.i, line 37):
Let x = s.base.
Let x_1 = s.offset.
Let x_2 = ss_0.offset.
Assume {
  (* Heap *)
  Have: (region(x) <= 0) /\ linked(Malloc_0) /\ sconst(Mchar_0).
  (* Pre-condition *)
  Have: P_Length_of_str_is(Malloc_0, Mchar_0, s, i).
  (* Invariant 'ZERO' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((i_1 + x_1) < x_2) ->
      (Mchar_0[shift_sint8(s, i_1)] != 0))).
  (* Invariant 'RANGE' *)
  Have: addr_le(s, ss_0) /\
      addr_le(ss_0, shift_sint8(s, L_Length(Mchar_0, s))).
  (* Invariant 'BASE' *)
  Have: ss_0.base = x.
  (* Else *)
  Have: Mchar_0[ss_0] = 0.
}
Prove: P_Length_of_str_is(Malloc_0, Mchar_0, s, x_2 - x_1).

------------------------------------------------------------

Goal Loop assigns (file tests/wp_typed/user_string.i, line 31):
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'strlen' (1/2):
Effect at line 34
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'strlen' (2/2):
Effect at line 38
Prove: true.

------------------------------------------------------------

Goal Decreasing of Loop variant at loop (file tests/wp_typed/user_string.i, line 34):
Prove: true.

------------------------------------------------------------

Goal Positivity of Loop variant at loop (file tests/wp_typed/user_string.i, line 34):
Let x = Mchar_0[ss_0].
Let x_1 = s.base.
Let x_2 = L_Length(Mchar_0, s).
Let x_3 = s.offset.
Let x_4 = ss_0.offset.
Assume {
  Type: is_sint8(x).
  (* Heap *)
  Have: (region(x_1) <= 0) /\ linked(Malloc_0) /\ sconst(Mchar_0).
  (* Pre-condition *)
  Have: P_Length_of_str_is(Malloc_0, Mchar_0, s, i).
  (* Invariant 'ZERO' *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((i_1 + x_3) < x_4) ->
      (Mchar_0[shift_sint8(s, i_1)] != 0))).
  (* Invariant 'RANGE' *)
  Have: addr_le(s, ss_0) /\ addr_le(ss_0, shift_sint8(s, x_2)).
  (* Invariant 'BASE' *)
  Have: ss_0.base = x_1.
  (* Then *)
  Have: x != 0.
}
Prove: x_4 <= (x_3 + x_2).

------------------------------------------------------------
