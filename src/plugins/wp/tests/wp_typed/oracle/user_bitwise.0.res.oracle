# frama-c -wp -wp-model 'Typed (Ref)' [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_typed/user_bitwise.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function rl1
------------------------------------------------------------

Goal Post-condition 'b0' in 'rl1':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'bk' in 'rl1':
Let x_1 = lsr(x, 31).
Assume {
  Type: is_uint32(x) /\ is_uint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= 30) /\ is_sint32(i).
}
Prove: (0 != land(x, lsl(1, i))) <->
    (0 != land(lsl(1, 1 + i), lor(x_1, to_uint32(lsl(x, 1))))).

------------------------------------------------------------
------------------------------------------------------------
  Function rln32
------------------------------------------------------------

Goal Post-condition 'b1' in 'rln32':
Let x_1 = -n.
Let x_2 = lsr(x, 32 - n).
Assume {
  Type: is_uint32(x) /\ is_sint32(n) /\ is_uint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i < n) /\ is_sint32(i).
  (* Pre-condition 'r' *)
  Have: (0 < n) /\ (n <= 31).
}
Prove: (0 != land(x, lsl(1, 32 + i - n))) <->
    (0 != land(lsl(1, i), lor(to_uint32(lsl(x, n)), x_2))).

------------------------------------------------------------

Goal Post-condition 'b2' in 'rln32':
Let x_1 = i + n.
Let x_2 = lsr(x, 32 - n).
Assume {
  Type: is_uint32(x) /\ is_sint32(n) /\ is_uint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (x_1 <= 31) /\ is_sint32(i).
  (* Pre-condition 'r' *)
  Have: (0 < n) /\ (n <= 31).
}
Prove: (0 != land(x, lsl(1, i))) <->
    (0 != land(lsl(1, x_1), lor(to_uint32(lsl(x, n)), x_2))).

------------------------------------------------------------
------------------------------------------------------------
  Function rln64
------------------------------------------------------------

Goal Post-condition 'b1' in 'rln64':
Let x_1 = -n.
Let x_2 = lsr(x, 64 - n).
Assume {
  Type: is_sint32(n) /\ is_uint64(x) /\ is_uint64(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i < n) /\ is_sint32(i).
  (* Pre-condition 'r' *)
  Have: (0 < n) /\ (n <= 63).
}
Prove: (0 != land(x, lsl(1, 64 + i - n))) <->
    (0 != land(lsl(1, i), lor(to_uint64(lsl(x, n)), x_2))).

------------------------------------------------------------

Goal Post-condition 'b2' in 'rln64':
Let x_1 = i + n.
Let x_2 = lsr(x, 64 - n).
Assume {
  Type: is_sint32(n) /\ is_uint64(x) /\ is_uint64(x_2).
  (* Goal *)
  When: (0 <= i) /\ (x_1 <= 63) /\ is_sint32(i).
  (* Pre-condition 'r' *)
  Have: (0 < n) /\ (n <= 63).
}
Prove: (0 != land(x, lsl(1, i))) <->
    (0 != land(lsl(1, x_1), lor(to_uint64(lsl(x, n)), x_2))).

------------------------------------------------------------
------------------------------------------------------------
  Function rr1
------------------------------------------------------------

Goal Post-condition 'b0' in 'rr1':
Assume { Type: is_uint32(x) /\ is_uint32(lsr(x, 1)). }
Prove: bit_test(x, 0) <-> (bit_test(x, 0) \/ bit_test(x, 32)).

------------------------------------------------------------

Goal Post-condition 'bk' in 'rr1':
Let x_1 = lsr(x, 1).
Assume {
  Type: is_uint32(x) /\ is_uint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= 30) /\ is_sint32(i).
}
Prove: (0 != land(x, lsl(1, 1 + i))) <->
    (0 != land(lsl(1, i), lor(x_1, to_uint32(lsl(x, 31))))).

------------------------------------------------------------
------------------------------------------------------------
  Function rrn32
------------------------------------------------------------

Goal Post-condition 'b1' in 'rrn32':
Let x_1 = lsr(x, n).
Let x_2 = -n.
Assume {
  Type: is_uint32(x) /\ is_sint32(n) /\ is_uint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i < n) /\ is_sint32(i).
  (* Pre-condition 'r' *)
  Have: (0 < n) /\ (n <= 31).
}
Prove: (0 != land(x, lsl(1, i))) <->
    (0 != land(lsl(1, 32 + i - n), lor(x_1, to_uint32(lsl(x, 32 - n))))).

------------------------------------------------------------

Goal Post-condition 'b2' in 'rrn32':
Let x_1 = i + n.
Let x_2 = lsr(x, n).
Assume {
  Type: is_uint32(x) /\ is_sint32(n) /\ is_uint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (x_1 <= 31) /\ is_sint32(i).
  (* Pre-condition 'r' *)
  Have: (0 < n) /\ (n <= 31).
}
Prove: (0 != land(x, lsl(1, x_1))) <->
    (0 != land(lsl(1, i), lor(x_2, to_uint32(lsl(x, 32 - n))))).

------------------------------------------------------------
------------------------------------------------------------
  Function rrn64
------------------------------------------------------------

Goal Post-condition 'b1' in 'rrn64':
Let x_1 = lsr(x, n).
Let x_2 = -n.
Assume {
  Type: is_sint32(n) /\ is_uint64(x) /\ is_uint64(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i < n) /\ is_sint32(i).
  (* Pre-condition 'r' *)
  Have: (0 < n) /\ (n <= 63).
}
Prove: (0 != land(x, lsl(1, i))) <->
    (0 != land(lsl(1, 64 + i - n), lor(x_1, to_uint64(lsl(x, 64 - n))))).

------------------------------------------------------------

Goal Post-condition 'b2' in 'rrn64':
Let x_1 = i + n.
Let x_2 = lsr(x, n).
Assume {
  Type: is_sint32(n) /\ is_uint64(x) /\ is_uint64(x_2).
  (* Goal *)
  When: (0 <= i) /\ (x_1 <= 63) /\ is_sint32(i).
  (* Pre-condition 'r' *)
  Have: (0 < n) /\ (n <= 63).
}
Prove: (0 != land(x, lsl(1, x_1))) <->
    (0 != land(lsl(1, i), lor(x_2, to_uint64(lsl(x, 64 - n))))).

------------------------------------------------------------
