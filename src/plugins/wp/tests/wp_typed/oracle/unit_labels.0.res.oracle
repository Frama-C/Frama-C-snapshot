# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_typed/unit_labels.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function duplet
------------------------------------------------------------

Goal Post-condition (file tests/wp_typed/unit_labels.i, line 5) in 'duplet':
Let x = Mint_0[pj_0].
Let x_1 = Mint_0[pi_0].
Let a_1 = shift_sint32(a, x_1).
Let m = Mint_0[a_1 <- Mint_0[shift_sint32(a, x)]].
Let x_2 = m[pj_0].
Let x_3 = m[pi_0].
Assume {
  Type: is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Have: (region(a.base) <= 0) /\ (region(pi_0.base) <= 0) /\
      (region(pj_0.base) <= 0).
  (* Pre-condition *)
  Have: (pi_0 != pj_0) /\ (pi_0 != a_1) /\ (pj_0 != a_1).
  (* Assertion 'PI' *)
  Have: x_1 = x_3.
  (* Assertion 'PJ' *)
  Have: x = x_2.
}
Prove: P_is_duplet(m, a, x_3, x_2).

------------------------------------------------------------

Goal Assertion 'PI' (file tests/wp_typed/unit_labels.i, line 9):
Let x = Mint_0[pi_0].
Let a_1 = shift_sint32(a, x).
Let x_1 = Mint_0[pj_0].
Let m = Mint_0[a_1 <- Mint_0[shift_sint32(a, x_1)]].
Let x_2 = m[pi_0].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(m[pj_0]).
  (* Heap *)
  Have: (region(a.base) <= 0) /\ (region(pi_0.base) <= 0) /\
      (region(pj_0.base) <= 0).
  (* Pre-condition *)
  Have: (pi_0 != pj_0) /\ (pi_0 != a_1) /\ (pj_0 != a_1).
}
Prove: x = x_2.

------------------------------------------------------------

Goal Assertion 'PJ' (file tests/wp_typed/unit_labels.i, line 10):
Let x = Mint_0[pi_0].
Let a_1 = shift_sint32(a, x).
Let x_1 = Mint_0[pj_0].
Let m = Mint_0[a_1 <- Mint_0[shift_sint32(a, x_1)]].
Let x_2 = m[pi_0].
Let x_3 = m[pj_0].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Heap *)
  Have: (region(a.base) <= 0) /\ (region(pi_0.base) <= 0) /\
      (region(pj_0.base) <= 0).
  (* Pre-condition *)
  Have: (pi_0 != pj_0) /\ (pi_0 != a_1) /\ (pj_0 != a_1).
  (* Assertion 'PI' *)
  Have: x = x_2.
}
Prove: x_1 = x_3.

------------------------------------------------------------
