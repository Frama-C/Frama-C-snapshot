# frama-c -wp [...]
[kernel] Parsing tests/wp_acsl/simpl_is_type.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function f
------------------------------------------------------------

Goal Post-condition (file tests/wp_acsl/simpl_is_type.i, line 17) in 'f':
Assume {
  Type: is_sint32(i_1) /\ is_sint32(size_0).
  (* Goal *)
  When: (0 <= i) /\ (i < size_0) /\ is_sint32(i).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < size_0) ->
      (Mint_1[shift_sint32(t, i_2)] < 0))).
  (* Pre-condition *)
  Have: 0 < size_0.
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, shift_sint32(t, 0), size_0).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < size_0) ->
      (Mint_0[shift_sint32(t, i_2)] < 0))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (0 < Mint_0[shift_sint32(t, i_2)]))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= size_0).
  (* Else *)
  Have: size_0 <= i_1.
}
Prove: 0 < Mint_0[shift_sint32(t, i)].

------------------------------------------------------------

Goal Preservation of Invariant (file tests/wp_acsl/simpl_is_type.i, line 22):
Assume {
  Type: is_sint32(i) /\ is_sint32(size_0) /\ is_sint32(1 + i).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < size_0) ->
      (Mint_0[shift_sint32(t, i_1)] < 0))).
  (* Pre-condition *)
  Have: 0 < size_0.
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, shift_sint32(t, 0), size_0).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < size_0) ->
      (Mint_1[shift_sint32(t, i_1)] < 0))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (0 < Mint_1[shift_sint32(t, i_1)]))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= size_0).
  (* Then *)
  Have: i < size_0.
}
Prove: (-1) <= i.

------------------------------------------------------------

Goal Establishment of Invariant (file tests/wp_acsl/simpl_is_type.i, line 22):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant (file tests/wp_acsl/simpl_is_type.i, line 23):
Let a = shift_sint32(t, i).
Let x = Mint_0[a].
Assume {
  Type: is_sint32(i) /\ is_sint32(size_0) /\ is_sint32(1 + i) /\
      is_sint32(x).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i) /\ is_sint32(i_1).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < size_0) ->
      (Mint_1[shift_sint32(t, i_2)] < 0))).
  (* Pre-condition *)
  Have: 0 < size_0.
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, shift_sint32(t, 0), size_0).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < size_0) ->
      (Mint_0[shift_sint32(t, i_2)] < 0))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (0 < Mint_0[shift_sint32(t, i_2)]))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= size_0).
  (* Then *)
  Have: i < size_0.
}
Prove: 0 < Mint_0[a <- -x][shift_sint32(t, i_1)].

------------------------------------------------------------

Goal Establishment of Invariant (file tests/wp_acsl/simpl_is_type.i, line 23):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant (file tests/wp_acsl/simpl_is_type.i, line 24):
Let a = shift_sint32(t, i).
Let x = Mint_0[a].
Assume {
  Type: is_sint32(i) /\ is_sint32(size_0) /\ is_sint32(1 + i) /\
      is_sint32(x).
  (* Goal *)
  When: (i_1 < size_0) /\ (i < i_1) /\ is_sint32(i_1).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < size_0) ->
      (Mint_1[shift_sint32(t, i_2)] < 0))).
  (* Pre-condition *)
  Have: 0 < size_0.
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, shift_sint32(t, 0), size_0).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < size_0) ->
      (Mint_0[shift_sint32(t, i_2)] < 0))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (0 < Mint_0[shift_sint32(t, i_2)]))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= size_0).
  (* Then *)
  Have: i < size_0.
}
Prove: Mint_0[a <- -x][shift_sint32(t, i_1)] < 0.

------------------------------------------------------------

Goal Establishment of Invariant (file tests/wp_acsl/simpl_is_type.i, line 24):
Assume {
  Type: is_sint32(size_0).
  (* Goal *)
  When: (0 <= i) /\ (i < size_0) /\ is_sint32(i).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < size_0) ->
      (Mint_0[shift_sint32(t, i_1)] < 0))).
  (* Pre-condition *)
  Have: 0 < size_0.
}
Prove: Mint_0[shift_sint32(t, i)] < 0.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_acsl/simpl_is_type.i, line 25) (1/2):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_acsl/simpl_is_type.i, line 25) (2/2):
Effect at line 28
Let a = shift_sint32(t, 0).
Let a_1 = shift_sint32(t, i).
Assume {
  Type: is_sint32(i) /\ is_sint32(size_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_1, 1).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < size_0) ->
      (Mint_0[shift_sint32(t, i_1)] < 0))).
  (* Pre-condition *)
  Have: 0 < size_0.
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, a, size_0).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < size_0) ->
      (Mint_1[shift_sint32(t, i_1)] < 0))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (0 < Mint_1[shift_sint32(t, i_1)]))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= size_0).
  (* Then *)
  Have: i < size_0.
}
Prove: included(a_1, 1, a, size_0).

------------------------------------------------------------
------------------------------------------------------------
  Function g
------------------------------------------------------------

Goal Post-condition (file tests/wp_acsl/simpl_is_type.i, line 35) in 'g':
Let x = Mint_0[shift_sint32(t, i)].
Assume {
  Type: is_sint32(i) /\ is_sint32(size_0) /\ is_sint32(x).
  (* Heap *)
  Have: region(t.base) <= 0.
  (* Pre-condition *)
  Have: 0 < size_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (Mint_0[shift_sint32(t, i_1)] != x))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= size_0).
  Have: i < size_0.
}
Prove: exists i_1 : Z. (Mint_0[shift_sint32(t, i_1)] = x) /\ (0 <= i_1) /\
    (i_1 < size_0) /\
    (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
     (Mint_0[shift_sint32(t, i_2)] != x)))).

------------------------------------------------------------

Goal Preservation of Invariant (file tests/wp_acsl/simpl_is_type.i, line 44):
Let x_1 = Mint_0[shift_sint32(t, i)].
Assume {
  Type: is_sint32(i) /\ is_sint32(size_0) /\ is_sint32(x) /\
      is_sint32(1 + i) /\ is_sint32(x_1).
  (* Heap *)
  Have: region(t.base) <= 0.
  (* Pre-condition *)
  Have: 0 < size_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (Mint_0[shift_sint32(t, i_1)] != x))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= size_0).
  (* Then *)
  Have: i < size_0.
  (* Else *)
  Have: x_1 != x.
}
Prove: (-1) <= i.

------------------------------------------------------------

Goal Establishment of Invariant (file tests/wp_acsl/simpl_is_type.i, line 44):
Prove: true.

------------------------------------------------------------

Goal Preservation of Invariant (file tests/wp_acsl/simpl_is_type.i, line 46):
Let x_1 = Mint_0[shift_sint32(t, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(size_0) /\ is_sint32(x) /\
      is_sint32(1 + i_1) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1) /\ is_sint32(i).
  (* Heap *)
  Have: region(t.base) <= 0.
  (* Pre-condition *)
  Have: 0 < size_0.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(t, i_2)] != x))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= size_0).
  (* Then *)
  Have: i_1 < size_0.
  (* Else *)
  Have: x_1 != x.
}
Prove: Mint_0[shift_sint32(t, i)] != x.

------------------------------------------------------------

Goal Establishment of Invariant (file tests/wp_acsl/simpl_is_type.i, line 46):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_acsl/simpl_is_type.i, line 48):
Prove: true.

------------------------------------------------------------
