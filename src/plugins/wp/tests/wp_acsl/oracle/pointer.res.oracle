# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_acsl/pointer.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
tests/wp_acsl/pointer.i:50:[wp] warning: Uncomparable locations ptr(p_0) and mem(t)
tests/wp_acsl/pointer.i:49:[wp] warning: Uncomparable locations ptr(p_0) and mem(t)
tests/wp_acsl/pointer.i:48:[wp] warning: Uncomparable locations ptr(p_0) and mem(t)
tests/wp_acsl/pointer.i:47:[wp] warning: Uncomparable locations ptr(p_0) and mem(t)
tests/wp_acsl/pointer.i:46:[wp] warning: Uncomparable locations ptr(p_0) and mem(t)
tests/wp_acsl/pointer.i:45:[wp] warning: Uncomparable locations ptr(p_0) and mem(t)
------------------------------------------------------------
  Function absurd
------------------------------------------------------------

Goal Post-condition 'qed_ko,Base_oracle_ko' in 'absurd':
Let x = p.base.
Assume {
  (* Goal *)
  When: q.offset < p.offset.
  (* Heap *)
  Have: (region(x) <= 0) /\ (region(q.base) <= 0).
  (* Pre-condition *)
  Have: G_t_68 = x.
}
Prove: addr_lt(q, p).

------------------------------------------------------------

Goal Post-condition 'qed_ko,Comp_oracle_ko' in 'absurd':
Let x = p.base.
Assume {
  (* Goal *)
  When: i_1 <= i.
  (* Heap *)
  Have: (region(x) <= 0) /\ (region(q.base) <= 0).
  (* Pre-condition *)
  Have: G_t_68 = x.
}
Prove: (4 * i) <= (4 * i_1).

------------------------------------------------------------
------------------------------------------------------------
  Function array
------------------------------------------------------------

Goal Post-condition 'Lt' in 'array':
Assume { (* Goal *) When: i < i_1. }
Prove: (4 * i) < (4 * i_1).

------------------------------------------------------------

Goal Post-condition 'Le' in 'array':
Assume { (* Goal *) When: i <= i_1. }
Prove: (4 * i) <= (4 * i_1).

------------------------------------------------------------

Goal Post-condition 'Eq' in 'array':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function compare
------------------------------------------------------------

Goal Post-condition 'qed_ok,Lt' in 'compare':
Let x = p.base.
Let x_1 = q.base.
Assume {
  (* Goal *)
  When: q.offset < p.offset.
  (* Heap *)
  Have: (region(x) <= 0) /\ (region(x_1) <= 0).
  (* Pre-condition *)
  Have: x = x_1.
}
Prove: addr_lt(q, p).

------------------------------------------------------------

Goal Post-condition 'qed_ok,Le' in 'compare':
Let x = p.base.
Let x_1 = q.base.
Assume {
  (* Goal *)
  When: q.offset <= p.offset.
  (* Heap *)
  Have: (region(x) <= 0) /\ (region(x_1) <= 0).
  (* Pre-condition *)
  Have: x = x_1.
}
Prove: addr_le(q, p).

------------------------------------------------------------

Goal Post-condition 'qed_ok,Eq' in 'compare':
Let x = p.base.
Let x_1 = q.base.
Assume {
  (* Goal *)
  When: p.offset = q.offset.
  (* Heap *)
  Have: (region(x) <= 0) /\ (region(x_1) <= 0).
  (* Pre-condition *)
  Have: x = x_1.
}
Prove: p = q.

------------------------------------------------------------
------------------------------------------------------------
  Function mixed_array_pointer
------------------------------------------------------------

Goal Post-condition 'qed_ok,Lt' in 'mixed_array_pointer':
tests/wp_acsl/pointer.i:45: warning from Reference Variable Model:
 - Warning: Hide sub-term definition
   Reason: Uncomparable locations ptr(p_0) and mem(t)
Let x = p.base.
Assume {
  (* Goal *)
  When: 0 < w.
  (* Heap *)
  Have: region(x) <= 0.
  (* Pre-condition *)
  Have: G_t_68 = x.
}
Prove: addr_lt(shift_A10_sint32(global(G_t_68), 0), p).

------------------------------------------------------------

Goal Post-condition 'qed_ok,Le' in 'mixed_array_pointer':
tests/wp_acsl/pointer.i:46: warning from Reference Variable Model:
 - Warning: Hide sub-term definition
   Reason: Uncomparable locations ptr(p_0) and mem(t)
Let x = p.base.
Assume {
  (* Goal *)
  When: 0 <= w.
  (* Heap *)
  Have: region(x) <= 0.
  (* Pre-condition *)
  Have: G_t_68 = x.
}
Prove: addr_le(shift_A10_sint32(global(G_t_68), 0), p).

------------------------------------------------------------

Goal Post-condition 'qed_ok,Eq' in 'mixed_array_pointer':
tests/wp_acsl/pointer.i:47: warning from Reference Variable Model:
 - Warning: Hide sub-term definition
   Reason: Uncomparable locations ptr(p_0) and mem(t)
Let x = p.base.
Assume {
  (* Heap *)
  Have: region(x) <= 0.
  (* Pre-condition *)
  Have: G_t_68 = x.
}
Prove: p = shift_A10_sint32(global(G_t_68), 0).

------------------------------------------------------------

Goal Post-condition 'qed_ok,Ne' in 'mixed_array_pointer':
tests/wp_acsl/pointer.i:48: warning from Reference Variable Model:
 - Warning: Hide sub-term definition
   Reason: Uncomparable locations ptr(p_0) and mem(t)
Let x = p.base.
Assume {
  (* Goal *)
  When: 0 != w.
  (* Heap *)
  Have: region(x) <= 0.
  (* Pre-condition *)
  Have: G_t_68 = x.
}
Prove: p != shift_A10_sint32(global(G_t_68), 0).

------------------------------------------------------------

Goal Post-condition 'qed_ko,Le_oracle_ko' in 'mixed_array_pointer':
tests/wp_acsl/pointer.i:49: warning from Reference Variable Model:
 - Warning: Hide sub-term definition
   Reason: Uncomparable locations ptr(p_0) and mem(t)
Let x = p.base.
Assume {
  (* Goal *)
  When: 0 <= w.
  (* Heap *)
  Have: region(x) <= 0.
  (* Pre-condition *)
  Have: G_t_68 = x.
}
Prove: addr_lt(shift_A10_sint32(global(G_t_68), 0), p).

------------------------------------------------------------

Goal Post-condition 'qed_ko,Lt_oracle_ko' in 'mixed_array_pointer':
tests/wp_acsl/pointer.i:50: warning from Reference Variable Model:
 - Warning: Hide sub-term definition
   Reason: Uncomparable locations ptr(p_0) and mem(t)
Let x = p.base.
Assume {
  (* Goal *)
  When: 0 < w.
  (* Heap *)
  Have: region(x) <= 0.
  (* Pre-condition *)
  Have: G_t_68 = x.
}
Prove: addr_le(p, shift_A10_sint32(global(G_t_68), 0)).

------------------------------------------------------------
------------------------------------------------------------
  Function null
------------------------------------------------------------

Goal Post-condition 'qed_ok,Bool' in 'null':
Let x = cast(p).
Assume { Type: is_sint32(x). (* Heap *) Have: region(p.base) <= 0. }
Prove: (p != null) <-> (0 != x).

------------------------------------------------------------

Goal Post-condition 'qed_ok,NotNull' in 'null':
Let x = cast(p).
Assume {
  Type: is_sint32(x).
  (* Goal *)
  When: p != null.
  (* Heap *)
  Have: region(p.base) <= 0.
}
Prove: 0 != x.

------------------------------------------------------------

Goal Post-condition 'qed_ok,IsNull' in 'null':
Assume { (* Heap *) Have: region(0) <= 0. }
Prove: 0 = cast(null).

------------------------------------------------------------
------------------------------------------------------------
  Function pointer
------------------------------------------------------------

Goal Post-condition 'qed_ok,Lt' in 'pointer':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'qed_ok,Le' in 'pointer':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'qed_ok,Eq' in 'pointer':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'qed_ok,Eq_0' in 'pointer':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'qed_ok,Eq_0_bis' in 'pointer':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'qed_ko,Le_oracle_ko' in 'pointer':
Assume { (* Goal *) When: i <= i_1. (* Heap *) Have: region(p.base) <= 0. }
Prove: i < i_1.

------------------------------------------------------------

Goal Post-condition 'qed_ko,Eq_oracle_ko' in 'pointer':
Assume { (* Heap *) Have: region(p.base) <= 0. }
Prove: false.

------------------------------------------------------------
