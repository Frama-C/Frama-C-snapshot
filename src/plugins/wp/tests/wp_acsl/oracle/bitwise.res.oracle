# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_acsl/bitwise.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function band
------------------------------------------------------------

Goal Post-condition (file tests/wp_acsl/bitwise.i, line 5) in 'band':
Let x = land(a, land(b, c)).
Assume { Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(c) /\ is_sint32(x).
}
Prove: x = to_sint32(x).

------------------------------------------------------------

Goal Post-condition 'band0' in 'band':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function band with behavior bit0
------------------------------------------------------------

Goal Post-condition for 'bit0' 'band1' in 'band':
Prove: true.

------------------------------------------------------------

Goal Post-condition for 'bit0' 'band2' in 'band':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function band with behavior bit1
------------------------------------------------------------

Goal Post-condition for 'bit1' 'band3' in 'band':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function band with behavior bit2
------------------------------------------------------------

Goal Post-condition for 'bit2' 'band4' in 'band':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function band with behavior bit3
------------------------------------------------------------

Goal Post-condition for 'bit3' 'band5' in 'band':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(c) /\
      is_sint32(land(a, land(b, c))).
  (* Pre-condition for 'bit3' 'bit3' *)
  Have: (!bit_test(a, 1)) /\ ((!bit_test(a, 0)) \/ (!bit_test(b, 0))) /\
      ((!bit_test(b, 1)) \/ (!bit_test(c, 1))).
}
Prove: (!bit_test(a, 0)) \/ (!bit_test(b, 0)).

------------------------------------------------------------
------------------------------------------------------------
  Function band with behavior bit4
------------------------------------------------------------

Goal Post-condition for 'bit4' 'band6' in 'band':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function band with behavior bit5
------------------------------------------------------------

Goal Post-condition for 'bit5' 'band7,zbit' in 'band':
Assume {
  Type: is_sint32(a) /\ is_sint32(land(a, land(b, c))).
  (* Goal *)
  When: 85 = land(4095, a).
}
Prove: 21845 != land(65535, a).

------------------------------------------------------------
------------------------------------------------------------
  Function bnot
------------------------------------------------------------

Goal Post-condition (file tests/wp_acsl/bitwise.i, line 55) in 'bnot':
Let x = lnot(a). Assume { Type: is_sint32(a) /\ is_sint32(x). }
Prove: x = to_sint32(x).

------------------------------------------------------------
------------------------------------------------------------
  Function bor
------------------------------------------------------------

Goal Post-condition (file tests/wp_acsl/bitwise.i, line 28) in 'bor':
Let x = lor(a, lor(b, c)).
Assume { Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(c) /\ is_sint32(x).
}
Prove: x = to_sint32(x).

------------------------------------------------------------

Goal Post-condition 'bor0' in 'bor':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function bor with behavior bit1
------------------------------------------------------------

Goal Post-condition for 'bit1' 'bor1' in 'bor':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function bor with behavior bit2
------------------------------------------------------------

Goal Post-condition for 'bit2' 'bor2' in 'bor':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function bor with behavior bit3
------------------------------------------------------------

Goal Post-condition for 'bit3' 'bor3' in 'bor':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function bxor
------------------------------------------------------------

Goal Post-condition (file tests/wp_acsl/bitwise.i, line 42) in 'bxor':
Let x = lxor(a, b).
Assume { Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x). }
Prove: x = to_sint32(x).

------------------------------------------------------------
------------------------------------------------------------
  Function bxor with behavior bit1
------------------------------------------------------------

Goal Post-condition for 'bit1' (file tests/wp_acsl/bitwise.i, line 45) in 'bxor':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function bxor with behavior bit2
------------------------------------------------------------

Goal Post-condition for 'bit2' (file tests/wp_acsl/bitwise.i, line 48) in 'bxor':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function bxor with behavior bit3
------------------------------------------------------------

Goal Post-condition for 'bit3' 'zbit' in 'bxor':
Let x = lnot(b).
Assume { Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(lxor(b, x)). }
Prove: b = lnot(x).

------------------------------------------------------------
------------------------------------------------------------
  Function lshift
------------------------------------------------------------

Goal Post-condition (file tests/wp_acsl/bitwise.i, line 58) in 'lshift':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function lshift with behavior shift1
------------------------------------------------------------

Goal Post-condition for 'shift1' 'lsl1' in 'lshift':
Prove: true.

------------------------------------------------------------

Goal Post-condition for 'shift1' 'lsl2' in 'lshift':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function lshift with behavior shift2
------------------------------------------------------------

Goal Post-condition for 'shift2' 'lsl3' in 'lshift':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function rshift
------------------------------------------------------------

Goal Post-condition (file tests/wp_acsl/bitwise.i, line 69) in 'rshift':
Let x = lsr(a, n).
Assume { Type: is_sint32(a) /\ is_sint32(n) /\ is_sint32(x). }
Prove: x = to_sint32(x).

------------------------------------------------------------
------------------------------------------------------------
  Function rshift with behavior shift1
------------------------------------------------------------

Goal Post-condition for 'shift1' 'lsr1' in 'rshift':
Prove: true.

------------------------------------------------------------
