# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_acsl/init_value.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Pre-condition 'qed_ok,Struct_Simple_a' in 'main':
Prove: true.

------------------------------------------------------------

Goal Pre-condition 'qed_ok,Struct_Simple_b' in 'main':
Prove: true.

------------------------------------------------------------

Goal Pre-condition 'qed_ok,Simple_Array_0' in 'main':
Prove: true.

------------------------------------------------------------

Goal Pre-condition 'qed_ok,Simple_Array_1' in 'main':
Let x = t[1].
Assume {
  Type: is_sint32(x).
  (* Initializer *)
  Init: 1 = t[0].
  (* Initializer *)
  Init: forall i : Z. ((0 < i) -> ((i <= 1) -> (0 = t[i]))).
}
Prove: 0 = x.

------------------------------------------------------------

Goal Pre-condition 'qed_ok,With_Array_Struct_5' in 'main':
Prove: true.

------------------------------------------------------------

Goal Pre-condition 'qed_ok,With_Array_Struct_3' in 'main':
Prove: true.

------------------------------------------------------------

Goal Pre-condition 'qed_ok,Sc_eq' in 'main':
Let a = sc0_0.F3_Sc_b.
Let a_1 = sc1_0.F3_Sc_b.
Assume {
  Type: IsS3_Sc(sc0_0) /\ IsS3_Sc(sc1_0).
  (* Initializer *)
  Init: 1 = (sc1_0.F3_Sc_a).
  (* Initializer *)
  Init: 2 = a_1[0].
  (* Initializer *)
  Init: 3 = a_1[1].
  (* Initializer *)
  Init: 4 = a_1[2].
  (* Initializer *)
  Init: 5 = (sc1_0.F3_Sc_c).
  (* Initializer *)
  Init: 1 = (sc0_0.F3_Sc_a).
  (* Initializer *)
  Init: 2 = a[0].
  (* Initializer *)
  Init: 3 = a[1].
  (* Initializer *)
  Init: 4 = a[2].
  (* Initializer *)
  Init: 5 = (sc0_0.F3_Sc_c).
}
Prove: EqS3_Sc(sc1_0, sc0_0).

------------------------------------------------------------

Goal Pre-condition 'qed_ok,Sc_t' in 'main':
Prove: true.

------------------------------------------------------------

Goal Pre-condition 'qed_ok,Sc_t' in 'main':
Prove: true.

------------------------------------------------------------

Goal Pre-condition 'qed_ok,Sc_c_2' in 'main':
Prove: true.

------------------------------------------------------------

Goal Pre-condition 'qed_ok,Sc_c_3' in 'main':
Prove: true.

------------------------------------------------------------

Goal Pre-condition 'qed_ok,Tab_no_init' in 'main':
Prove: true.

------------------------------------------------------------

Goal Pre-condition 'qed_ok,Tab_todo' in 'main':
Assume {
  Type: is_uint8(tab_0[5]).
  (* Goal *)
  When: (0 <= i) /\ (i <= 31) /\ is_sint32(i).
  (* Initializer *)
  Init: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 31) -> (0 = tab_0[i_1]))).
}
Prove: tab_0[i] <= 255.

------------------------------------------------------------

Goal Pre-condition 'qed_ko,Sc_eq_ko' in 'main':
Let a = sc2_0.F3_Sc_b.
Let a_1 = sc3_0.F3_Sc_b.
Assume {
  Type: IsS3_Sc(sc2_0) /\ IsS3_Sc(sc3_0) /\ is_sint32(a[2]).
  (* Initializer *)
  Init: 1 = (sc3_0.F3_Sc_a).
  (* Initializer *)
  Init: 2 = a_1[0].
  (* Initializer *)
  Init: 3 = a_1[1].
  (* Initializer *)
  Init: 4 = a_1[2].
  (* Initializer *)
  Init: 0 = (sc3_0.F3_Sc_c).
  (* Initializer *)
  Init: 1 = (sc2_0.F3_Sc_a).
  (* Initializer *)
  Init: 2 = a[0].
  (* Initializer *)
  Init: 3 = a[1].
  (* Initializer *)
  Init: forall i : Z. ((2 <= i) -> ((i <= 2) -> (0 = a[i]))).
  (* Initializer *)
  Init: 4 = (sc2_0.F3_Sc_c).
}
Prove: EqS3_Sc(sc2_0, sc3_0).

------------------------------------------------------------

Goal Pre-condition 'qed_ko,Sc_t' in 'main':
Let a = sc3_0.F3_Sc_b.
Assume {
  Type: IsS3_Sc(sc3_0).
  (* Initializer *)
  Init: 1 = (sc3_0.F3_Sc_a).
  (* Initializer *)
  Init: 2 = a[0].
  (* Initializer *)
  Init: 3 = a[1].
  (* Initializer *)
  Init: 4 = a[2].
  (* Initializer *)
  Init: 0 = (sc3_0.F3_Sc_c).
}
Prove: false.

------------------------------------------------------------

Goal Pre-condition 'qed_ko,Sc_c_2' in 'main':
Let a = sc2_0.F3_Sc_b.
Assume {
  Type: IsS3_Sc(sc2_0) /\ is_sint32(a[2]).
  (* Initializer *)
  Init: 1 = (sc2_0.F3_Sc_a).
  (* Initializer *)
  Init: 2 = a[0].
  (* Initializer *)
  Init: 3 = a[1].
  (* Initializer *)
  Init: forall i : Z. ((2 <= i) -> ((i <= 2) -> (0 = a[i]))).
  (* Initializer *)
  Init: 4 = (sc2_0.F3_Sc_c).
}
Prove: false.

------------------------------------------------------------

Goal Pre-condition 'qed_ko,Tab_no_init' in 'main':
Assume {
  Type: is_uint8(tab_0[5]).
  (* Initializer *)
  Init: forall i : Z. ((0 <= i) -> ((i <= 31) -> (0 = tab_0[i]))).
}
Prove: false.

------------------------------------------------------------

Goal Pre-condition 'qed_ko,With_Array_Struct_3' in 'main':
Let a = st_0.F2_St_tab.
Assume {
  Type: is_sint32(a[5]).
  (* Initializer *)
  Init: 1 = a[0].
  (* Initializer *)
  Init: 2 = a[1].
  (* Initializer *)
  Init: 3 = a[2].
  (* Initializer *)
  Init: 4 = a[3].
  (* Initializer *)
  Init: forall i : Z. ((4 <= i) -> ((i <= 9) -> (0 = a[i]))).
}
Prove: false.

------------------------------------------------------------

Goal Pre-condition 'qed_ko,Simple_Array_1' in 'main':
Let x = t[1].
Assume {
  Type: is_sint32(x).
  (* Initializer *)
  Init: 1 = t[0].
  (* Initializer *)
  Init: forall i : Z. ((0 < i) -> ((i <= 1) -> (0 = t[i]))).
}
Prove: 1 = x.

------------------------------------------------------------
