# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_acsl/axioms.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function f
------------------------------------------------------------

Goal Post-condition 'P,todo' in 'f':
Let a_1 = shift_sint32(t, a).
Let x = -a.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(i).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, 1 + b - a).
  (* Pre-condition *)
  Have: a <= b.
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, a_1, i - a).
  (* Invariant 'Positive' *)
  Have: forall i_1 : Z. ((a <= i_1) -> ((i_1 < i) ->
      (0 < Mint_0[shift_sint32(t, i_1)]))).
  (* Invariant 'Index' *)
  Have: (a <= i) /\ (i <= (1 + b)).
  (* Else *)
  Have: b < i.
}
Prove: P_P(Mint_0, t, a, b).

------------------------------------------------------------

Goal Post-condition 'Q' in 'f':
Let a_1 = shift_sint32(t, a).
Let x = -a.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(i).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, 1 + b - a).
  (* Pre-condition *)
  Have: a <= b.
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, a_1, i - a).
  (* Invariant 'Positive' *)
  Have: forall i_1 : Z. ((a <= i_1) -> ((i_1 < i) ->
      (0 < Mint_0[shift_sint32(t, i_1)]))).
  (* Invariant 'Index' *)
  Have: (a <= i) /\ (i <= (1 + b)).
  (* Else *)
  Have: b < i.
}
Prove: P_Q(Malloc_0, Mint_0, t, a, b).

------------------------------------------------------------

Goal Preservation of Invariant 'Index' (file tests/wp_acsl/axioms.i, line 30):
Let a_1 = shift_sint32(t, a).
Let x = -a.
Let x_1 = 1 + i.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(i) /\ is_sint32(x_1).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, 1 + b - a).
  (* Pre-condition *)
  Have: a <= b.
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, a_1, i - a).
  (* Invariant 'Positive' *)
  Have: forall i_1 : Z. ((a <= i_1) -> ((i_1 < i) ->
      (0 < Mint_1[shift_sint32(t, i_1)]))).
  (* Invariant 'Index' *)
  Have: (a <= i) /\ (i <= (1 + b)).
  (* Then *)
  Have: i <= b.
}
Prove: a <= x_1.

------------------------------------------------------------

Goal Establishment of Invariant 'Index' (file tests/wp_acsl/axioms.i, line 30):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(t, a), 1 + b - a).
  (* Pre-condition *)
  Have: a <= b.
}
Prove: a <= (1 + b).

------------------------------------------------------------

Goal Preservation of Invariant 'Positive' (file tests/wp_acsl/axioms.i, line 31):
Let a_1 = shift_sint32(t, a).
Let x = -a.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(i) /\ is_sint32(1 + i).
  (* Goal *)
  When: (a <= i_1) /\ (i_1 <= i) /\ is_sint32(i_1).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, 1 + b - a).
  (* Pre-condition *)
  Have: a <= b.
  (* Loop assigns ... *)
  Have: havoc(Mint_1, Mint_0, a_1, i - a).
  (* Invariant 'Positive' *)
  Have: forall i_2 : Z. ((a <= i_2) -> ((i_2 < i) ->
      (0 < Mint_0[shift_sint32(t, i_2)]))).
  (* Invariant 'Index' *)
  Have: (a <= i) /\ (i <= (1 + b)).
  (* Then *)
  Have: i <= b.
}
Prove: 0 < Mint_0[shift_sint32(t, i) <- 1][shift_sint32(t, i_1)].

------------------------------------------------------------

Goal Establishment of Invariant 'Positive' (file tests/wp_acsl/axioms.i, line 31):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_acsl/axioms.i, line 32) (1/3):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file tests/wp_acsl/axioms.i, line 32) (2/3):
Effect at line 34
Let a_1 = shift_sint32(t, a).
Let x = -a.
Let x_1 = i - a.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(i) /\ is_sint32(1 + i).
  (* Goal *)
  When: valid_rd(Malloc_0, a_1, x_1).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, 1 + b - a).
  (* Pre-condition *)
  Have: a <= b.
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, a_1, x_1).
  (* Invariant 'Positive' *)
  Have: forall i_1 : Z. ((a <= i_1) -> ((i_1 < i) ->
      (0 < Mint_1[shift_sint32(t, i_1)]))).
  (* Invariant 'Index' *)
  Have: (a <= i) /\ (i <= (1 + b)).
  (* Then *)
  Have: i <= b.
}
Prove: included(a_1, x_1, a_1, 1 + i - a).

------------------------------------------------------------

Goal Loop assigns (file tests/wp_acsl/axioms.i, line 32) (3/3):
Effect at line 34
Let a_1 = shift_sint32(t, a).
Let x = -a.
Let a_2 = shift_sint32(t, i).
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(i) /\ is_sint32(1 + i).
  (* Goal *)
  When: valid_rd(Malloc_0, a_2, 1).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, 1 + b - a).
  (* Pre-condition *)
  Have: a <= b.
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, a_1, i - a).
  (* Invariant 'Positive' *)
  Have: forall i_1 : Z. ((a <= i_1) -> ((i_1 < i) ->
      (0 < Mint_1[shift_sint32(t, i_1)]))).
  (* Invariant 'Index' *)
  Have: (a <= i) /\ (i <= (1 + b)).
  (* Then *)
  Have: i <= b.
}
Prove: included(a_2, 1, a_1, 1 + i - a).

------------------------------------------------------------

Goal Assigns 'todo' in 'f' (1/2):
Effect at line 34
Prove: true.

------------------------------------------------------------

Goal Assigns 'todo' in 'f' (2/2):
Effect at line 34
Let a_1 = shift_sint32(t, a).
Let x = -a.
Let x_1 = i - a.
Let x_2 = 1 + b - a.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(i).
  (* Heap *)
  Have: (region(t.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, x_2).
  (* Pre-condition *)
  Have: a <= b.
  (* Loop assigns ... *)
  Have: havoc(Mint_0, Mint_1, a_1, x_1).
}
Prove: (valid_rd(Malloc_0, a_1, x_1) -> included(a_1, x_1, a_1, x_2)).

------------------------------------------------------------
