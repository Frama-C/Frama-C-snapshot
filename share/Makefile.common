##########################################################################
#                                                                        #
#  This file is part of Frama-C.                                         #
#                                                                        #
#  Copyright (C) 2007-2018                                               #
#    CEA (Commissariat à l'énergie atomique et aux énergies              #
#         alternatives)                                                  #
#                                                                        #
#  you can redistribute it and/or modify it under the terms of the GNU   #
#  Lesser General Public License as published by the Free Software       #
#  Foundation, version 2.1.                                              #
#                                                                        #
#  It is distributed in the hope that it will be useful,                 #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#  GNU Lesser General Public License for more details.                   #
#                                                                        #
#  See the GNU Lesser General Public License version 2.1                 #
#  for more details (enclosed in the file licenses/LGPLv2.1).            #
#                                                                        #
##########################################################################

##########################################################################
#                                                                        #
# Define common stuff shared by makefiles.                               #
#                                                                        #
##########################################################################

include $(MAKECONFIG_DIR)/Makefile.config

#######################
# Working directories #
#######################

# Frama-C kernel directories
FRAMAC_SRC_DIRS= plugins/pdg_types plugins/value_types \
	       libraries/stdlib libraries/utils \
	       libraries/project libraries/datatype \
	       kernel_internals/parsing \
	       kernel_internals/typing \
	       kernel_internals/runtime \
	       kernel_services/parsetree \
	       kernel_services/ast_data \
	       kernel_services/ast_queries \
	       kernel_services/ast_printing \
	       kernel_services/cmdline_parameters \
	       kernel_services/plugin_entry_points \
	       kernel_services/abstract_interp \
	       kernel_services/visitors \
	       kernel_services/analysis \
	       kernel_services/ast_transformations \
	       plugins/gui
FRAMAC_SRC_DIRS:= $(addprefix src/, $(FRAMAC_SRC_DIRS))

#################
# OCaml version #
#################

# Cumulative semantics: HAS_OCAMLnnn should be set if OCaml version is mmm
# with mmm >= nnn

# findstring returns an empty string if it does not match, and the value it
# searches if it matches. Hence we compare with the empty string
HAS_OCAML403=no
ifeq ($(findstring 4.02,$(OCAMLVERSION)),)
  HAS_OCAML403 = yes
endif


##################
# Flags          #
##################

# Flags to be used by ocamlc and ocamlopt when compiling Frama-C
# itself. For development versions, we add -warn-error for most
# warnings -warn-error has effect only for warnings that are
# explicitly set using '-w'.
ifeq ($(DEVELOPMENT),yes)
# Most warnings are activated by default. Those settings are inherited
# in the compilation of external plugins.
# - 4 (fragile pattern-matching) only make sense when adding a node to a type.
#   OCaml GPR #1071 will make it usable
# - 6 (omit label in application) would make code clearer, but requires
#   refactoring before being enabled.
# - 9 (missing field in record pattern) is much too heavy. Most of the time
#   not all fields are relevant in pattern-matching Frama-C's AST.
# - 41 (ambiguous constructor or label name) prevents type-based
#   disambiguation, a feature which is seen as a good thing by many developers
# - 44 (open shadows an identifier)
# - 45 (open shadows a label or constructor): While the use of open directives
#   is supposed to stay small, it should still be possible to open modules
#   that share common names, barring some mechanism to open only parts of a
#   module.
# - 48 (implicit elimination of optional arguments): makes use of functions
#   with optional arguments heavier in higher-order context
# - 50 (warning about ambiguously placed OCamldoc comments): while it would be
#   useful to ensure OCamldoc understands comments correctly, some clean-up
#   is needed before enabling this warning.
WARNINGS ?= -w +a-4-6-9-41-44-45-48-50

# - 3 (deprecated feature) cannot always be avoided for OCaml stdlib when
#   supporting several OCaml versions
# - 4 (fragile pattern matching) will be activated when adding a node (see
#   above), in order to let the developer decide whether a case should be
#   added on relevant fragile pattern or not: a matching might very well stay
#   fragile without triggering an error.
# - 3x (various categories of unused identifiers) it is sometimes useful to
#   let code compile despite such warnings when in the middle of a development.
#   On the other hand, a completed feature should not trigger such warnings.
# - 58 (missing cmx) is triggered by some versions of external libraries.
#   Situation should probably improve as these libraries get updated, leading
#   to treat this warning as error.
WARN_ERROR ?= -warn-error +a-3-4-32-33-34-35-36-37-38-39-58

else

WARNINGS ?= -w -a

endif #DEVELOPMENT

FLAGS	= $(WARNINGS) $(WARN_ERROR) $(OCAML_ANNOT_OPTION) -strict-sequence \
          -safe-string
DEBUG	= -g

#############
# Verbosing #
#############

ifneq ($(VERBOSEMAKE),no) # Do not change to ifeq ($(VERBOSEMAKE),yes), as this
                          # version makes it easier for the user to set the
			  # option on the command-line to investigate
			  # Makefile-related problems
# ignore the PRINT_* materials but print all the other commands
  PRINT = @true
# prevent the warning "jobserver unavailable: using -j1".
# see GNU make manual (section 5.7.1 and appendix B)
  QUIET_MAKE:= + $(MAKE)
# prevent the warning: "-jN forced in submake: disabling jobserver mode".
# see GNU make manual (appendix B)
  MAKE := MAKEFLAGS="$(patsubst j,,$(MAKEFLAGS))" $(MAKE)
else
# print the PRINT_* materials
  PRINT = @echo
# but silently execute all the other commands
# fixed bug #637: do not write spaces between flags
  OLDFLAGS:=r$(MAKEFLAGS)
  MAKEFLAGS:=rs$(MAKEFLAGS)
# do not silently execute other makefiles (e.g the one of why):
# the redefinition of MAKE below is for this purpose
# but use QUIET_MAKE in order to call silently the initial Makefile
  QUIET_MAKE:= + $(MAKE)
  MAKE := MAKEFLAGS="$(OLDFLAGS)" $(MAKE)
endif


##################
# Shell commands #
##################

# prefer to use these commands and not directly "cp" or others

CAT	= cat
CHMOD	= chmod
CHMOD_RO= chmod a-w
CHMOD_RW= sh -c \
'for f in "$$@"; do \
  if test -e $$f; then chmod u+w $$f; fi \
done' chmod_rw
CP      = install
CP_IF_DIFF = sh -c \
  'if cmp -s $$1 $$2; \
   then touch -r $$2 $$1; \
   else echo "Generating  $$2"; install $$1 $$2; fi' cpifdiff
#follow symbolic link
CP_L    = cp -fL
ECHO	= echo
MKDIR   = mkdir -p
MV	= mv
ISED	= sh -c \
'new_temp=`mktemp /tmp/frama-c.XXXXXXX` || exit 1; \
sed "$$@" > $$new_temp; \
eval last=\$${$$\#}; \
mv $$new_temp $$last' sed_inplace
SED	= LC_ALL=C sed
RM	= rm -f
ifeq ($(shell uname -s 2> /dev/null),Darwin)
TAR     = gtar
else
TAR     = tar
endif
TOUCH   = touch
GIT	= git

##################
# Make commands #
##################

map=$(foreach a,$(2),$(call $(1),$(a)))

define assert_defined
ifndef $(1)
$$(error Undefined variable $(1) please report.)
endif
endef

###########################
# Command pretty printing #
###########################

PRINT_OCAMLC   	=$(PRINT) 'Ocamlc      '#
PRINT_OCAMLOPT 	=$(PRINT) 'Ocamlopt    '#
PRINT_DEP      	=$(PRINT) 'Ocamldep    '#
PRINT_OCAMLLEX 	=$(PRINT) 'Ocamllex    '#
PRINT_OCAMLYACC	=$(PRINT) 'Ocamlyacc   '#
PRINT_OCAMLMKTOP=$(PRINT) 'Ocamlmktop  '#
PRINT_DOC	=$(PRINT) 'Ocamldoc    '#
PRINT_OCAMLCP  	=$(PRINT) 'Profiling   '#
PRINT_CAMLP4   	=$(PRINT) 'Camlp4      '#
PRINT_PACKING  	=$(PRINT) 'Packing     '#
PRINT_LINKING  	=$(PRINT) 'Linking     '#
PRINT_INFERRING	=$(PRINT) 'Inferring   '#
PRINT_CC   	=$(PRINT) 'CC          '#

PRINT_MAKING   	=$(PRINT) 'Generating  '#
PRINT_MV       	=$(PRINT) 'Moving to   '#
PRINT_CP       	=$(PRINT) 'Copying to  '#
PRINT_RM       	=$(PRINT) 'Cleaning    '#
PRINT_EXEC	=$(PRINT) 'Running     '#
PRINT_TAR    	=$(PRINT) 'Archiving   '#
PRINT_UNTAR    	=$(PRINT) 'Unarchiving '#
PRINT_CONFIG   	=$(PRINT) 'Configuring '#
PRINT_BUILD   	=$(PRINT) 'Building    '#
PRINT_INSTALL  	=$(PRINT) 'Installing  '#
PRINT_UPDATE  	=$(PRINT) 'Updating    '#

PRINT_DOT	=$(PRINT) 'Dot         '#
PRINT_LATEX	=$(PRINT) 'Latex       '#
PRINT_DVIPS	=$(PRINT) 'Dvips       '#
PRINT_HEVEA	=$(PRINT) 'Hevea       '#

#########
# Tests #
#########


#################
# Documentation #
#################

NATIVE_OCAMLDOC:=$(shell ocamlfind ocamldoc -v | grep -o ocamldoc.opt)

ifeq ("$(NATIVE_OCAMLDOC)","ocamldoc.opt")
DOC_PLUGIN=$(DOC_DIR)/docgen.cmxs
else
DOC_PLUGIN=$(DOC_DIR)/docgen.cmo
endif

##########################
# Plugin File Generation #
##########################

#take the name of the plugin as argument $(1)
define include_generic_plugin_Makefile
$(call assert_defined,PLUGIN_DIR)
$(PLUGIN_DIR)/.Makefile.plugin.generated: $(MAKECONFIG_DIR)/Makefile.plugin.template
	$(PRINT_MAKING)	$$@
	$(SED) -e "s/@PLUGIN_NAME@/$(1)/g" $$< > $$@

# We still clean the old Makefile.plugin.generated (without the dot) temporarily
clean::
	rm -rf $(PLUGIN_DIR)/.Makefile.plugin.generated
	rm -rf $(PLUGIN_DIR)/Makefile.plugin.generated

#We always define this variable because it can't wait the generation
#of the Makefile.plugin.generated since the targets of rules defined in the
#Makefile of the plugins could use this variable
$(1)_DIR:=$(PLUGIN_DIR)

sinclude $(PLUGIN_DIR)/.Makefile.plugin.generated

endef

%.check_mli_exists: %.mli
	touch $@

.PHONY:common_force_rule

%.check_mli_exists: common_force_rule
	$(error "The file '$*.mli' must be provided. The simplest workaround is 'touch $*.mli')


##########################################################################
# Local Variables:
# compile-command: "make"
# mode: makefile
# End:
