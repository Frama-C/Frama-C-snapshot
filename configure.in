##########################################################################
#                                                                        #
#  This file is part of Frama-C.                                         #
#                                                                        #
#  Copyright (C) 2007-2016                                               #
#    CEA   (Commissariat à l'énergie atomique et aux énergies            #
#           alternatives)                                                #
#    INRIA (Institut National de Recherche en Informatique et en         #
#           Automatique)                                                 #
#                                                                        #
#  you can redistribute it and/or modify it under the terms of the GNU   #
#  Lesser General Public License as published by the Free Software       #
#  Foundation, version 2.1.                                              #
#                                                                        #
#  It is distributed in the hope that it will be useful,                 #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#  GNU Lesser General Public License for more details.                   #
#                                                                        #
#  See the GNU Lesser General Public License version 2.1                 #
#  for more details (enclosed in the file licenses/LGPLv2.1).            #
#                                                                        #
##########################################################################

# autoconf input for Objective Caml programs
# Copyright (C) 2001 Jean-Christophe Filliâtre
#   from a first script by Georges Mariano

# the script generated by autoconf from this input will set the following
# variables:
#   OCAMLC        "ocamlc" if present in the path, or a failure
#                 or "ocamlc.opt" if present with same version number as ocamlc
#   OCAMLOPT      "ocamlopt" (or "ocamlopt.opt" if present), or "no"
#   OCAMLBEST     either "byte" if no native compiler was found,
#                 or "opt" otherwise
#   OCAMLDEP      "ocamldep"
#   OCAMLLEX      "ocamllex" (or "ocamllex.opt" if present)
#   OCAMLYACC     "ocamlyacc"
#   OCAMLLIB      the path to the ocaml standard library
#   OCAMLVERSION  the ocaml version number
#   OCAMLWIN32    "yes"/"no" depending on Sys.os_type = "Win32"
#   EXE           ".exe" if OCAMLWIN32=yes, "" otherwise

AC_INIT(src/kernel_internals/runtime/boot.ml)

define([FRAMAC_MAIN_AUTOCONF])
m4_include(share/configure.ac)

AC_SUBST([FRAMAC_VERSION],[`cat VERSION`])

# export CYGWIN=nobinmode

##########################
# Check for Make version #
##########################

new_section "configure make"

AC_CHECK_PROG(MAKE,make,make,)
AC_MSG_CHECKING([version of make])
MAKE_DISTRIB=`sh -c "$MAKE -v | sed -n -e 's/\(.*\) Make.*$/\1/p'"`
MAKE_MAJOR=`sh -c "$MAKE -v | sed -n  -f bin/sed_get_make_major"`
MAKE_MINOR=`sh -c "$MAKE -v | sed -n -f bin/sed_get_make_minor"`
AC_MSG_RESULT($MAKE_MAJOR.$MAKE_MINOR)
if test "$MAKE_DISTRIB" != GNU -o "$MAKE_MAJOR" -lt 3 \
   -o "$MAKE_MAJOR" = 3 -a "$MAKE_MINOR" -lt 81
then
   AC_MSG_ERROR([unsupported version; GNU Make version 3.81
                 or higher is required.]);
fi

# verbosemake feature
AC_ARG_ENABLE(
  verbosemake,
  [  --enable-verbosemake    verbose makefile commands],
  VERBOSEMAKE=$enableval,
  VERBOSEMAKE=no
)

if test "$VERBOSEMAKE" = yes ; then
  AC_MSG_RESULT(Make will be verbose.)
fi

##########################################
# Check for invalid command-line options #
##########################################
case $prefix in
  *\ * ) AC_MSG_ERROR(spaces not allowed in --prefix argument "$prefix");;
  * ) ;;
esac

#############################
# Check for Ocaml compilers #
#############################

new_section "configure ocaml compilers"

# we first look for ocamlc in the path; if not present, we fail
AC_CHECK_PROG(OCAMLC,ocamlc,ocamlc,no)
if test "$OCAMLC" = no ; then
        AC_MSG_ERROR(Cannot find ocamlc.)
fi

# we extract Ocaml version number and library path
# "sed -n" is the posix version of "sed --quiet"
AC_MSG_CHECKING(version of OCaml)
OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
AC_MSG_RESULT($OCAMLVERSION)
case $OCAMLVERSION in
  0.*|1.*|2.*|3.*)
     AC_MSG_ERROR(Incompatible OCaml version; use 4.0+ (except 4.02.2, 4.02.0 and 4.00.0).);;
   4.00.0)
     AC_MSG_ERROR(Incompatible OCaml version; use at least 4.00.1 instead.);;
   4.02.0)
     AC_MSG_ERROR(Incompatible OCaml version; use at least 4.02.1 instead.);;
   4.02.2)
     AC_MSG_ERROR(Incompatible OCaml version; use at least 4.02.3 instead.);;
   4.00.*|4.01.*)
     OCAML_ANNOT_OPTION="-bin-annot";;
   *)
     OCAML_ANNOT_OPTION="-bin-annot";;
esac

# Ocaml library path
AC_MSG_CHECKING(OCaml library path)
OCAMLLIB=`$OCAMLC -where | tr -d '\\r'`
AC_MSG_RESULT($OCAMLLIB)

# then we look for ocamlopt; if not present, we issue a warning
# if the version or the stdlib directory is not the same, we also discard it
# we set OCAMLBEST to "opt" or "byte", whether ocamlopt is available or not
AC_CHECK_PROG(OCAMLOPT,ocamlopt,ocamlopt,no)
OCAMLBEST=byte
if test "$OCAMLOPT" = no ; then
        AC_MSG_WARN(Cannot find ocamlopt; bytecode compilation only.)
else
        AC_MSG_CHECKING(ocamlopt version and standard library)
        TMPVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p'`
        if test "$TMPVERSION" != "$OCAMLVERSION" \
                -o `$OCAMLOPT -where | tr -d '\\r'` != "$OCAMLLIB"; then
            AC_MSG_RESULT(differs from ocamlc; ocamlopt discarded.)
            OCAMLOPT=no
        else
            AC_MSG_RESULT(ok)
            OCAMLBEST=opt
        fi
fi

if test "$OCAMLBEST" = "opt"; then
   LIB_SUFFIX=cmxa
   OBJ_SUFFIX=cmx;
else
   LIB_SUFFIX=cma
   OBJ_SUFFIX=cmo;
fi

# checking for ocamlc.opt
AC_CHECK_PROG(OCAMLCDOTOPT,ocamlc.opt,ocamlc.opt,no)
if test "$OCAMLCDOTOPT" != no ; then
        AC_MSG_CHECKING(ocamlc.opt version and standard library)
        TMPVERSION=`$OCAMLCDOTOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
        if test "$TMPVERSION" != "$OCAMLVERSION" \
                -o `$OCAMLCDOTOPT -where | tr -d '\\r'` != "$OCAMLLIB"; then
            AC_MSG_RESULT(differs from ocamlc; ocamlc.opt discarded.)
        else
            AC_MSG_RESULT(ok)
            OCAMLC=$OCAMLCDOTOPT
        fi
fi

# checking for ocamlopt.opt
if test "$OCAMLOPT" != no ; then
    AC_CHECK_PROG(OCAMLOPTDOTOPT,ocamlopt.opt,ocamlopt.opt,no)
    if test "$OCAMLOPTDOTOPT" != no ; then
        AC_MSG_CHECKING(ocamlc.opt version and standard library)
        TMPVER=`$OCAMLOPTDOTOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
        if test "$TMPVER" != "$OCAMLVERSION" \
                -o `$OCAMLOPTDOTOPT -where | tr -d '\\r'` != "$OCAMLLIB"; then
            AC_MSG_RESULT(differs from ocamlc; ocamlopt.opt discarded.)
        else
            AC_MSG_RESULT(ok)
            OCAMLOPT=$OCAMLOPTDOTOPT
        fi
    fi
fi

##############################################
# Check for other mandatory tools/libraries #
##############################################

new_section "configure mandatory tools and libraries"

# ocamldep
AC_CHECK_PROG(OCAMLDEP,ocamldep,ocamldep,no)
if test "$OCAMLDEP" = no ; then
        AC_MSG_ERROR(Cannot find ocamldep.)
else
    AC_CHECK_PROG(OCAMLDEPDOTOPT,ocamldep.opt,ocamldep.opt,no)
    if test "$OCAMLDEPDOTOPT" != no ; then
        OCAMLDEP=$OCAMLDEPDOTOPT
    fi
fi

# ocamllex
AC_CHECK_PROG(OCAMLLEX,ocamllex,ocamllex,no)
if test "$OCAMLLEX" = no ; then
    AC_MSG_ERROR(Cannot find ocamllex.)
else
    AC_CHECK_PROG(OCAMLLEXDOTOPT,ocamllex.opt,ocamllex.opt,no)
    if test "$OCAMLLEXDOTOPT" != no ; then
        OCAMLLEX=$OCAMLLEXDOTOPT
    fi
fi

# ocamlyacc
AC_CHECK_PROG(OCAMLYACC,ocamlyacc,ocamlyacc,no)
if test "$OCAMLYACC" = no ; then
        AC_MSG_ERROR(Cannot find ocamlyacc.)
fi

AC_CHECK_PROG(OCAMLFIND,ocamlfind,ocamlfind,no)
if test "$OCAMLFIND" = no ; then
   	AC_MSG_ERROR(Cannot find ocamlfind.)
fi

#################################################
# Check for other (optional) tools/libraries    #
#################################################

new_section "configure optional tools and libraries"

AC_CHECK_PROG(OCAMLDOC,ocamldoc,ocamldoc,no)
if test "$OCAMLDOC" = no ; then
  AC_MSG_RESULT(ocamldoc discarded not present)
else
  AC_CHECK_PROG(OCAMLDOCOPT,ocamldoc.opt,ocamldoc.opt,no)
  # Strange quantic segfault with native ocamldoc in version 4.00.0
  if test "$OCAMLDOCOPT" != no -a "$OCAMLVERSION" != 4.00.0; then
     OCAMLDOC=$OCAMLDOCOPT;
  fi
fi

AC_CHECK_PROG(OCAMLMKTOP,ocamlmktop,ocamlmktop,no)
if test "$OCAMLMKTOP" = no ; then
  AC_MSG_RESULT(Cannot find ocamlmktop: toplevels cannot be built.)
fi

# ocamlcp
AC_CHECK_PROG(OCAMLCP,ocamlcp,ocamlcp,no)
if test "$OCAMLCP" = no ; then
  AC_MSG_ERROR(Cannot find ocamlcp.)
fi

AC_CHECK_PROG(OTAGS,otags,otags,)

##############
# ocamlgraph #
##############

OCAMLGRAPH_LOCAL=""
OCAMLGRAPH_HOME=$OCAMLLIB/ocamlgraph
OCAMLGRAPH_EXISTS=no
OCAMLGRAPH_INCLUDE=
OCAMLGRAPH_CUSTOM=no

# allow local ocamlgraph
AC_ARG_ENABLE(
  local-ocamlgraph,
  [  --enable-local-ocamlgraph    force the user to use the local OcamlGraph version.
  --disable-local-ocamlgraph   force the user to use an installed OCamlGraph version.
],
  ENABLE_LOCAL_OCAMLGRAPH=$enableval,
  ENABLE_LOCAL_OCAMLGRAPH=auto, # default value
)

AC_ARG_WITH(
        ocamlgraph,
        AC_HELP_STRING(
        [--with-ocamlgraph],
        [set the directory where ocamlgraph library is to be found
         (default: search through ocamlfind or in OCaml standard library)]),
        [OCAMLGRAPH_HOME=$withval
         OCAMLGRAPH_CUSTOM=yes],
        [])

if test "$ENABLE_LOCAL_OCAMLGRAPH" != "yes"; then
  if test "$OCAMLGRAPH_CUSTOM" = "yes"; then

    # check if any ocamlgraph is installed in the right place
    AC_CHECK_FILE($OCAMLGRAPH_HOME/graph.$OBJ_SUFFIX,
                OCAMLGRAPH_EXISTS="yes" OCAMLGRAPH_INCLUDE="-I +ocamlgraph")

    if test "$OCAMLGRAPH_EXISTS" = "no" -a "$OCAMLGRAPH_CUSTOM" = "yes"; then
      AC_MSG_ERROR(
       [unable to find OCamlGraph in custom location $OCAMLGRAPH_HOME.
        Please give an appropriate value, or use default OCamlGraph library]);
    fi
  else
    OCAMLGRAPH_HOME=$($OCAMLFIND query ocamlgraph 2>/dev/null \
                            | tr -d '\r\n');
    if test "$OCAMLGRAPH_HOME" != ""; then
       OCAMLGRAPH_INCLUDE="-I $OCAMLGRAPH_HOME";
       OCAMLGRAPH_EXISTS="yes";
    else
       AC_MSG_NOTICE(no package ocamlgraph in ocamlfind)
    fi;
  fi


  ocamlgraph_error() {
    if test "$OCAMLGRAPH_CUSTOM" = "yes"; then
    AC_MSG_ERROR(
     [Custom OCamlGraph library version $OCAMLGRAPH_VERSION is incompatible with
      Frama-C. Please provide another location or use default OCamlGraph]);
    else
    AC_MSG_NOTICE([OcamlGraph $OCAMLGRAPH_VERSION is incompatible with Frama-C.])
    OCAMLGRAPH_EXISTS=no
    OCAMLGRAPH_INCLUDE=
    :;
    fi
  }

  # if any, check if it is a compatible version
  if test "$OCAMLGRAPH_EXISTS" = "yes"; then
    test_ocamlgraph_version='print_string Graph.Version.version;;'
    echo $test_ocamlgraph_version > test_ocamlgraph.ml
    if $OCAMLC -o test_ocamlgraph $OCAMLGRAPH_INCLUDE graph.cmo \
         test_ocamlgraph.ml 2> /dev/null; \
    then
      OCAMLGRAPH_VERSION=`./test_ocamlgraph`
      case $OCAMLGRAPH_VERSION in
      1.8.1 | 1.8.1+dev \
      | 1.8.2 | 1.8.2+dev \
      | 1.8.3 | 1.8.3+dev \
      | 1.8.4 | 1.8.4+dev)
        ocamlgraph_error;;
      1.8.5 | 1.8.6)
        AC_MSG_NOTICE([OcamlGraph $OCAMLGRAPH_VERSION found: great!]);;
      1.8.*)
        AC_MSG_NOTICE(
          [OcamlGraph $OCAMLGRAPH_VERSION > 1.8.5 found: should be compatible, but no warranty.
           Consider using --enable-local-ocamlgraph.]);;
      *) ocamlgraph_error;;
      esac
      if test "$OCAMLGRAPH_EXISTS" = "yes"; then # current version is ok
        if test "$OCAMLBEST" = "opt"; then
          if $OCAMLOPT -o test_ocamlgraph $OCAMLGRAPH_INCLUDE graph.cmxa \
            test_ocamlgraph.ml 2> /dev/null; \
          then
            AC_MSG_NOTICE([OcamlGraph native version is ok])
          else
            AC_MSG_NOTICE([OcamlGraph native version is not ok])
            ocamlgraph_error
          fi
        else
          ocamlgraph_error
        fi
      fi
    else
      ocamlgraph_error
    fi
    rm -f test_ocamlgraph test_ocamlgraph.ml test_ocamlgraph.cm*
  fi
fi; # ENABLE_LOCAL_OCAMLGRAPH != yes

# revert back to local version of ocamlgraph
if test "$OCAMLGRAPH_EXISTS" = "no"; then
  if test "$ENABLE_LOCAL_OCAMLGRAPH" != "no"; then
    AC_MSG_NOTICE([switching to OcamlGraph provided by Frama-C])
    OCAMLGRAPH_LOCAL=ocamlgraph
    OCAMLGRAPH_HOME=

    AC_CHECK_FILE($OCAMLGRAPH_LOCAL,OCAMLGRAPH_EXISTS=yes)
    if test "$OCAMLGRAPH_EXISTS" = "no"; then
      AC_CHECK_FILE(ocamlgraph.tar.gz,OCAMLGRAPH_EXISTS=yes)
      if test "$OCAMLGRAPH_EXISTS" = "yes"; then
        # ocamlgraph.tar.gz exists, but no directory ocamlgraph
        AC_MSG_NOTICE([unarchiving ocamlgraph.tar.gz])
        tar zxf ocamlgraph.tar.gz
      else
        # neither directory ocamlgraph, nor ocamlgraph.tar.gz exists
        # broken distrib indeed
        AC_MSG_ERROR([cannot find OcamlGraph in the current directory.
   Quite strange: would your Frama-C distribution be corrupted?
   Anyway:
   1. download the latest version from http://ocamlgraph.lri.fr/download
   2. install it by './configure && make && make install'
   3. rerun ./configure here])
      fi
    else
      AC_CHECK_FILE(ocamlgraph.tar.gz,OCAMLGRAPH_TAR=yes)
      if test "$OCAMLGRAPH_TAR" = "yes"; then
        # both directory ocamlgraph and ocamlgraph.tar.gz exist at the same time
        # untar only if the tar is newer than the directory
        if test ocamlgraph.tar.gz -nt ocamlgraph; then
          AC_MSG_NOTICE([find a newer OcamlGraph version: OcamlGraph updated!])
          rm -rf ocamlgraph
          tar zxf ocamlgraph.tar.gz
        fi
      fi
    fi

    # Anyway reconfigure OcamlGraph while reconfiguring Frama-C
    AC_MSG_NOTICE([configuring ocamlgraph...])
    (cd $OCAMLGRAPH_LOCAL && ./configure > /dev/null)
  else # --disable-local-ocamlgraph
    AC_MSG_ERROR([cannot find a compatible OCamlGraph version on your system \
and usage of local version explicitely prohibited by \
--disable-local-ocamlgraph option.
Please consider allowing local compilation of ocamlgraph \
or use --with-ocamlgraph to explicitely \
point to an appropriate installation directory.])
  fi
fi

# zarith
########

AC_ARG_ENABLE(
  zarith,
  [  --enable-zarith=<dir> use ZArith library],
  ZARITH_PATH=$enableval,)

AC_MSG_CHECKING(for Zarith)

if test -z "$ZARITH_PATH"; then
  # standard installation procedure of zarith diverges according to
  # ocamlfind installation (see zarith's README)
    ZARITH_PATH=$($OCAMLFIND query zarith 2>/dev/null | tr -d '\r\n')
    if test -z "$ZARITH_PATH"; then
      HAS_ZARITH="no";
    else
      HAS_ZARITH="yes";
    fi;
  if test "$HAS_ZARITH" = "no"; then
    AC_MSG_WARN(Zarith not found: will use the default less efficient library instead)
  else
    AC_MSG_RESULT(found)
  fi
else
  AC_CHECK_FILE($ZARITH_PATH/zarith.$LIB_SUFFIX,HAS_ZARITH=yes,HAS_ZARITH=no)
  if test "$HAS_ZARITH" = "no"; then
    AC_MSG_ERROR(Zarith: file $ZARITH_PATH/zarith.$LIB_SUFFIX not found.)
  else
    AC_MSG_RESULT(found)
  fi
fi

# apron
########

AC_MSG_CHECKING(for Apron)

APRON_PATH=$($OCAMLFIND query apron 2>/dev/null | tr -d '\r\n')
if test -f "$APRON_PATH/apron.cmxs"; then
  HAS_APRON="yes";
  AC_MSG_RESULT(found)
else
  HAS_APRON="no";
  AC_MSG_RESULT(not found. The corresponding domains won't be available in Eva)
fi;


############
# Platform #
############

new_section "configure platform"

AC_MSG_CHECKING(platform)
# get Sys.os_type as OCAML_OS_TYPE
echo "let () = print_string Sys.os_type;;" > test_os_type.ml
$OCAMLC -o test_os_type test_os_type.ml
OCAML_OS_TYPE=$(./test_os_type)
rm -f test_os_type.cmi  test_os_type.cmo  test_os_type.ml test_os_type

if test "$OCAML_OS_TYPE" = "Win32"; then
  AC_MSG_RESULT(Win32)
  AC_CHECK_PROG(CYGPATH,cygpath,cygpath,no)
  OCAMLWIN32=yes
  EXE=.exe
  # OCaml on Win32 does not support vmthreads, use native ones.
  HAS_NATIVE_THREADS=yes
else
  OCAMLWIN32=no
  if test "$OCAML_OS_TYPE" = "Cygwin"; then
    AC_MSG_RESULT(Cygwin)
    EXE=.exe
  else
    AC_MSG_RESULT(Unix)
    EXE=
  fi

  # OCaml native threads
  AC_MSG_CHECKING([OCaml native threads])
  echo "let f = Thread.create (fun () -> ())" > test_native_threads.ml
  if ($OCAMLOPT -thread -o test_native_threads unix.cmxa threads.cmxa \
      test_native_threads.ml) 2> /dev/null ; \
  then
    HAS_NATIVE_THREADS=yes
    AC_MSG_RESULT([ok.])
  else
    HAS_NATIVE_THREADS=no
    AC_MSG_WARN([unsupported.])
  fi
  rm -f test_native_threads*
fi

# C and POSIX standard headers used by C bindings.
AC_LANG([C])

AC_ARG_WITH(cc,[specifies a custom C compiler and pre-processor],[CC=$withval])

AC_PROG_CC

AC_CHECK_HEADERS(stdlib.h)
AC_CHECK_HEADERS(assert.h)
AC_CHECK_HEADERS(float.h)
AC_CHECK_HEADERS(math.h)

AC_CHECK_HEADERS(signal.h)

AC_CHECK_HEADERS(unistd.h)

# Local machdep feature (to generate new platforms)
AC_ARG_ENABLE(
  localmachdep,
  [  --enable-localmachdep    enable local machdep configuration],
  LOCAL_MACHDEP=$enableval,
  LOCAL_MACHDEP=no)

if test "$LOCAL_MACHDEP" = yes ; then

AC_CONFIG_HEADER(config.h)
AC_CHECK_HEADERS(wchar.h)

# Find out the true definitions of some integer types
# checkIntegerype(size_t) will echo "int" or "long"
checkIntegerType() {
  fn="testtype.c"
  fo="testtype.o"
  for t in "int" "unsigned int" "long" "unsigned long" "short" "unsigned short" "char" "unsigned  char" ;do
     echo "#include <stddef.h>" >$fn
     echo "#include <wchar.h>" >>$fn
     # We define a prototype with one type and the function with
     # another type. This will result in compilation error
     # unless the types are really identical
     echo "$t foo($t x);"      >>$fn
     echo "$1 foo($1 x) { return x;}" >>$fn
     if gcc -c $fn 2>/dev/null ;then
        # Found it
        echo $t
        rm -f $fn $fo
        return
     fi
  done
  rm -f $fn $fo
}

AC_MSG_CHECKING([definition of size_t])
TYPE_SIZE_T=`checkIntegerType "size_t"`
if test "x$TYPE_SIZE_T" = "x" ;then
  AC_MSG_ERROR([Cannot find definition of size_t])
fi
AC_DEFINE_UNQUOTED(TYPE_SIZE_T, "$TYPE_SIZE_T")
AC_MSG_RESULT([$TYPE_SIZE_T])

AC_MSG_CHECKING([definition of wchar_t])
TYPE_WCHAR_T=`checkIntegerType "wchar_t"`
if test "x$TYPE_WCHAR_T" = "x" ;then
  AC_MSG_ERROR([Cannot find definition of wchar_t])
fi
AC_DEFINE_UNQUOTED(TYPE_WCHAR_T, "$TYPE_WCHAR_T")
AC_MSG_RESULT([$TYPE_WCHAR_T])

AC_MSG_CHECKING([definition of ptrdiff_t])
TYPE_PTRDIFF_T=`checkIntegerType "ptrdiff_t"`
if test "x$TYPE_PTRDIFF_T" = "x" ;then
  AC_MSG_ERROR([Cannot find definition of ptrdiff_t])
fi
AC_DEFINE_UNQUOTED(TYPE_PTRDIFF_T, "$TYPE_PTRDIFF_T")
AC_MSG_RESULT([$TYPE_PTRDIFF_T])

AC_MSG_CHECKING([for gcc version])
AC_CHECK_TYPE(__builtin_va_list,
              HAVE_BUILTIN_VA_LIST=true,
              HAVE_BUILTIN_VA_LIST=false)
if test "$HAVE_BUILTIN_VA_LIST" = "true" ;then
   AC_DEFINE_UNQUOTED(HAVE_BUILTIN_VA_LIST, 1)
fi

AC_MSG_CHECKING([if __thread is a keyword])
AC_COMPILE_IFELSE([AC_LANG_SOURCE([int main(int __thread) { return 0; }])],
                  THREAD_IS_KEYWORD=false,
                  THREAD_IS_KEYWORD=true)
AC_MSG_RESULT($THREAD_IS_KEYWORD)
if test "$THREAD_IS_KEYWORD" = "true" ;then
   AC_DEFINE_UNQUOTED(THREAD_IS_KEYWORD, 1)
fi

# Does gcc add underscores to identifiers to make assembly labels?
# (I think MSVC always does)
AC_MSG_CHECKING([if gcc adds underscores to assembly labels.])
AC_LINK_IFELSE([AC_LANG_SOURCE([int main() { __asm__("jmp _main"); }])],
                  UNDERSCORE_NAME=true,
                  UNDERSCORE_NAME=false)
AC_MSG_RESULT($UNDERSCORE_NAME)
if test "$UNDERSCORE_NAME" = "true" ;then
   AC_DEFINE_UNQUOTED(UNDERSCORE_NAME, 1)
fi

fi # local machdep configuration

###################################
# Frama-C's pre-processor support #
###################################

# Specific preprocessor support
AC_ARG_WITH(
        cpp,
        [  --with-cpp             customize defaut preprocessor for Frama-C],
        [FRAMAC_DEFAULT_CPP=$withval],
        [FRAMAC_DEFAULT_CPP=])

# if no specific pre-processor has been given, check whether we can use
# $CC. Note that we want to keep comments in the output, so that AC_PROG_CPP
# alone is not sufficient.
  if test -z "$FRAMAC_DEFAULT_CPP"; then
    AC_PROG_CPP
    CPPFLAGS="-C -I.";
    if test -n "$GCC"; then FRAMAC_GNU_CPP=true; else FRAMAC_GNU_CPP=false; fi
  else
    CPP=$FRAMAC_DEFAULT_CPP;
    FRAMAC_GNU_CPP=true;
    CPPFLAGS="-dD -nostdinc"
    AC_PREPROC_IFELSE(
        [AC_LANG_SOURCE([#define foo 0
                         /* foo */
                         ])],
        FRAMAC_GNU_CPP=true,
        FRAMAC_GNU_CPP=false)
    CPPFLAGS=
  fi
  AC_PREPROC_IFELSE(
    [AC_LANG_SOURCE([/* Check whether comments are kept in output */])],
    [if test -e conftest.i; then
      if grep -e kept conftest.i; then
      FRAMAC_DEFAULT_CPP="$CPP $CPPFLAGS";
      DEFAULT_CPP_KEEP_COMMENTS=true;
     else
      AC_MSG_WARN([Default pre-processing command '$CPP' do not preserve
                     comments. Please define an appropriate pre-processor
                   with --with-cpp, or you will only be able to use ACSL
                   annotations in already pre-processed files])
      FRAMAC_DEFAULT_CPP=$CPP;
      DEFAULT_CPP_KEEP_COMMENTS=false;
      fi;
      else # handling old version of autoconf (<2.67) that does not keep
           # preprocessor result in conftest.i
        AC_MSG_WARN([Unable to check whether $CPP preserves comments.
                     Assuming everything is fine])
        FRAMAC_DEFAULT_CPP="$CPP $CPPFLAGS";
        DEFAULT_CPP_KEEP_COMMENTS=true;
      fi
    ],
     [AC_MSG_WARN([Unable to find a working pre-processor.
                   Please define one with --with-cpp, or you will be able
                   to launch Frama-C only on pre-processed files])];
      FRAMAC_DEFAULT_CPP="";
      DEFAULT_CPP_KEEP_COMMENTS=false;
    )

AC_MSG_RESULT(Default preprocessor is '$FRAMAC_DEFAULT_CPP'.)

#################
# Plugin wished #
#################

new_section "wished frama-c plug-ins"

# Option -with-all-static
#######################

define([ALL_STATIC_HELP],
       AC_HELP_STRING([--with-all-static],
                      [link all plug-ins statically (default: no)]))
AC_ARG_WITH(all-static,ALL_STATIC_HELP,IS_ALL_STATIC=$withval)

# Option -with-no-plugin
#######################

define([NO_PLUGIN_HELP],
       AC_HELP_STRING([--with-no-plugin],
                      [disable all plug-ins (default: no)]))

AC_ARG_WITH(no-plugin,NO_PLUGIN_HELP,[ONLY_KERNEL=$withval],[ONLY_KERNEL=no])

# library declarations
######################

# REQUIRE_LIBRARY: library *must* be present in order to build plugins
# USE_LIBRARY: better for plugins if library is present, but not required
# HAS_LIBRARY: is the library available?

REQUIRE_LABLGTK=
USE_LABLGTK=
HAS_LABLGTK=

REQUIRE_NATIVE_DYNLINK=
USE_NATIVE_DYNLINK=
HAS_NATIVE_DYNLINK=uncheck

# Tool declarations
####################

DOT=
REQUIRE_DOT=
USE_DOT=
HAS_DOT=

### Now plugin declarations

PLUGINS_FORCE_LIST=

###############################################################################
#                                                                             #
####################                                                          #
# Plug-in sections #                                                          #
####################                                                          #
#                                                                             #
# For 'internal' developpers:                                                 #
# Add your own plug-in here                                                   #
#                                                                             #
###############################################################################

# callgraph
###########

check_plugin(callgraph, src/plugins/callgraph,
             [support for callgraph plugin], yes, yes)

plugin_use_external(callgraph,dot)
plugin_use(callgraph,gui)
plugin_use(callgraph,value_analysis)

# constant propagation
######################

check_plugin(semantic_constant_folding, src/plugins/constant_propagation,
             [support for constant propagation plugin],yes,yes)

plugin_require(semantic_constant_folding,value_analysis)

# from
######

check_plugin(from_analysis,src/plugins/from,[support for from analysis],yes,yes)

plugin_require(from_analysis,value_analysis)
plugin_require(from_analysis,callgraph)

# gui
#####

check_plugin(gui,src/plugins/gui,[support for gui],yes,no)

plugin_require_external(gui,lablgtk)
plugin_require_external(gui,gnomecanvas)
plugin_require_external(gui,gtksourceview)
plugin_use_external(gui,dot)

# impact
########

check_plugin(impact,src/plugins/impact,[support for impact plugin],yes,yes)

plugin_use(impact,gui)
plugin_use(impact,slicing)
plugin_require(impact,pdg)
plugin_require(impact,value_analysis)
plugin_require(impact,inout)

# inout
#######

check_plugin(inout,src/plugins/inout,[support for inout analysis],yes,yes)
plugin_require(inout,from_analysis)
plugin_require(inout,value_analysis)
plugin_require(inout,callgraph)

# metrics
#########

check_plugin(metrics,src/plugins/metrics,[support for metrics analysis],yes,yes)
plugin_use(metrics,value_analysis)
plugin_use(metrics,gui)

# occurrence
############

check_plugin(occurrence,src/plugins/occurrence,
             [support for occurrence analysis],yes,yes)
plugin_use(occurrence,gui)
plugin_require(occurrence,value_analysis)

# pdg
#####

check_plugin(pdg,src/plugins/pdg,[support for pdg plugin],yes,yes,pdg_types)
plugin_require(pdg,from_analysis)
plugin_require(pdg,value_analysis)
plugin_require(pdg,callgraph)

# postdominators
################

check_plugin(postdominators,src/plugins/postdominators,
             [support for postdominators plugin],yes,no)

# rte
#####

check_plugin(rtegen,src/plugins/rte,
             [support for runtime error annotation],yes,no)

# scope
############

check_plugin(scope,src/plugins/scope,[support for scope plugin],yes,yes)
plugin_require(scope,postdominators)
plugin_require(scope,value_analysis)
plugin_require(scope,from_analysis)
plugin_require(scope,pdg)
plugin_use(scope,gui)

# slicing
#########

check_plugin(slicing,src/plugins/slicing,[support for slicing plugin],yes,yes,
             src/slicing_types)
plugin_require(slicing,from_analysis)
plugin_require(slicing,pdg)
plugin_require(slicing,value_analysis)
plugin_require(slicing,callgraph)
plugin_use(slicing,gui)

# spare code
############

check_plugin(sparecode,src/plugins/sparecode,
             [support for sparecode plugin],yes,yes)
plugin_require(sparecode,pdg)
plugin_require(sparecode,value_analysis)

# users
#######

check_plugin(users,src/plugins/users,[support for users analysis],yes,yes)
plugin_require(users,value_analysis)
plugin_use(users,callgraph)

# value
#######

check_plugin(value_analysis,src/plugins/value,
             [support for value analysis],yes,yes)
plugin_use(value_analysis,gui)
plugin_use(value_analysis,scope)
plugin_use(value_analysis,callgraph)

####################
# External plugins #
####################

EXTRA_EXTERNAL_PLUGINS=

AC_ARG_ENABLE(external,
[[  --enable-external=plugin
                          allows to compile directly from Frama-C kernel
                          some external plug-ins.]],
[
 for dir in $enableval; do
  if test -d $dir; then
    AC_MSG_NOTICE([external plug-in $dir found.])
    EXTRA_EXTERNAL_PLUGINS="$EXTRA_EXTERNAL_PLUGINS $dir"
    olddir=$(pwd)
    cd $dir;
    if test -x ./configure; then
      new_section "configure plug-in $dir"
      ./configure --prefix=$prefix --datarootdir=$datarootdir \
        --exec_prefix=$exec_prefix --bindir=$bindir --libdir=$datadir/frama-c \
        --host=$host --build=$build --mandir=$mandir \
      || \
      AC_MSG_ERROR([cannot configure requested external plugin in $dir])
     fi;
     cd $olddir
  else
    AC_MSG_ERROR([--enable-external expects an existing directory as argument.])
  fi;
 done
])

AC_FOREACH([__plugin],m4_esyscmd([ls src/plugins]),
  [ m4_if(m4_index(KNOWN_SRC_DIRS,__plugin),[-1],
      [ m4_syscmd(test -r src/plugins/__plugin/configure.in)
        m4_define([is_configure_in],m4_sysval)
        m4_syscmd(test -r src/plugins/__plugin/configure.ac)
        m4_define([is_configure_ac],m4_sysval)
        m4_define([config_file],
          [m4_if(is_configure_in,0,src/plugins/__plugin/configure.in,
             m4_if(is_configure_ac,0,src/plugins/__plugin/configure.ac,no))])
        m4_if(config_file,[no],
          [ m4_syscmd(test -r src/plugins/__plugin/Makefile)
            m4_if(m4_sysval,[0],
              [ m4_syscmd(test "$DISTRIB_CONF" = "yes" && \
                           grep -q -e "PLUGIN_DISTRIBUTED *:= *no" \
                                src/plugins/__plugin/Makefile
                           )
                m4_if(m4_sysval,[0],,
                      [ check_plugin(__plugin,src/plugins/__plugin,
                         [support for __plugin plug-in],yes,yes)
                      if test "$[ENABLE_]tovarname(__plugin)" != "no"; then
                         EXTERNAL_PLUGINS="$EXTERNAL_PLUGINS src/plugins/__plugin";
                      fi])])],
          [ m4_syscmd(test "$DISTRIB_CONF" = "yes" && \
                      grep -q -e "PLUGIN_DISTRIBUTED:=no" \
                            src/plugins/__plugin/Makefile.in)
            m4_if(m4_sysval,[0],,
              [ m4_define([plugin_prefix],src/plugins/__plugin)
                m4_include(config_file)
                m4_syscmd(cd src/plugins/__plugin && \
                          [FRAMAC_SHARE]=../../../share autoconf)])
          ])
      ])
  ])

#####################################################
# Check for tools/libraries requirements of plugins #
#####################################################

new_section "configure tools and libraries used by some plug-ins"

# lablgtk2
##########

REQUIRE_LABLGTK="$REQUIRE_LABLGTK$REQUIRE_GNOMECANVAS"
USE_LABLGTK="$USE_LABLGTK$USE_GNOMECANVAS"

  LABLGTK_PATH=`ocamlfind query lablgtk2 | tr -d '\\r\\n'`
  if test "$LABLGTK_PATH" = "" -o "$LABLGTK_PATH" -ef "$OCAMLLIB/lablgtk2" ; then
     echo "Ocamlfind -> using +lablgtk2.($LABLGTK_PATH,$OCAMLLIB/lablgtk2)"
     LABLGTK_PATH=+lablgtk2
     LABLGTKPATH_FOR_CONFIGURE=$OCAMLLIB/lablgtk2
  else
     echo "Ocamlfind -> using $LABLGTK_PATH"
     LABLGTKPATH_FOR_CONFIGURE=$LABLGTK_PATH
  fi

configure_library([GTKSOURCEVIEW],
                  [$LABLGTKPATH_FOR_CONFIGURE/lablgtksourceview2.$LIB_SUFFIX],
                  [lablgtksourceview2.$LIB_SUFFIX not found],
                  no)

configure_library([GNOMECANVAS],
                  [$LABLGTKPATH_FOR_CONFIGURE/lablgnomecanvas.$LIB_SUFFIX],
                  [lablgnomecanvas.$LIB_SUFFIX not found],
                  no)

configure_library([LABLGTK],
                  [$LABLGTKPATH_FOR_CONFIGURE/lablgtk.$LIB_SUFFIX],
                  [$LABLGTKPATH_FOR_CONFIGURE/lablgtk.$LIB_SUFFIX not found.],
                  no)

# dot and xdot tools
####################

configure_tool([DOT],[dot],[dot not found: you should install GraphViz],no)

# Native dynlink
################

define([force_static_plugins],
  [# compile statically all dynamic plug-ins
   # except contrary instructions
   [USE_NATIVE_DYNLINK]="";
   for plugin in m4_flatten(PLUGINS_LIST); do
     n=NAME_$plugin
     d=DYNAMIC_$plugin
     s=STATIC_$plugin
     eval np=\$$n
     eval dp=\$$d
     eval sp=\$$s
     if test "$dp" = "yes"; then
       if test "$sp" = "no"; then
         # force to be dynamic
         USE_NATIVE_DYNLINK="${USE_NATIVE_DYNLINK} $np";
       else
         eval STATIC_$plugin=yes;
         eval DYNAMIC_$plugin=no;
       fi
     fi
   done])

configure_library([NATIVE_DYNLINK],
                  [$OCAMLLIB/dynlink.cmxa],
                  [native dynlink unavailable],
                  yes,
                  [force_static_plugins])

# Checking some other things which cannot be done too early
###########################################################

# Usable native dynlink

# Checking internal invariant
if test "$HAS_NATIVE_DYNLINK" = "uncheck"; then
   AC_MSG_ERROR([Internal error with check of native dynlink. Please report.])
fi

HAS_USABLE_NATIVE_DYNLINK=no

if test "$HAS_NATIVE_DYNLINK" != "no" ; then
  echo "let f x y = Dynlink.loadfile \"foo\"; ignore (Dynlink.is_native); abs_float (x -. y)" > test_dynlink.ml
  if ($OCAMLOPT -shared -linkall -o test_dynlink.cmxs test_dynlink.ml) \
    2> /dev/null ; \
  then
    HAS_USABLE_NATIVE_DYNLINK=yes
    AC_MSG_RESULT([native dynlink works fine. Great.])
  else
    REQUIRE_USABLE_NATIVE_DYNLINK=$REQUIRE_NATIVE_DYNLINK
    USE_USABLE_NATIVE_DYNLINK=$USE_NATIVE_DYNLINK
    HAS_USABLE_NATIVE_DYNLINK=no
#   we know that dynlink does not work:
#   configure a dummy library "dynlink" in order to
#   configure plug-ins depending on dynlink in a proper way
    configure_library([USABLE_NATIVE_DYNLINK],
                      [dynlink],
                      [native dynlink unsupported on this platform],
                      yes,
                      [force_static_plugins])
  fi
  rm -f test_dynlink.*
fi

# Native version of ptests can be used only if
# - a native compiler exists
# - native dynlink is usable
# - native threads are usable

PTESTSBEST=byte
if test \
     "$OCAMLBEST" = "opt" -a \
     "$HAS_USABLE_NATIVE_DYNLINK" = "yes" -a \
     "$HAS_NATIVE_THREADS" = "yes"; \
then
   PTESTSBEST=opt;
fi

########################
# Plug-in dependencies #
########################

new_section "checking for plug-in dependencies"

check_frama_c_dependencies

############################
# Substitutions to perform #
############################

EXTERNAL_PLUGINS="${EXTERNAL_PLUGINS} ${EXTRA_EXTERNAL_PLUGINS}"

AC_SUBST(VERBOSEMAKE)
AC_SUBST(DOT)
AC_SUBST(HAS_DOT)
AC_SUBST(HAS_ZARITH)
AC_SUBST(ZARITH_PATH)
AC_SUBST(HAS_APRON)
AC_SUBST(APRON_PATH)
AC_SUBST(OCAMLGRAPH_INCLUDE)
AC_SUBST(OCAMLGRAPH_LOCAL)
AC_SUBST(OCAMLGRAPH_HOME)
AC_SUBST(OCAMLBEST)
AC_SUBST(OCAMLVERSION)
AC_SUBST(OCAMLLIB)
AC_SUBST(OCAMLWIN32)
AC_SUBST(OCAML_ANNOT_OPTION)
AC_SUBST(EXE)

AC_SUBST(HAVE_STDLIB_H)
AC_SUBST(HAVE_WCHAR_H)
AC_SUBST(HAVE_PTRDIFF_H)
AC_SUBST(HAVE_BUILTIN_VA_LIST)
AC_SUBST(THREAD_IS_KEYWORD)
AC_SUBST(UNDERSCORE_NAME)
AC_SUBST(CYCLES_PER_USEC)
AC_SUBST(LOCAL_MACHDEP)
AC_SUBST(datarootdir)
AC_SUBST(FRAMAC_DEFAULT_CPP)
AC_SUBST(FRAMAC_GNU_CPP)
AC_SUBST(DEFAULT_CPP_KEEP_COMMENTS)
AC_SUBST(CC)

AC_SUBST(EXTERNAL_PLUGINS)

AC_SUBST(HAS_USABLE_NATIVE_DYNLINK)
AC_SUBST(HAS_NATIVE_THREADS)
AC_SUBST(PTESTSBEST)
AC_SUBST(LABLGTK_PATH)

# m4_foreach_w is not supported in some old autoconf versions.
# Sadly AC_FOREACH is deprecated now...
AC_FOREACH([p],PLUGINS_LIST,
        [AC_SUBST([ENABLE_]p)
        AC_SUBST([DYNAMIC_]p)
        ])

################################################
# Finally create the Makefile from Makefile.in #
################################################

new_section "creating makefile"

AC_CONFIG_FILES([share/Makefile.config], [chmod a-w share/Makefile.config])

AC_OUTPUT()

###########
# Summary #
###########

new_section "summary: plug-ins available"

for plugin in m4_flatten(PLUGINS_LIST); do
  n=NAME_$plugin
  e=ENABLE_$plugin
  d=DYNAMIC_$plugin
  s=STATIC_$plugin
  i=INFO_$plugin
  eval nv=\$$n
  eval ev=\$$e
  eval dv=\$$d
  eval sv=\$$s
  eval iv=\$$i
  if test "$ev" = "no"; then
    res=$ev;
  elif test "$dv" = "yes"; then
    res="$ev, dynamic";
  elif test "$sv" = "yes"; then
    res="$ev, static";
  else
    res=$ev;
  fi
  AC_MSG_NOTICE([$nv: $res$iv])
done

if test "$EXTRA_EXTERNAL_PLUGINS" != ""; then
  new_section "summary: requested external plugins"
fi

for plugin in $EXTRA_EXTERNAL_PLUGINS; do
  AC_MSG_NOTICE([$plugin])
done
