.\"------------------------------------------------------------------------
.\"                                                                        
.\"  This file is part of Frama-C.                                         
.\"                                                                        
.\"  Copyright (C) 2007-2019                                               
.\"    CEA (Commissariat à l'énergie atomique et aux énergies              
.\"         alternatives)                                                  
.\"                                                                        
.\"  you can redistribute it and/or modify it under the terms of the GNU   
.\"  Lesser General Public License as published by the Free Software       
.\"  Foundation, version 2.1.                                              
.\"                                                                        
.\"  It is distributed in the hope that it will be useful,                 
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of        
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
.\"  GNU Lesser General Public License for more details.                   
.\"                                                                        
.\"  See the GNU Lesser General Public License version 2.1                 
.\"  for more details (enclosed in the file licenses/LGPLv2.1).            
.\"                                                                        
.\"------------------------------------------------------------------------

.\" DO NOT EDIT THIS FILE!
.\" This man file has been generated from a Markdown file (frama-c.1.md)
.\" using pandoc 2.0 or newer. To modify this file, edit the Markdown file
.\" and run `make man/frama-c.1`.

.TH FRAMA-C 1 2019-07-29
.SH NAME
.PP
frama\-c[.byte] \- a static analyzer for C programs
.PP
frama\-c\-gui[.byte] \- the graphical interface of frama\-c
.SH SYNOPSIS
.PP
\f[B]frama\-c\f[] [ \f[I]options\f[] ] \f[I]files\f[]
.SH DESCRIPTION
.PP
\f[B]frama\-c\f[] is a suite of tools dedicated to the analysis of
source code written in C.
It gathers several analysis techniques in a single collaborative
framework.
This framework can be extended by additional plugins placed in the
\f[B]$FRAMAC_PLUGIN\f[] directory.
The command
.RS
.PP
frama\-c \-\-plugins
.RE
.PP
will provide the full list of the plugins that are currently installed.
.PP
\f[B]frama\-c\-gui\f[] is the graphical user interface of
\f[B]frama\-c\f[].
It features the same options as the command\-line version.
.PP
\f[B]frama\-c.byte\f[] and \f[B]frama\-c\-gui.byte\f[] are the OCaml
bytecode versions of the command\-line and graphical user interface
respectively.
.PP
By default, Frama\-C recognizes \f[I].c\f[] files as C files needing
pre\-processing and \f[I].i\f[] files as C files having been already
pre\-processed.
Some plugins may extend the list of recognized files.
Pre\-processing can be customized through the \f[B]\-cpp\-command\f[]
and \f[B]\-cpp\-extra\-args\f[] options.
.SH OPTIONS
.SS Syntax
.PP
Options taking an additional parameter can also be written under the
form
.RS
.PP
\-\f[I]option\f[]=\f[I]param\f[]
.RE
.PP
This form is mandatory when \f[I]param\f[] starts with a dash (`\-').
.PP
Most options that take no parameter have a corresponding
.RS
.PP
\-no\-\f[I]option\f[]
.RE
.PP
option which has the opposite effect.
.SS Help options
.TP
.B \-help
gives a short usage notice.
.RS
.RE
.TP
.B \-kernel\-help
prints the list of options recognized by Frama\-C's kernel
.RS
.RE
.TP
.B \-verbose \f[I]n\f[]
sets verbosity level.
Defaults to 1.
Setting it to 0 will output less progress messages.
This level can also be set on a per\-\f[I]plugin\f[] basis, with option
\-\f[I]plugin\f[]\-\f[B]verbose\f[] \f[I]n\f[].
Verbosity level of the kernel can be controlled with option
\f[B]\-kernel\-verbose\f[] \f[I]n\f[].
.RS
.RE
.TP
.B \-debug \f[I]n\f[]
sets debugging level.
Defaults to 0, meaning no debugging messages.
This option has the same per\-plugin (and kernel) specializations as
\f[B]\-verbose\f[].
.RS
.RE
.TP
.B \-quiet
sets verbosity and debugging level to 0.
.RS
.RE
.SS Options controlling Frama\-C's kernel
.TP
.B \-absolute\-valid\-range \f[I]min\-max\f[]
considers that all numerical addresses in the range \f[I]min\-max\f[]
are valid.
Bounds are parsed as OCaml integer constants.
By default, all numerical addresses are considered invalid.
.RS
.RE
.TP
.B \-add\-path \f[I]p1[,p2[\&...,pn]]\f[]
adds directories \f[I]p1\f[] through \f[I]pn\f[] to the list of
directories in which plugins are searched.
.RS
.RE
.TP
.B [\-no]\-aggressive\-merging
merges function definitions modulo renaming.
Defaults to no.
.RS
.RE
.TP
.B [\-no]\-allow\-duplication
allows duplication of small blocks during normalization of tests and
loops.
Otherwise, normalization uses labels and gotos.
Bigger blocks and blocks with non\-trivial control flow are never
duplicated.
Defaults to yes.
.RS
.RE
.TP
.B [\-no]\-annot
reads ACSL annotations.
This is the default.
Annotations are pre\-processed by default.
Use \-no\-pp\-annot if you don't want to expand macros in annotations.
.RS
.RE
.TP
.B \-big\-ints\-hex \f[I]max\f[]
integers larger than \f[I]max\f[] are displayed in hexadecimal (by
default, all integers are displayed in decimal).
.RS
.RE
.TP
.B \-check
performs integrity checks on the internal AST (for developers only).
.RS
.RE
.TP
.B [\-no]\-asm\-contracts
generates contracts for assembly code written according to gcc's
extended syntax.
Defaults to yes.
.RS
.RE
.TP
.B [\-no]\-asm\-contracts\-auto\-validate
automatically marks contracts generated from asm as valid.
Defaults to no.
.RS
.RE
.TP
.B \-c11
enables (partial) C11 compatibility, e.g.\ typedef redefinitions.
Defaults to no.
.RS
.RE
.TP
.B [\-no]\-collapse\-call\-cast
allows implicit cast between the value returned by a function and the
lvalue it is assigned to.
Otherwise, a temporary variable is used and the cast is made explicit.
Defaults to yes.
.RS
.RE
.TP
.B [\-no]\-constfold
folds all syntactically constant expressions in the code before
analyses.
Defaults to no.
.RS
.RE
.TP
.B \-const\-readonly
variables with const qualifier must be actually constant.
Defaults to yes.
The opposite option is \f[B]\-unsafe\-writable\f[].
.RS
.RE
.TP
.B [\-no]\-continue\-annot\-error
when analyzing an annotation, the default behavior (the \f[B]\-no\f[]
version of this option) when a typechecking error occurs is to reject
the source file as is the case for typechecking errors within the C
code.
With this option on, the typechecker will only output a warning and
discard the annotation but type‐checking will continue (errors in C code
are still fatal, though).
.PD 0
.P
.PD
\f[B]Deprecated\f[]: use \f[B]\-kernel\-warn\-key annot\-error\f[]
instead.
.RS
.RE
.TP
.B \-cpp\-command \f[I]cmd\f[]
uses \f[I]cmd\f[] as the command to pre\-process C files.
Defaults to the \f[B]CPP\f[] environment variable or to
.RS
.RE
.RS
.PP
gcc \-C \-E \-I.
.RE
.PP
if it is not set.
If unset, the command is built as follows:
.RS
.PP
CPP \-o
.RE
.PP
\f[I]%1\f[] and \f[I]%2\f[] can be used into the \f[B]CPP\f[] string to
mark the position of \f[I]\f[] and \f[I]\f[] respectively.
Note that this option is often better replaced by
\f[B]\-cpp\-extra\-args\f[].
.TP
.B \-cpp\-extra\-args \f[I]args\f[]
gives additional arguments to the pre\-processor.
Pre\-processing annotations is done in two separate pre\-processing
stages.
The first one is a normal pass on the C code which retains macro
definitions.
These are then used in the second pass during which annotations are
pre\-processed.
\f[I]args\f[] are used only for the first pass, so that arguments that
should not be used twice (such as additional include directives or macro
definitions) must thus go there instead of \f[B]\-cpp\-command\f[].
.RS
.RE
.TP
.B [\-no]\-cpp\-frama\-c\-compliant
indicates that the chosen preprocessor complies to some Frama\-C
requirements, such as accepting the same set of options as GNU cpp, and
accepting architecture\-specific options such as \-m32/\-m64.
Default values depend on the installed preprocessor at configure time.
See also \f[B]\-pp\-annot\f[].
.RS
.RE
.TP
.B [\-no]\-autoload\-plugins
when on, load all the dynamic plugins found in the search path (see
\f[B]\-print\-plugin\-path\f[] for more information on the default
search path).
Otherwise, only plugins requested by \f[B]\-load\-module\f[] will be
loaded.
Defaults to on.
.RS
.RE
.TP
.B \-enums \f[I]repr\f[]
choose the way the representation of enumerated types is determined.
\f[B]frama\-c \-enums help\f[] gives the list of available options.
Default is \f[B]gcc\-enums\f[].
.RS
.RE
.TP
.B \-float\-digits \f[I]n\f[]
when outputting floating\-point numbers, display \f[I]n\f[] digits.
Defaults to 12.
.RS
.RE
.TP
.B \-float\-flush\-to\-zero
floating point operations flush to zero.
.RS
.RE
.TP
.B \-float\-hex
display floats as hexadecimal.
.RS
.RE
.TP
.B \-float\-normal
display floats with the standard OCaml routine.
.RS
.RE
.TP
.B \-float\-relative
display float intervals as [ \f[I]lower_bound\f[]++\f[I]width\f[] ].
.RS
.RE
.TP
.B [\-no]\-frama\-c\-stdlib
adds \f[B]\-I$FRAMAC_SHARE/libc\f[] to the options given to the cpp
command.
If \f[B]\-cpp\-frama\-c\-compliant\f[] is not false, also adds
\f[B]\-nostdinc\f[] to prevent an inconsistent mix of system and
Frama\-C header files.
Defaults to yes.
.RS
.RE
.TP
.B \-implicit\-function\-declaration \f[I]action\f[]
warns or aborts when a function is called before it has been declared.
\f[I]action\f[] can be one of \f[B]ignore\f[], \f[B]warn\f[], or
\f[B]error\f[].
Defaults to \f[B]warn\f[].
.PD 0
.P
.PD
\f[B]Deprecated\f[]: use \f[B]\-kernel\-warn\-key
typing:implicit\-function\-declaration\f[] instead.
.RS
.RE
.TP
.B \-initialized\-padding\-locals
implicit initialization of locals sets padding bits to 0.
If false, padding bits are left uninitialized.
Defaults to yes.
.RS
.RE
.TP
.B \-inline\-calls \f[I]f1,\&...,fn\f[]
syntactically inlines calls to functions \f[I]f1,\&...,fn\f[].
Use \f[B]\@inline\f[] to select all functions with attribute
\f[I]inline\f[].
Recursive functions are inlined only at the first level.
Calls via function pointers are not inlined.
.RS
.RE
.TP
.B \-journal\-disable
do not output a journal of the current session.
See \f[B]\-journal\-enable\f[].
.RS
.RE
.TP
.B \-journal\-enable
on by default, dumps a journal of all the actions performed during the
current Frama\-C session in the form of an OCaml script that can be
replayed with \f[B]\-load\-script\f[].
The name of the script can be set with the \f[B]\-journal\-name\f[]
option.
.RS
.RE
.TP
.B \-journal\-name \f[I]name\f[]
sets the name of the journal file (without the \f[I].ml\f[] extension).
Defaults to \f[B]frama_c_journal\f[].
.RS
.RE
.TP
.B \-json\-compilation\-database \f[I]path\f[]
use \f[I]path\f[] as a JSON compilation database (see
<https://clang.llvm.org/docs/JSONCompilationDatabase.html> for more
information): each file preprocessed by Frama\-C will include
corresponding \f[B]\-I\f[] and \f[B]\-D\f[] flags according to the
specifications in \f[I]path\f[].
If \f[I]path\f[] is a directory, use
\f[B]<path>/compile_commands.json\f[].
Disabled by default.
.RS
.RE
.TP
.B [\-no]\-keep\-comments
tries to preserve comments when pretty\-printing the source code.
Defaults to no.
.RS
.RE
.TP
.B [\-no]\-keep\-switch
when \f[B]\-simplify\-cfg\f[] is set, keeps switch statements.
Defaults to no.
.RS
.RE
.TP
.B \-keep\-unused\-specified\-functions
see \f[B]\-remove\-unused\-specified\-functions\f[].
.RS
.RE
.TP
.B \-keep\-unused\-types
see \f[B]\-remove\-unused\-types\f[].
.RS
.RE
.TP
.B \-kernel\-log \f[I]kind:file\f[]
copies log messages from the Frama\-C's kernel to file.
\f[I]kind\f[] specifies which kinds of messages to be copied (e.g.
\f[B]w\f[] for warnings, \f[B]e\f[] for errors, etc.).
See \f[B]\-kernel\-help\f[] for more details.
Can also be set on a per\-plugin basis, with option
\-\f[I]<plugin>\f[]\-\f[B]log\f[].
.RS
.RE
.TP
.B \-kernel\-msg\-key \f[I]k1,\&...,kn\f[]
controls the emission of messages based on categories.
Use \f[B]\-kernel\-msg\-key help\f[] to get a list of available
categories, and \f[B]\-kernel\-msg\-key=\[lq]*\[rq]\f[] to control all
categories.
To disable a category, add a \f[B]\-\f[] before its name; to enable a
category, simply add its name, with an optional \f[B]+\f[] before it.
For instance, \f[B]\-kernel\-msg\-key=\-k1,k2\f[] will disable messages
from category \f[B]k1\f[] and enable those from category \f[B]k2\f[].
Can also be set on a per\-plugin basis, with option
\-\f[I]<plugin>\f[]\-\f[B]msg\-key\f[].
Note that each plugin has its own set of categories.
.RS
.RE
.TP
.B \-kernel\-warn\-key \f[I]k1=a1,\&...,kn=an\f[]
controls the emission of warnings based on categories: for each warning
category \f[I]k\f[], associate action \f[I]a\f[].
Use \f[B]\-kernel\-warn\-key help\f[] to get a list of available warning
categories and their currently associated actions.
The following actions can be set per category: \f[B]active\f[] (warn),
\f[B]feedback\f[], \f[B]error\f[], \f[B]abort\f[], \f[B]once\f[],
\f[B]feedback\-once\f[], \f[B]err\-once\f[].
Omitting the action is equivalent to setting it to \f[B]active\f[].
Warning categories can also be set on a per\-plugin basis, with option
\-\f[I]<plugin>\f[]\f[B]\-warn\-key\f[].
.RS
.RE
.TP
.B [\-no]\-lib\-entry
indicates that the entry point is called during program execution.
This implies in particular that global variables cannot be assumed to
have their initial values.
The default is \f[B]\-no\-lib\-entry\f[]: the entry point is also the
starting point of the program and globals have their initial value.
.RS
.RE
.TP
.B \-load \f[I]file\f[]
loads the (previously saved) state contained in \f[I]file\f[].
.RS
.RE
.TP
.B \-load\-module \f[I]SPEC\f[]
dynamically load OCaml plug\-ins, modules and scripts.
Each \f[I]SPEC\f[] can be an OCaml source or object file, with or
without extension, or a Findlib package.
Loading order is preserved and additional dependencies can be listed in
*\f[B].depend\f[] files.
.RS
.RE
.TP
.B \-load\-script \f[I]SPEC\f[]
alias for option \f[B]\-load\-module\f[].
.RS
.RE
.TP
.B \-machdep \f[I]machine\f[]
uses \f[I]machine\f[] as the current machine\-dependent configuration
(size of the various integer types, endiandness, \&...).
The list of currently supported machines is available through option
\f[I]\-machdep help\f[].
Default is \f[B]x86_32\f[].
.RS
.RE
.TP
.B \-main \f[I]f\f[]
sets \f[I]f\f[] as the entry point of the analysis.
Defaults to \f[B]main\f[].
By default, it is considered as the starting point of the program under
analysis.
Use \f[B]\-lib\-entry\f[] if \f[I]f\f[] is supposed to be called in the
middle of an execution.
.RS
.RE
.TP
.B \-obfuscate
prints an obfuscated version of the code (where original identifiers are
replaced by meaningless ones) and exits.
The correspondence table between original and new symbols is kept at the
beginning of the result.
.RS
.RE
.TP
.B \-ocode \f[I]file\f[]
redirects pretty\-printed code to \f[I]file\f[] instead of standard
output.
.RS
.RE
.TP
.B [\-no]\-orig\-name
During the normalization phase, some variables may get renamed when
different variables with the same name can co\-exist (e.g.\ a global
variable and a formal parameter).
When this option is on, a message is printed each time this occurs.
Defaults to no.
.RS
.RE
.TP
.B [\-no]\-pp\-annot
pre\-processes annotations.
This is currently only possible when using gcc (or GNU cpp)
pre\-processor.
The default is to pre\-process annotations when the default
pre\-processor is identified as GNU or GNU\-like.
See also \f[B]\-cpp\-frama\-c\-compliant\f[].
.RS
.RE
.TP
.B [\-no]\-print
pretty\-prints the source code as normalized by CIL.
Defaults to no.
.RS
.RE
.TP
.B [\-no]\-print\-libc
expands \f[B]#include\f[] directives in the pretty\-printed CIL code for
files in the Frama\-C standard library.
Defaults to no.
.RS
.RE
.TP
.B \-print\-libpath
outputs the directory where the Frama\-C kernel library is installed.
.RS
.RE
.TP
.B \-print\-path
alias of \f[B]\-print\-share\-path\f[].
.RS
.RE
.TP
.B \-print\-plugin\-path
outputs the directory where Frama\-C searches its plugins (can be
overridden by the \f[B]FRAMAC_PLUGIN\f[] variable and the
\f[B]\-add\-path\f[] option).
.RS
.RE
.TP
.B \-print\-share\-path
outputs the directory where Frama\-C stores its data (can be overridden
by the \f[B]FRAMAC_SHARE\f[] variable).
.RS
.RE
.TP
.B [\-no]\-remove\-exn
transforms throw and try/catch statements into normal C functions.
Defaults to no, unless the input source language has an exception
mechanism.
.RS
.RE
.TP
.B \-remove\-inlined \f[I]f1,\&...,fn\f[]
removes inlined functions \f[I]f1,\&...,fn\f[] from the AST, which must
have been given to \f[B]\-inline\-calls\f[].
Note: this option does not check if the given functions were fully
inlined.
.RS
.RE
.TP
.B \-remove\-projects \f[I]p1,\&...,pn\f[]
removes the given projects \f[I]p1,\&...,pn\f[].
\f[B]\@all_but_current\f[] removes all projects but the current one.
.RS
.RE
.TP
.B \-remove\-unused\-specified\-functions
keeps function prototypes that have an ACSL specification but are not
used in the code.
This is the default.
Functions having the attribute \f[B]FRAMAC_BUILTIN\f[] are always kept.
.RS
.RE
.TP
.B \-remove\-unused\-types
remove types and struct/union/enum declarations that are not referenced
anywhere else in the code.
This is the default.
Use \f[B]\-keep\-unused\-types\f[] to keep these definitions.
.RS
.RE
.TP
.B \-safe\-arrays
for multidimensional arrays or arrays that are fields inside structs,
assumes that all accesses must be in bound (set by default).
The opposite option is \f[B]\-unsafe\-arrays\f[].
.RS
.RE
.TP
.B \-save \f[I]file\f[]
saves Frama\-C's state into \f[I]file\f[] after analyses have taken
place.
.RS
.RE
.TP
.B \-session \f[I]s\f[]
sets \f[I]s\f[] as the directory in which session files are searched.
.RS
.RE
.TP
.B [\-no]\-set\-project\-as\-default
the current project becomes the default one (and so future
\f[B]\-then\f[] sequences are applied on it).
Defaults to no.
.RS
.RE
.TP
.B [\-no]\-simplify\-cfg
removes \f[B]break\f[], \f[B]continue\f[] and \f[B]switch\f[] statements
before analyses.
Defaults to no.
.RS
.RE
.TP
.B [\-no]\-simplify\-trivial\-loops
simplifies trivial loops such as \f[B]do \&... while (0)\f[] loops.
Defaults to yes.
.RS
.RE
.TP
.B \-then
allows one to compose analyses: a first run of Frama\-C will occur with
the options before \f[B]\-then\f[] and a second run will be done with
the options after \f[B]\-then\f[] on the current project from the first
run.
.RS
.RE
.TP
.B \-then\-last
like \f[B]\-then\f[], but the second group of actions is executed on the
last project created by a program transformer.
.RS
.RE
.TP
.B \-then\-on \f[I]prj\f[]
similar to \f[B]\-then\f[] except that the second run is performed in
project \f[I]prj\f[].
If no such project exists, Frama\-C exits with an error.
.RS
.RE
.TP
.B \-then\-replace
like \f[B]\-then\-last\f[], but also removes the previous current
project.
.RS
.RE
.TP
.B \-time \f[I]file\f[]
appends user time and date in the given file when Frama\-C exits.
.RS
.RE
.TP
.B \-typecheck
forces typechecking of the source files.
This option is only relevant if no further analysis is requested (as
typechecking will implicitly occur before the analysis is launched).
.RS
.RE
.TP
.B \-ulevel \f[I]n\f[]
syntactically unroll loops \f[I]n\f[] times before the analysis.
This can be quite costly and some plugins (e.g.\ Eva) provide more
efficient ways to perform the same thing.
See their respective manuals for more information.
This can also be activated on a per\-loop basis via the \f[B]loop pragma
unroll \f[] directive.
A negative value for \f[I]n\f[] will inhibit such pragmas.
.RS
.RE
.TP
.B [\-no]\-ulevel\-force
ignores \f[B]UNROLL\f[] loop pragmas disabling unrolling.
.RS
.RE
.PP
[\-no]\-unicode outputs ACSL formulas with UTF\-8 characters.
This is the default.
When given the \f[B]\-no\-unicode\f[] option, Frama\-C will use the
ASCII version instead.
See the ACSL manual for the correspondence.
.TP
.B \-unsafe\-arrays
see \f[B]\-safe\-arrays\f[].
.RS
.RE
.TP
.B [\-no]\-unspecified\-access
checks that read/write accesses occurring in an unspecified order
(according to the C standard's notion of sequence points) are performed
on separate locations.
With \f[B]\-no\-unspecified\-access\f[], assumes that it is always the
case (this is the default).
.RS
.RE
.TP
.B \-version
outputs the version string of Frama\-C.
.RS
.RE
.TP
.B \-warn\-decimal\-float \f[I]freq\f[]
warns when a floating\-point constant cannot be exactly represented
(e.g.\ 0.1).
\f[I]freq\f[] can be one of \f[B]none\f[], \f[B]once\f[], or
\f[B]all\f[].
.PD 0
.P
.PD
\f[B]Deprecated\f[]: use \f[B]\-kernel\-warn\-key
parser:decimal\-float=once\f[] (and variants) instead.
.RS
.RE
.TP
.B [\-no]\-warn\-left\-shift\-negative
generate alarms for signed left shifts on negative values.
Defaults to yes.
.RS
.RE
.TP
.B [\-no]\-warn\-right\-shift\-negative
generate alarms for signed right shifts on negative values.
Defaults to no.
.RS
.RE
.TP
.B [\-no]\-warn\-signed\-downcast
generates alarms when signed downcasts may exceed the destination range.
Defaults to no.
.RS
.RE
.TP
.B [\-no]\-warn\-signed\-overflow
generates alarms for signed operations that overflow.
Defaults to yes.
.RS
.RE
.TP
.B [\-no]\-warn\-unsigned\-downcast
generates alarms when unsigned downcasts may exceed the destination
range.
Defaults to no.
.RS
.RE
.TP
.B [\-no]\-warn\-unsigned\-overflow
generates alarms for unsigned operations that overflow.
Defaults to no.
.RS
.RE
.TP
.B [\-no]\-warn\-invalid\-bool
generates alarms for reads of trap representations of _Bool lvalues.
Defaults to yes.
.RS
.RE
.SS Plugin\-specific options
.PP
For each plugin, the command
.RS
.PP
frama\-c \-plugin\-help
.RE
.PP
will give the list of options that are specific to the plugin.
.SH EXIT STATUS
.TP
.B 0
Successful execution
.RS
.RE
.TP
.B 1
Invalid user input
.RS
.RE
.TP
.B 2
User interruption (kill or equivalent)
.RS
.RE
.TP
.B 3
Unimplemented feature
.RS
.RE
.TP
.B 4 5 6
Internal error
.RS
.RE
.TP
.B 125
Unknown error
.RS
.RE
.PP
Exit statuses greater than 2 can be considered as a bug (or a feature
request for the case of exit status 3) and may be reported on Frama\-C's
BTS (see below).
.SH ENVIRONMENT VARIABLES
.PP
It is possible to control the places where Frama\-C looks for its files
through the following variables.
.TP
.B FRAMAC_LIB
The directory where kernel's compiled interfaces are installed.
.RS
.RE
.TP
.B FRAMAC_PLUGIN
The directory where Frama\-C can find standard plugins.
If you wish to have plugins in several places, use \f[B]\-add\-path\f[]
instead.
.RS
.RE
.TP
.B FRAMAC_SHARE
The directory where Frama\-C data (e.g.\ its version of the standard
library) is installed.
.RS
.RE
.SH SEE ALSO
.PP
Frama\-C user manual:
http://frama\-c.com/download/frama\-c\-user\-manual.pdf
.PP
Frama\-C homepage: http://frama\-c.com
.PP
Frama\-C BTS: http://bts.frama\-c.com
