[kernel] Parsing tests/spec/volatile.c (with preprocessing)
[kernel] Parsing tests/spec/volatile_aux.c (with preprocessing)
[kernel] tests/spec/volatile.c:8: Warning: 
  Overlapping volatile specification: volatile location y already associated to a writes function in annotation at loc tests/spec/volatile.c:7. Ignoring new binding.
[kernel] tests/spec/volatile.c:9: Warning: 
  Overlapping volatile specification: volatile location x already associated to a writes function in annotation at loc tests/spec/volatile.c:7. Ignoring new binding.
[kernel] tests/spec/volatile.c:10: Warning: 
  Overlapping volatile specification: volatile location y already associated to a reads function in annotation at loc tests/spec/volatile.c:8. Ignoring new binding.
/* Generated by Frama-C */
typedef int volatile VINT;
struct st {
   int a ;
   int volatile v ;
};
typedef struct st ST;
struct vst {
   int b ;
   ST v ;
};
int f(int x_0);

__inline static int r__fc_inline(VINT *v_0)
{
  int __retres;
  __retres = *v_0;
  return __retres;
}

__inline static int w__fc_inline(int volatile *v_0, int new)
{
  *v_0 = new;
  return new;
}

int volatile v;
int volatile tab[10];
VINT *pt;
struct st s;
/*@ volatile v, tab[..] reads r__fc_inline writes w__fc_inline; */
/*@ volatile *pt writes w__fc_inline; */
/*@ volatile s.v reads r__fc_inline;
*/
struct vst vs;
struct vst rs(struct vst *p);

struct vst ws(struct vst *p, struct vst v);

/*@ volatile vs reads rs writes ws;
*/
int volatile x;
int volatile y;
int volatile z;
/*@ volatile x, y writes w__fc_inline; */
/*@ volatile y, z reads r__fc_inline writes w__fc_inline; */
/*@ volatile x writes w__fc_inline; */
/*@ volatile y reads r__fc_inline; */
int const c = 1;
int *p;
/*@ lemma comp_const_addr{L}: p ≡ &c;
 */
/*@ lemma comp_volatile_addr{L}: p ≡ &v;
 */
/*@ lemma volatile_in_annot_is_illegal{L}: v ≡ 1 ⇒ v ≡ 1;

*/
int main(void)
{
  int __retres;
  int x_0 = v;
  v = f(x_0);
  __retres = 0;
  return __retres;
}

__inline static int r__fc_inline_0(VINT *v_0)
{
  int __retres;
  __retres = *v_0;
  return __retres;
}

__inline static int w__fc_inline_0(int volatile *v_0, int new)
{
  *v_0 = new;
  return new;
}

int f(int x_0)
{
  int __retres;
  x_0 ++;
  v = x_0;
  __retres = v + x_0;
  return __retres;
}


