[kernel] Parsing tests/spec/array_conversion.c (with preprocessing)
[kernel] tests/spec/array_conversion.c:5: Warning: 
  parsing obsolete ACSL construct '\valid_range(addr,min,max)'. '\valid(addr+(min..max))' should be used instead.
[kernel:annot-error] tests/spec/array_conversion.c:21: Warning: 
  In ACSL, there is no implicit conversion between a C array and a pointer. Either introduce an explicit cast or take the address of the first element of X. Ignoring global annotation
[kernel:annot-error] tests/spec/array_conversion.c:34: Warning: 
  In ACSL, there is no implicit conversion between a C array and a pointer. Either introduce an explicit cast or take the address of the first element of a. Ignoring code annotation
/* Generated by Frama-C */
typedef int foo[4];
foo X = {0, 1, 2, 3};
/*@ predicate p1{L}(int *a) = \at(\valid(a + (0 .. 3)),L);
 */
/*@ predicate q1{L}(int *a) = \at(\valid(a + (0 .. 3)),L);
 */
/*@ lemma vaddrof{L}: \valid(&X);
 */
/*@ lemma vaddrof2{L}: \valid((int *)X);
 */
/*@ requires p1(x); */
int f1(int * /*[4]*/ x)
{
  int __retres;
  __retres = *(x + 3);
  return __retres;
}

int g1(void)
{
  int tmp;
  tmp = f1(X);
  return tmp;
}

/*@ axiomatic ax {
      logic ùîπ p{L}(int *b) ;
      
      }

*/
int a[10];
void ftest(void)
{
  /*@ assert p((int *)a) ‚â° \true; */ ;
  return;
}

/*@ lemma array_not_null{L}: (int *)a ‚â¢ \null;

*/

