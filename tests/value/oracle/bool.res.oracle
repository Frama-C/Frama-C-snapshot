[kernel] Parsing tests/value/bool.i (no preprocessing)
[value] Analyzing a complete application starting at main
[value] Computing initial state
[value] Initial state computed
[value:initial-state] Values of globals at initialization
  x ∈ {0}
  y ∈ {0}
[value] tests/value/bool.i:12: Frama_C_show_each: {0}
[value] tests/value/bool.i:14: Frama_C_show_each: {1}
[value] tests/value/bool.i:16: Frama_C_show_each: {1}, {2}
[value] tests/value/bool.i:18: Frama_C_show_each: {1}
[value] tests/value/bool.i:20: Frama_C_show_each: {1}
[value] Recording results for main
[value] done for function main
[value] ====== VALUES COMPUTED ======
[value:final-states] Values at end of function main:
  x ∈ {1}
  y ∈ {2}
[from] Computing for function main
[from] Done for function main
[from] ====== DEPENDENCIES COMPUTED ======
  These dependencies hold at termination for the executions that terminate:
[from] Function main:
  x FROM \nothing
  y FROM \nothing
  \result FROM \nothing
[from] ====== END OF DEPENDENCIES ======
[inout] Out (internal) for function main:
    x; y
[inout] Inputs for function main:
    x; y
/* Generated by Frama-C */
_Bool x;
int y;
/*@ assigns \result;
    assigns \result \from \nothing; */
extern int ( /* missing proto */ Frama_C_show_each)();

int main(void)
{
  x = (_Bool)0;
  Frama_C_show_each(x);
  x = (_Bool)1;
  Frama_C_show_each(x);
  y = (int)x + 1;
  Frama_C_show_each(x,y);
  x = (_Bool)((int)x + 1 != 0);
  Frama_C_show_each(x);
  x = (_Bool)((int)x + 1 != 0);
  Frama_C_show_each(x);
  return y;
}


