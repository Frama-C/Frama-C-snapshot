[kernel] Parsing share/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/value/cast_return.c (with preprocessing)
[value] Analyzing a complete application starting at main
[value] Computing initial state
[value] Initial state computed
[value:initial-state] Values of globals at initialization
  i ∈ [--..--]
  c ∈ [--..--]
[value] computing for function main1 <- main.
        Called from tests/value/cast_return.c:63.
[value] computing for function f <- main1 <- main.
        Called from tests/value/cast_return.c:26.
[value] Recording results for f
[value] Done for function f
[value] computing for function g <- main1 <- main.
        Called from tests/value/cast_return.c:27.
[value] Recording results for g
[value] Done for function g
tests/value/cast_return.c:27:[kernel] warning: returned value may be uninitialized: assert \initialized(\returned_value)
[value] computing for function h <- main1 <- main.
        Called from tests/value/cast_return.c:31.
[value] Recording results for h
[value] Done for function h
tests/value/cast_return.c:31:[value] warning: out of bounds write. assert \valid(*p);
[value] Recording results for main1
[value] Done for function main1
[value] computing for function main2 <- main.
        Called from tests/value/cast_return.c:64.
[value] computing for function fl1 <- main2 <- main.
        Called from tests/value/cast_return.c:50.
[value] Recording results for fl1
[value] Done for function fl1
tests/value/cast_return.c:50:[kernel] warning: returned value may be uninitialized: assert \initialized(\returned_value)
[value] computing for function fl2 <- main2 <- main.
        Called from tests/value/cast_return.c:51.
[value] Recording results for fl2
[value] Done for function fl2
tests/value/cast_return.c:51:[kernel] warning: returned value may be uninitialized: assert \initialized(\returned_value)
[value] Recording results for main2
[value] Done for function main2
[value] computing for function main3 <- main.
        Called from tests/value/cast_return.c:65.
[value] computing for function ret_float <- main3 <- main.
        Called from tests/value/cast_return.c:58.
[value] using specification for function ret_float
[value] Done for function ret_float
tests/value/cast_return.c:59:[value] warning: non-finite float value. assert \is_finite(f1);
[value] Recording results for main3
[value] Done for function main3
[value] Recording results for main
[value] done for function main
tests/value/cast_return.c:31:[value] assertion 'Value,mem_access' got final status invalid.
[value] ====== VALUES COMPUTED ======
[value:final-states] Values at end of function f:
  
[value:final-states] Values at end of function fl1:
  v[bits 0 to 7] ∈ {1}
   [bits 8 to 31] ∈ UNINITIALIZED
[value:final-states] Values at end of function fl2:
  v ∈ {1.} or UNINITIALIZED
[value:final-states] Values at end of function g:
  x ∈ {1} or UNINITIALIZED
[value:final-states] Values at end of function h:
  __retres ∈ {1}
[value:final-states] Values at end of function main1:
  
[value:final-states] Values at end of function main2:
  d1 ∈ UNINITIALIZED
  d2 ∈ {1.}
[value:final-states] Values at end of function main3:
  f1 ∈ [-3.40282346639e+38 .. 3.40282346639e+38]
  f2 ∈ [-3.40282346639e+38 .. 3.40282346639e+38]
[value:final-states] Values at end of function main:
  
[from] Computing for function f
[from] Done for function f
[from] Computing for function fl1
[from] Done for function fl1
[from] Computing for function fl2
[from] Done for function fl2
[from] Computing for function g
[from] Done for function g
[from] Computing for function h
[from] Done for function h
[from] Computing for function main1
[from] Done for function main1
[from] Computing for function main2
[from] Done for function main2
[from] Computing for function main3
[from] Computing for function ret_float <-main3
[from] Done for function ret_float
[from] Done for function main3
[from] Computing for function main
[from] Done for function main
[from] ====== DEPENDENCIES COMPUTED ======
       These dependencies hold at termination for the executions that terminate:
[from] Function f:
  \result FROM i
[from] Function fl1:
  \result FROM \nothing
[from] Function fl2:
  \result FROM c
[from] Function g:
  \result FROM c
[from] Function h:
  \result FROM \nothing
[from] Function main1:
  NO EFFECTS
[from] Function main2:
  NO EFFECTS
[from] Function ret_float:
  \result FROM \nothing
[from] Function main3:
  NO EFFECTS
[from] Function main:
  NO EFFECTS
[from] ====== END OF DEPENDENCIES ======
[inout] Out (internal) for function f:
          \nothing
[inout] Inputs for function f:
          i
[inout] Out (internal) for function fl1:
          v[bits 0 to 7]
[inout] Inputs for function fl1:
          \nothing
[inout] Out (internal) for function fl2:
          v
[inout] Inputs for function fl2:
          c
[inout] Out (internal) for function g:
          x
[inout] Inputs for function g:
          c
[inout] Out (internal) for function h:
          __retres
[inout] Inputs for function h:
          \nothing
[inout] Out (internal) for function main1:
          f_; tmp; v; x; p
[inout] Inputs for function main1:
          i; c
[inout] Out (internal) for function main2:
          d1; d2
[inout] Inputs for function main2:
          c
[inout] Out (internal) for function main3:
          f1; f2
[inout] Inputs for function main3:
          \nothing
[inout] Out (internal) for function main:
          \nothing
[inout] Inputs for function main:
          i; c
/* Generated by Frama-C */
extern int i;

int f(void)
{
  return i;
}

int volatile c;
int g(void)
{
  int x;
  if (c) x = 1;
  return x;
}

char h(void)
{
  char __retres;
  __retres = (char)1;
  return __retres;
}

void main1(void)
{
  if (c) {
    float f_;
    int tmp;
    tmp = f();
    f_ = (float)tmp;
  }
  if (c) {
    long long v;
    v = (long long)g();
  }
  if (c) {
    int *x;
    int **p;
    x = (int *)0;
    p = & x;
    /*@ assert Value: mem_access: \valid(*p); */
    *(*p) = (int)h();
  }
  return;
}

float fl1(void)
{
  float v;
  *((char *)(& v)) = (char)1;
  return v;
}

float fl2(void)
{
  float v;
  if (c) v = (float)1;
  return v;
}

void main2(void)
{
  double d1;
  double d2;
  if (c) d1 = (double)fl1();
  d2 = (double)fl2();
  return;
}

/*@ assigns \result;
    assigns \result \from \nothing; */
extern float ret_float();

void main3(void)
{
  float f1;
  float f2;
  f1 = ret_float();
  /*@ assert Value: is_nan_or_infinite: \is_finite(f1); */
  f2 = f1 + (float)1;
  return;
}

void main(void)
{
  main1();
  main2();
  main3();
  return;
}


[value] Analyzing a complete application starting at main
[value] Computing initial state
[value] Initial state computed
[value:initial-state] Values of globals at initialization
  i ∈ [--..--]
  c ∈ [--..--]
[value] computing for function main1 <- main.
        Called from tests/value/cast_return.c:63.
[value] computing for function f <- main1 <- main.
        Called from tests/value/cast_return.c:26.
[value] Recording results for f
[value] Done for function f
[value] computing for function g <- main1 <- main.
        Called from tests/value/cast_return.c:27.
tests/value/cast_return.c:17:[value] warning: accessing uninitialized left-value. assert \initialized(&x);
[value] Recording results for g
[value] Done for function g
[value] computing for function h <- main1 <- main.
        Called from tests/value/cast_return.c:31.
[value] Recording results for h
[value] Done for function h
tests/value/cast_return.c:31:[value] warning: out of bounds write. assert \valid(*p);
[value] Recording results for main1
[value] Done for function main1
[value] computing for function main2 <- main.
        Called from tests/value/cast_return.c:64.
[value] computing for function fl1 <- main2 <- main.
        Called from tests/value/cast_return.c:50.
tests/value/cast_return.c:38:[value] warning: accessing uninitialized left-value. assert \initialized(&v);
[value] Recording results for fl1
[value] Done for function fl1
[value] computing for function fl2 <- main2 <- main.
        Called from tests/value/cast_return.c:51.
tests/value/cast_return.c:44:[value] warning: accessing uninitialized left-value. assert \initialized(&v);
[value] Recording results for fl2
[value] Done for function fl2
[value] Recording results for main2
[value] Done for function main2
[value] computing for function main3 <- main.
        Called from tests/value/cast_return.c:65.
[value] computing for function ret_float <- main3 <- main.
        Called from tests/value/cast_return.c:58.
[value] Done for function ret_float
tests/value/cast_return.c:59:[value] warning: non-finite float value. assert \is_finite(f1);
[value] Recording results for main3
[value] Done for function main3
[value] Recording results for main
[value] done for function main
tests/value/cast_return.c:38:[value] assertion 'Value,initialisation' got final status invalid.
[value] ====== VALUES COMPUTED ======
[value:final-states] Values at end of function f:
  
[value:final-states] Values at end of function fl1:
  v[bits 0 to 7] ∈ {1}
   [bits 8 to 31] ∈ UNINITIALIZED
[value:final-states] Values at end of function fl2:
  v ∈ {1.} or UNINITIALIZED
[value:final-states] Values at end of function g:
  x ∈ {1} or UNINITIALIZED
[value:final-states] Values at end of function h:
  __retres ∈ {1}
[value:final-states] Values at end of function main1:
  
[value:final-states] Values at end of function main2:
  d1 ∈ UNINITIALIZED
  d2 ∈ {1.}
[value:final-states] Values at end of function main3:
  f1 ∈ [-3.40282346639e+38 .. 3.40282346639e+38]
  f2 ∈ [-3.40282346639e+38 .. 3.40282346639e+38]
[value:final-states] Values at end of function main:
  
[from] Computing for function f
[from] Done for function f
[from] Computing for function fl1
[from] Done for function fl1
[from] Computing for function fl2
[from] Done for function fl2
[from] Computing for function g
[from] Done for function g
[from] Computing for function h
[from] Done for function h
[from] Computing for function main1
[from] Done for function main1
[from] Computing for function main2
[from] Done for function main2
[from] Computing for function main3
[from] Computing for function ret_float <-main3
[from] Done for function ret_float
[from] Done for function main3
[from] Computing for function main
[from] Done for function main
[from] ====== DEPENDENCIES COMPUTED ======
       These dependencies hold at termination for the executions that terminate:
[from] Function f:
  \result FROM i
[from] Function fl1:
  \result FROM \nothing
[from] Function fl2:
  \result FROM c
[from] Function g:
  \result FROM c
[from] Function h:
  \result FROM \nothing
[from] Function main1:
  NO EFFECTS
[from] Function main2:
  NO EFFECTS
[from] Function ret_float:
  \result FROM \nothing
[from] Function main3:
  NO EFFECTS
[from] Function main:
  NO EFFECTS
[from] ====== END OF DEPENDENCIES ======
[inout] Out (internal) for function f:
          \nothing
[inout] Inputs for function f:
          i
[inout] Out (internal) for function fl1:
          v[bits 0 to 7]
[inout] Inputs for function fl1:
          \nothing
[inout] Out (internal) for function fl2:
          v
[inout] Inputs for function fl2:
          c
[inout] Out (internal) for function g:
          x
[inout] Inputs for function g:
          c
[inout] Out (internal) for function h:
          __retres
[inout] Inputs for function h:
          \nothing
[inout] Out (internal) for function main1:
          f_; tmp; v; x; p
[inout] Inputs for function main1:
          i; c
[inout] Out (internal) for function main2:
          d1; d2
[inout] Inputs for function main2:
          c
[inout] Out (internal) for function main3:
          f1; f2
[inout] Inputs for function main3:
          \nothing
[inout] Out (internal) for function main:
          \nothing
[inout] Inputs for function main:
          i; c
