[kernel] Parsing share/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/value/undefined_sequence2.i (no preprocessing)
tests/value/undefined_sequence2.i:11:[kernel] warning: Unspecified sequence with side effect:
                  /* *x <- x */
                  tmp = 0;
                  *x = tmp;
                  /* *x <- x */
                  tmp_0 = 0;
                  *x = tmp_0;
tests/value/undefined_sequence2.i:18:[kernel] warning: Unspecified sequence with side effect:
                  /* i <-  */
                  i ++;
                  /* i <-  */
                  i ++;
tests/value/undefined_sequence2.i:26:[kernel] warning: Unspecified sequence with side effect:
                  /*  <-  */
                  tmp = i;
                  /* i <-  */
                  i ++;
                  /* a[tmp] <- tmp i */
                  a[tmp] = i;
tests/value/undefined_sequence2.i:34:[kernel] warning: Unspecified sequence with side effect:
                  /* *x <- x */
                  tmp = 0;
                  *x = tmp;
                  /* *y <- y */
                  tmp_0 = 0;
                  *y = tmp_0;
tests/value/undefined_sequence2.i:47:[kernel] warning: Unspecified sequence with side effect:
                  /* *x <- x */
                  tmp = 0;
                  *x = tmp;
                  /* *y <- y */
                  tmp_0 = 0;
                  *y = tmp_0;
[value] Analyzing a complete application starting at main
[value] Computing initial state
[value] Initial state computed
[value] Values of globals at initialization
  a[0..1] ∈ {0}
  foo ∈ [--..--]
[value] computing for function multiple_update_wrong_1 <- main.
        Called from tests/value/undefined_sequence2.i:56.
tests/value/undefined_sequence2.i:11:[kernel] warning: undefined multiple accesses in expression. assert \separated(x, x);
[value] Recording results for multiple_update_wrong_1
[value] Done for function multiple_update_wrong_1
[value] computing for function multiple_update_wrong_2 <- main.
        Called from tests/value/undefined_sequence2.i:58.
tests/value/undefined_sequence2.i:18:[kernel] warning: undefined multiple accesses in expression. assert \separated(&i, &i);
[value] Recording results for multiple_update_wrong_2
[value] Done for function multiple_update_wrong_2
[value] computing for function multiple_update_wrong_3 <- main.
        Called from tests/value/undefined_sequence2.i:60.
tests/value/undefined_sequence2.i:26:[kernel] warning: undefined multiple accesses in expression. assert \separated(&i, &i);
[value] Recording results for multiple_update_wrong_3
[value] Done for function multiple_update_wrong_3
[value] computing for function multiple_update_unsafe <- main.
        Called from tests/value/undefined_sequence2.i:62.
[value] Recording results for multiple_update_unsafe
[value] Done for function multiple_update_unsafe
[value] Called Frama_C_show_each_passed4()
[value] computing for function multiple_update_unsafe <- main.
        Called from tests/value/undefined_sequence2.i:64.
tests/value/undefined_sequence2.i:34:[kernel] warning: undefined multiple accesses in expression. assert \separated(x, y);
[value] Recording results for multiple_update_unsafe
[value] Done for function multiple_update_unsafe
[value] computing for function multiple_update_safe <- main.
        Called from tests/value/undefined_sequence2.i:66.
[value] Recording results for multiple_update_safe
[value] Done for function multiple_update_safe
[value] Called Frama_C_show_each_passed6()
[value] computing for function multiple_update_safe <- main.
        Called from tests/value/undefined_sequence2.i:68.
[value] Recording results for multiple_update_safe
[value] Done for function multiple_update_safe
[value] Called Frama_C_show_each_passed7()
[value] Recording results for main
[value] done for function main
tests/value/undefined_sequence2.i:11:[value] assertion 'Value,separation' got final status invalid.
tests/value/undefined_sequence2.i:18:[value] assertion 'Value,separation' got final status invalid.
tests/value/undefined_sequence2.i:26:[value] assertion 'Value,separation' got final status invalid.
[value] ====== VALUES COMPUTED ======
[value] Values at end of function multiple_update_safe:
  b ∈ {0}
  c ∈ {0}
  __retres ∈ {0}
[value] Values at end of function multiple_update_unsafe:
  b ∈ {0}
  c ∈ {0}
  __retres ∈ {0}
[value] Values at end of function multiple_update_wrong_1:
  NON TERMINATING FUNCTION
[value] Values at end of function multiple_update_wrong_2:
  NON TERMINATING FUNCTION
[value] Values at end of function multiple_update_wrong_3:
  NON TERMINATING FUNCTION
[value] Values at end of function main:
  b ∈ {0}
  c ∈ {0}
  __retres ∈ {0}
[from] Computing for function multiple_update_safe
[from] Done for function multiple_update_safe
[from] Computing for function multiple_update_unsafe
[from] Done for function multiple_update_unsafe
[from] Computing for function multiple_update_wrong_1
[from] Non-terminating function multiple_update_wrong_1 (no dependencies)
[from] Done for function multiple_update_wrong_1
[from] Computing for function multiple_update_wrong_2
[from] Non-terminating function multiple_update_wrong_2 (no dependencies)
[from] Done for function multiple_update_wrong_2
[from] Computing for function multiple_update_wrong_3
[from] Non-terminating function multiple_update_wrong_3 (no dependencies)
[from] Done for function multiple_update_wrong_3
[from] Computing for function main
[from] Done for function main
[from] ====== DEPENDENCIES COMPUTED ======
       These dependencies hold at termination for the executions that terminate:
[from] Function multiple_update_safe:
  b FROM x; y (and SELF)
  c FROM x; y (and SELF)
  \result FROM x; y
[from] Function multiple_update_unsafe:
  b FROM x
  c FROM y
  \result FROM \nothing
[from] Function multiple_update_wrong_1:
  NON TERMINATING - NO EFFECTS
[from] Function multiple_update_wrong_2:
  NON TERMINATING - NO EFFECTS
[from] Function multiple_update_wrong_3:
  NON TERMINATING - NO EFFECTS
[from] Function main:
  \result FROM \nothing
[from] ====== END OF DEPENDENCIES ======
[inout] Out (internal) for function multiple_update_safe:
          tmp; tmp_0; b; c; __retres
[inout] Inputs for function multiple_update_safe:
          \nothing
[inout] Out (internal) for function multiple_update_unsafe:
          tmp; tmp_0; b; c; __retres
[inout] Inputs for function multiple_update_unsafe:
          \nothing
[inout] Out (internal) for function multiple_update_wrong_1:
          \nothing
[inout] Inputs for function multiple_update_wrong_1:
          \nothing
[inout] Out (internal) for function multiple_update_wrong_2:
          \nothing
[inout] Inputs for function multiple_update_wrong_2:
          \nothing
[inout] Out (internal) for function multiple_update_wrong_3:
          \nothing
[inout] Inputs for function multiple_update_wrong_3:
          \nothing
[inout] Out (internal) for function main:
          b; c; __retres
[inout] Inputs for function main:
          foo
