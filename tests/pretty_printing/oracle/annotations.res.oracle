[kernel] Parsing tests/pretty_printing/annotations.i (no preprocessing)
/* Generated by Frama-C */
/*@ axiomatic A {
      predicate P(ℤ x) 
        reads \nothing;
      
      }
 */
/*@ ghost int global_decl; */
/*@ ghost int global_def = 42; */
/*@ requires P(x) ∧ x > 0;
    ensures P(\old(x)); */
void function_no_ghost(int x)
{
  int y = 0;
  /*@ loop invariant 0 ≤ y ≤ x;
      loop assigns y;
      loop variant x - y; */
  while (y < x) {
    /*@ assert y < x; */ ;
    y ++;
    /*@ assert y ≤ x; */ ;
  }
  /*@ assert y ≡ x; */ ;
  /*@ requires y ≡ x;
      ensures y ≢ x;
      assigns y; */
  {
    y --;
    y *= 2;
  }
  /*@ requires y ≥ 0; */
  y /= y;
  return;
}

/*@ requires P(x) ∧ x > 0;
    ensures P(\old(x)); */
void function_with_ghost(int x)
{
  /*@ ghost int y = 0; */
  /*@ ghost
    /@ loop invariant 0 ≤ y ≤ x;
       loop assigns y;
       loop variant x - y; @/
    while (y < x) {
      /@ assert y < x; @/
      ;
      y ++;
      /@ assert y ≤ x; @/
      ;
    }
  */
  /*@ assert y ≡ x; */ ;
  /*@ ghost
    /@ requires y ≡ x;
       ensures y ≢ x;
       assigns y; @/
    {
      y --;
      y *= 2;
    }
  */
  /*@ ghost /@ requires y ≥ 0; @/
    y /= y; */
  return;
}

/*@ ghost
  /@ requires P(x) ∧ x > 0;
     ensures P(\old(x)); @/
  void ghost_function(int x)
  {
    int y = 0;
    /@ loop invariant 0 ≤ y ≤ x;
       loop assigns y;
       loop variant x - y; @/
    while (y < x) {
      /@ assert y < x; @/
      ;
      y ++;
      /@ assert y ≤ x; @/
      ;
    }
    /@ assert y ≡ x; @/
    ;
    /@ requires y ≡ x;
       ensures y ≢ x;
       assigns y; @/
    {
      y --;
      y *= 2;
    }
    /@ requires y ≥ 0; @/
    y /= y;
    return;
  }

*/

/*@ ghost void function_declaration(int variable); */

void reference_function(void)
{
  /*@ ghost function_declaration(42); */
  return;
}


[kernel] Parsing tests/pretty_printing/result/annotations.c (with preprocessing)
[kernel] Parsing tests/pretty_printing/annotations.i (no preprocessing)
[kernel] tests/pretty_printing/annotations.i:13: Warning: 
  def'n of func function_no_ghost at tests/pretty_printing/annotations.i:13 (sum 9297192) conflicts with the one at tests/pretty_printing/result/annotations.c:12 (sum 14988159); keeping the one at tests/pretty_printing/result/annotations.c:12.
[kernel] tests/pretty_printing/annotations.i:43: Warning: 
  def'n of func function_with_ghost at tests/pretty_printing/annotations.i:43 (sum 9297192) conflicts with the one at tests/pretty_printing/result/annotations.c:38 (sum 14988159); keeping the one at tests/pretty_printing/result/annotations.c:38.
[kernel] tests/pretty_printing/annotations.i:80: Warning: 
  def'n of func ghost_function at tests/pretty_printing/annotations.i:80 (sum 9297192) conflicts with the one at tests/pretty_printing/result/annotations.c:71 (sum 14988159); keeping the one at tests/pretty_printing/result/annotations.c:71.
[kernel] tests/pretty_printing/annotations.i:111: Warning: 
  dropping duplicate def'n of func reference_function at tests/pretty_printing/annotations.i:111 in favor of that at tests/pretty_printing/result/annotations.c:102
/* Generated by Frama-C */
/*@ axiomatic A {
      predicate P(ℤ x) 
        reads \nothing;
      
      }
 */
/*@ ghost int global_decl; */
/*@ ghost int global_def = 42; */
/*@ requires P(x) ∧ x > 0;
    ensures P(\old(x)); */
void function_no_ghost(int x)
{
  int y = 0;
  /*@ loop invariant 0 ≤ y ≤ x;
      loop assigns y;
      loop variant x - y; */
  while (y < x) {
    /*@ assert y < x; */ ;
    y ++;
    /*@ assert y ≤ x; */ ;
  }
  /*@ assert y ≡ x; */ ;
  /*@ requires y ≡ x;
      ensures y ≢ x;
      assigns y; */
  {
    y --;
    y *= 2;
  }
  /*@ requires y ≥ 0; */
  y /= y;
  return;
}

/*@ requires P(x) ∧ x > 0;
    ensures P(\old(x)); */
void function_with_ghost(int x)
{
  /*@ ghost int y = 0; */
  /*@ ghost
    /@ loop invariant 0 ≤ y ≤ x;
       loop assigns y;
       loop variant x - y; @/
    while (y < x) {
      /@ assert y < x; @/
      ;
      y ++;
      /@ assert y ≤ x; @/
      ;
    }
  */
  /*@ assert y ≡ x; */ ;
  /*@ ghost
    /@ requires y ≡ x;
       ensures y ≢ x;
       assigns y; @/
    {
      y --;
      y *= 2;
    }
  */
  /*@ ghost /@ requires y ≥ 0; @/
    y /= y; */
  return;
}

/*@ ghost
  /@ requires P(x) ∧ x > 0;
     ensures P(\old(x)); @/
  void ghost_function(int x)
  {
    int y = 0;
    /@ loop invariant 0 ≤ y ≤ x;
       loop assigns y;
       loop variant x - y; @/
    while (y < x) {
      /@ assert y < x; @/
      ;
      y ++;
      /@ assert y ≤ x; @/
      ;
    }
    /@ assert y ≡ x; @/
    ;
    /@ requires y ≡ x;
       ensures y ≢ x;
       assigns y; @/
    {
      y --;
      y *= 2;
    }
    /@ requires y ≥ 0; @/
    y /= y;
    return;
  }

*/

/*@ ghost void function_declaration(int variable); */

void reference_function(void)
{
  /*@ ghost function_declaration(42); */
  return;
}


