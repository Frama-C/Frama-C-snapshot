[kernel] Parsing share/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/sparecode/intra.i (no preprocessing)
[slicing] slicing requests in progress...
[value] Analyzing a complete application starting at main
[value] Computing initial state
[value] Initial state computed
[value:initial-state] Values of globals at initialization
  G ∈ {0}
  X10 ∈ {0}
  Y10 ∈ {0}
[value] computing for function param <- main.
        Called from tests/sparecode/intra.i:82.
[value] Recording results for param
[value] Done for function param
[value] computing for function tmp <- main.
        Called from tests/sparecode/intra.i:83.
tests/sparecode/intra.i:21:[value] assertion got status valid.
tests/sparecode/intra.i:23:[value] assertion got status valid.
[value] Recording results for tmp
[value] Done for function tmp
[value] computing for function spare_called_fct <- main.
        Called from tests/sparecode/intra.i:84.
[value] Recording results for spare_called_fct
[value] Done for function spare_called_fct
[value] computing for function call_two_outputs <- main.
        Called from tests/sparecode/intra.i:85.
[value] computing for function two_outputs <- call_two_outputs <- main.
        Called from tests/sparecode/intra.i:49.
[value] Recording results for two_outputs
[value] Done for function two_outputs
[value] computing for function two_outputs <- call_two_outputs <- main.
        Called from tests/sparecode/intra.i:53.
[value] Recording results for two_outputs
[value] Done for function two_outputs
[value] Recording results for call_two_outputs
[value] Done for function call_two_outputs
[value] computing for function loop <- main.
        Called from tests/sparecode/intra.i:86.
tests/sparecode/intra.i:64:[value] assertion got status valid.
tests/sparecode/intra.i:65:[value] loop invariant got status valid.
tests/sparecode/intra.i:67:[value] entering loop for the first time
[value] Recording results for loop
[value] Done for function loop
[value] computing for function assign <- main.
        Called from tests/sparecode/intra.i:87.
[value] Recording results for assign
[value] Done for function assign
[value] computing for function assign <- main.
        Called from tests/sparecode/intra.i:88.
[value] Recording results for assign
[value] Done for function assign
[value] computing for function stop <- main.
        Called from tests/sparecode/intra.i:91.
tests/sparecode/intra.i:91:[kernel] warning: Neither code nor specification for function stop, generating default assigns from the prototype
[value] using specification for function stop
[value] Done for function stop
tests/sparecode/intra.i:93:[value] entering loop for the first time
[value] Recording results for main
[value] done for function main
[slicing] making slicing project 'Slicing'...
[slicing] interpreting slicing requests from the command line...
[pdg] computing for function main
[from] Computing for function param
[from] Done for function param
[from] Computing for function tmp
[from] Done for function tmp
[from] Computing for function spare_called_fct
[from] Done for function spare_called_fct
[from] Computing for function call_two_outputs
[from] Computing for function two_outputs <-call_two_outputs
[from] Done for function two_outputs
[from] Done for function call_two_outputs
[from] Computing for function loop
[from] Done for function loop
[from] Computing for function assign
[from] Done for function assign
[from] Computing for function stop
[from] Done for function stop
[pdg] done for function main
[slicing] applying all slicing requests...
[slicing] applying 0 actions...
[slicing] applying all slicing requests...
[slicing] applying 1 actions...
[slicing] applying actions: 1/1...
[pdg] computing for function assign
[pdg] done for function assign
[pdg] computing for function loop
[pdg] done for function loop
[pdg] computing for function call_two_outputs
[pdg] done for function call_two_outputs
[pdg] computing for function two_outputs
[pdg] done for function two_outputs
[pdg] computing for function tmp
[pdg] done for function tmp
[pdg] computing for function param
[pdg] done for function param
[slicing] exporting project to 'Slicing export'...
[slicing] applying all slicing requests...
[slicing] applying 0 actions...
[sparecode] remove unused global declarations from project 'Slicing export tmp'
[sparecode] removed unused global declarations in new project 'Slicing export'
/* Generated by Frama-C */
int G;
int tmp_slice_1(int a)
{
  int x;
  x = a;
  /*@ assert x ≡ a; */ ;
  return x;
}

int param_slice_1(int a)
{
  return a;
}

int two_outputs_slice_1(int a, int b)
{
  G += b;
  return a;
}

int call_two_outputs_slice_1(void)
{
  int x;
  int any_b;
  int any_a;
  int a;
  int b;
  any_b = 1;
  any_a = 2;
  a = 1;
  b = any_b;
  x = two_outputs_slice_1(a,b);
  G = 1;
  b = 2;
  a = any_a;
  two_outputs_slice_1(a,b);
  return x;
}

void assign_slice_1(int *p, int *q)
{
  *p = *q;
  return;
}

int loop_slice_1(int x)
{
  int i;
  i = 0;
  while (i < x) i ++;
  return i;
}

int main(void)
{
  int __retres;
  int res;
  int spare_ref;
  int x;
  int y;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  res = 0;
  spare_ref = 3;
  y = 2;
  { /* sequence */
    tmp_0 = param_slice_1(2);
    res += tmp_0;
  }
  { /* sequence */
    tmp_1 = tmp_slice_1(4);
    res += tmp_1;
  }
  { /* sequence */
    tmp_2 = call_two_outputs_slice_1();
    res += tmp_2;
  }
  { /* sequence */
    tmp_3 = loop_slice_1(10);
    res += tmp_3;
  }
  assign_slice_1(& x,& y);
  __retres = (res + G) + x;
  return __retres;
}


