[kernel] Parsing share/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/slicing/loop_simple.i (no preprocessing)
[value] Analyzing a complete application starting at main
[value] Computing initial state
[value] Initial state computed
[value:initial-state] Values of globals at initialization
  
tests/slicing/loop_simple.i:8:[value] entering loop for the first time
tests/slicing/loop_simple.i:10:[value] entering loop for the first time
tests/slicing/loop_simple.i:12:[value] entering loop for the first time
tests/slicing/loop_simple.i:16:[value] entering loop for the first time
[value] Recording results for main
[value] done for function main
[from] Computing for function main
[from] Done for function main
[from] ====== DEPENDENCIES COMPUTED ======
       These dependencies hold at termination for the executions that terminate:
[from] Function main:
  \result FROM \nothing
[from] ====== END OF DEPENDENCIES ======
[slicing] slicing requests in progress...
[slicing] making slicing project 'Slicing'...
[slicing] interpreting slicing requests from the command line...
[pdg] computing for function main
[pdg] done for function main
[slicing] applying all slicing requests...
[slicing] applying 0 actions...
[slicing] applying all slicing requests...
[slicing] applying 1 actions...
[slicing] applying actions: 1/1...
[slicing] exporting project to 'Slicing export'...
[slicing] applying all slicing requests...
[slicing] applying 0 actions...
[sparecode] remove unused global declarations from project 'Slicing export tmp'
[sparecode] removed unused global declarations in new project 'Slicing export'
/* Generated by Frama-C */
int main(void)
{
  int a;
  int c;
  int volatile b;
  b = 0;
  a = 1;
  c = 0;
  /*@ loop assigns c, a; */
  while (c <= 5) {
    a = 2;
    c ++;
  }
  if (b) goto L;
  a += 2;
  L: a += 3;
  goto H;
  H: ;
  return a;
}


[kernel] Parsing share/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/slicing/result/ocode_0_loop_simple.i (no preprocessing)
