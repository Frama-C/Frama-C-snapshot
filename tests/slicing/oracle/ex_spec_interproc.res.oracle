[kernel] Parsing tests/slicing/ex_spec_interproc.i (no preprocessing)
[value] Analyzing a complete application starting at main
[value] Computing initial state
[value] Initial state computed
[value:initial-state] Values of globals at initialization
  X ∈ {0}
  Y ∈ {0}
  Z ∈ {0}
  I ∈ {0}
  J ∈ {0}
  K ∈ {0}
  L ∈ {0}
  M ∈ {0}
[value] computing for function f <- main.
  Called from tests/slicing/ex_spec_interproc.i:35.
[value] computing for function g <- f <- main.
  Called from tests/slicing/ex_spec_interproc.i:21.
[value] Recording results for g
[value] Done for function g
[value] computing for function g <- f <- main.
  Called from tests/slicing/ex_spec_interproc.i:22.
[value] Recording results for g
[value] Done for function g
[value] Recording results for f
[value] Done for function f
[value] Recording results for main
[value] done for function main
[from] Computing for function g
[from] Done for function g
[from] Computing for function f
[from] Done for function f
[from] Computing for function main
[from] Done for function main
[from] ====== DEPENDENCIES COMPUTED ======
  These dependencies hold at termination for the executions that terminate:
[from] Function g:
  X FROM u
  Y FROM u; v
  \result FROM w
[from] Function f:
  X FROM c
  Y FROM c; d
  Z FROM e
  \result FROM c
[from] Function main:
  X FROM \nothing
  Y FROM \nothing
  Z FROM \nothing
  I FROM \nothing
  J FROM \nothing
  K FROM \nothing
  L FROM \nothing
  M FROM \nothing
  \result FROM \nothing
[from] ====== END OF DEPENDENCIES ======
[slicing] initializing slicing ...
[pdg] computing for function f
[pdg] done for function f
Slicing project worklist [default] =
[f_slice_1 = (n:32(restrict to X) ,<[--d], [---]>)]

[slicing] applying all slicing requests...
[slicing] applying 1 actions...
[slicing] applying actions: 1/1...
int X;
int Y;
int Z;
Print slice =
f_slice_1:
(InCtrl: <[--d], [ S ]>)
(In1: <[---], [ S ]>)
(In2: <[---], [ S ]>)
(In3: <[--d], [ S ]>)
(In4: <[---], [ S ]>)
(In5: <[---], [ S ]>)
(OutRet: <[--d], [---]>)

/**/int f(/* <[---], [ S ]> */ int a, /* <[---], [ S ]> */ int b,
          /* <[--d], [ S ]> */ int c, /* <[---], [ S ]> */ int d,
          /* <[---], [ S ]> */ int e)
{
  /* <[--d], [ S ]> */ int r;
  /* <[---], [ S ]> */
  a ++;
  /* <[---], [ S ]> */
  b ++;
  /* <[--d], [ S ]> */
  c ++;
  /* <[---], [ S ]> */
  d ++;
  /* <[---], [ S ]> */
  e ++;
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[---], [ S ]>)
    (In2: <[---], [ S ]>)
    (In3: <[--d], [ S ]>)
    (OutRet: <[--d], [ S ]>)
    (Out(Y): <[---], [ S ]>)
    (Out(X): <[---], [ S ]>) */
  /* call to source function */
  /* <[--d], [ S ]> */
  r = g(a,b,c);
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[--d], [ S ]>)
    (In2: <[---], [ S ]>)
    (In3: <[---], [ S ]>)
    (OutRet: <[---], [ S ]>)
    (Out(X): <[--d], [ S ]>)
    (Out(Y): <[---], [ S ]>) */
  /* call to source function */
  /* <[--d], [ S ]> */
  Z = g(r,d,e);
  /* <[--d], [---]> */
  return X;
}

int I;
int J;
int K;
int L;
int M;
Slicing project worklist [default] =


[slicing] exporting project to 'Sliced code'...
[slicing] applying all slicing requests...
[slicing] applying 0 actions...
[sparecode] remove unused global declarations from project 'Sliced code tmp'
[sparecode] removed unused global declarations in new project 'Sliced code'
/* Generated by Frama-C */
int X;
int Y;
int g(int u, int v, int w)
{
  u ++;
  v ++;
  w ++;
  X = u;
  Y = u + v;
  return w;
}

int Z;
int f_slice_1(int a, int b, int c, int d, int e)
{
  int r;
  a ++;
  b ++;
  c ++;
  d ++;
  e ++;
  r = g(a,b,c);
  Z = g(r,d,e);
  return X;
}


[slicing] reinitializing slicing ...
Slicing project worklist [default] =
[f_slice_1 = (n:32(restrict to X) ,<[--d], [---]>)]

[slicing] applying all slicing requests...
[slicing] applying 1 actions...
[slicing] applying actions: 1/1...
[pdg] computing for function g
[pdg] done for function g
int X;
int Y;
Print slice =
g_slice_1:
(InCtrl: <[---], [--d]>)
(In1: <[---], [--d]>)
(In2: <[---], [ S ]>)
(In3: <[---], [--d]>)
(OutRet: <[---], [--d]>)

/**/int g(/* <[---], [--d]> */ int u, /* <[---], [ S ]> */ int v,
          /* <[---], [--d]> */ int w)
{
  /* <[---], [--d]> */
  u ++;
  /* <[---], [ S ]> */
  v ++;
  /* <[---], [--d]> */
  w ++;
  /* <[---], [--d]> */
  X = u;
  /* <[---], [ S ]> */
  Y = u + v;
  /* <[---], [--d]> */
  return w;
}

int Z;
Print slice =
f_slice_1:
(InCtrl: <[--d], [ S ]>)
(In1: <[---], [ S ]>)
(In2: <[---], [ S ]>)
(In3: <[--d], [ S ]>)
(In4: <[---], [ S ]>)
(In5: <[---], [ S ]>)
(OutRet: <[--d], [---]>)

/**/int f(/* <[---], [ S ]> */ int a, /* <[---], [ S ]> */ int b,
          /* <[--d], [ S ]> */ int c, /* <[---], [ S ]> */ int d,
          /* <[---], [ S ]> */ int e)
{
  /* <[--d], [ S ]> */ int r;
  /* <[---], [ S ]> */
  a ++;
  /* <[---], [ S ]> */
  b ++;
  /* <[--d], [ S ]> */
  c ++;
  /* <[---], [ S ]> */
  d ++;
  /* <[---], [ S ]> */
  e ++;
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[---], [ S ]>)
    (In2: <[---], [ S ]>)
    (In3: <[--d], [ S ]>)
    (OutRet: <[--d], [ S ]>) */
  /* call to g_slice_1:
    (InCtrl: <[---], [--d]>)
    (In1: <[---], [--d]>)
    (In2: <[---], [ S ]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  r = g(a,b,c);
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[--d], [ S ]>)
    (In2: <[---], [ S ]>)
    (In3: <[---], [ S ]>)
    (Out(X): <[--d], [---]>) */
  /* call to g_slice_1:
    (InCtrl: <[---], [--d]>)
    (In1: <[---], [--d]>)
    (In2: <[---], [ S ]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  Z = g(r,d,e);
  /* <[--d], [---]> */
  return X;
}

int I;
int J;
int K;
int L;
int M;
Slicing project worklist [default] =


[slicing] exporting project to 'Sliced code'...
[slicing] applying all slicing requests...
[slicing] applying 0 actions...
[sparecode] remove unused global declarations from project 'Sliced code tmp'
[sparecode] removed unused global declarations in new project 'Sliced code'
/* Generated by Frama-C */
int X;
int Y;
int g_slice_1(int u, int v, int w)
{
  u ++;
  v ++;
  w ++;
  X = u;
  Y = u + v;
  return w;
}

int f_slice_1(int a, int b, int c, int d, int e)
{
  int r;
  a ++;
  b ++;
  c ++;
  d ++;
  e ++;
  r = g_slice_1(a,b,c);
  g_slice_1(r,d,e);
  return X;
}


[slicing] reinitializing slicing ...
Slicing project worklist [default] =
[f_slice_1 = (n:32(restrict to X) ,<[--d], [---]>)]

[slicing] applying all slicing requests...
[slicing] applying 1 actions...
[slicing] applying actions: 1/1...
int X;
int Y;
Print slice =
g_slice_1:
(InCtrl: <[---], [--d]>)
(In1: <[---], [--d]>)
(In3: <[---], [--d]>)
(OutRet: <[---], [--d]>)

/**/int g(/* <[---], [--d]> */ int u, /* <[---], [---]> */ int v,
          /* <[---], [--d]> */ int w)
{
  /* <[---], [--d]> */
  u ++;
  /* <[---], [---]> */
  v ++;
  /* <[---], [--d]> */
  w ++;
  /* <[---], [--d]> */
  X = u;
  /* <[---], [---]> */
  Y = u + v;
  /* <[---], [--d]> */
  return w;
}

int Z;
Print slice =
f_slice_1:
(InCtrl: <[--d], [ S ]>)
(In1: <[---], [ S ]>)
(In3: <[--d], [ S ]>)
(In5: <[---], [ S ]>)
(OutRet: <[--d], [---]>)

/**/int f(/* <[---], [ S ]> */ int a, /* <[---], [---]> */ int b,
          /* <[--d], [ S ]> */ int c, /* <[---], [---]> */ int d,
          /* <[---], [ S ]> */ int e)
{
  /* <[--d], [ S ]> */ int r;
  /* <[---], [ S ]> */
  a ++;
  /* <[---], [---]> */
  b ++;
  /* <[--d], [ S ]> */
  c ++;
  /* <[---], [---]> */
  d ++;
  /* <[---], [ S ]> */
  e ++;
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[---], [ S ]>)
    (In3: <[--d], [ S ]>)
    (OutRet: <[--d], [ S ]>) */
  /* call to g_slice_1:
    (InCtrl: <[---], [--d]>)
    (In1: <[---], [--d]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  r = g(a,b,c);
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[--d], [ S ]>)
    (In3: <[---], [ S ]>)
    (Out(X): <[--d], [---]>) */
  /* call to g_slice_1:
    (InCtrl: <[---], [--d]>)
    (In1: <[---], [--d]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  Z = g(r,d,e);
  /* <[--d], [---]> */
  return X;
}

int I;
int J;
int K;
int L;
int M;
Slicing project worklist [default] =


[pdg] computing for function main
[pdg] done for function main
[slicing] applying all slicing requests...
[slicing] applying 1 actions...
[slicing] applying actions: 1/1...
int X;
int Y;
Print slice =
g_slice_1:
(InCtrl: <[---], [--d]>)
(In1: <[---], [--d]>)
(In3: <[---], [--d]>)
(OutRet: <[---], [--d]>)

/**/int g(/* <[---], [--d]> */ int u, /* <[---], [---]> */ int v,
          /* <[---], [--d]> */ int w)
{
  /* <[---], [--d]> */
  u ++;
  /* <[---], [---]> */
  v ++;
  /* <[---], [--d]> */
  w ++;
  /* <[---], [--d]> */
  X = u;
  /* <[---], [---]> */
  Y = u + v;
  /* <[---], [--d]> */
  return w;
}

int Z;
Print slice =
f_slice_1:
(InCtrl: <[--d], [ S ]>)
(In1: <[---], [ S ]>)
(In3: <[--d], [ S ]>)
(In5: <[---], [ S ]>)
(OutRet: <[--d], [---]>)

/**/int f(/* <[---], [ S ]> */ int a, /* <[---], [---]> */ int b,
          /* <[--d], [ S ]> */ int c, /* <[---], [---]> */ int d,
          /* <[---], [ S ]> */ int e)
{
  /* <[--d], [ S ]> */ int r;
  /* <[---], [ S ]> */
  a ++;
  /* <[---], [---]> */
  b ++;
  /* <[--d], [ S ]> */
  c ++;
  /* <[---], [---]> */
  d ++;
  /* <[---], [ S ]> */
  e ++;
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[---], [ S ]>)
    (In3: <[--d], [ S ]>)
    (OutRet: <[--d], [ S ]>) */
  /* call to g_slice_1:
    (InCtrl: <[---], [--d]>)
    (In1: <[---], [--d]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  r = g(a,b,c);
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[--d], [ S ]>)
    (In3: <[---], [ S ]>)
    (Out(X): <[--d], [---]>) */
  /* call to g_slice_1:
    (InCtrl: <[---], [--d]>)
    (In1: <[---], [--d]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  Z = g(r,d,e);
  /* <[--d], [---]> */
  return X;
}

int I;
int J;
int K;
int L;
int M;
Print slice = main_slice_1: (InCtrl: <[--d], [ S ]>)

/**/int main(void)
{
  /* <[---], [---]> */ int res;
  /* <[---], [ S ]> */
  I = 0;
  /* <[---], [---]> */
  J = 0;
  /* <[--d], [ S ]> */
  K = 0;
  /* <[---], [---]> */
  L = 0;
  /* <[---], [ S ]> */
  M = 0;
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[---], [ S ]>)
    (In3: <[--d], [ S ]>)
    (In5: <[---], [ S ]>) */
  /* call to f_slice_1:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[---], [ S ]>)
    (In3: <[--d], [ S ]>)
    (In5: <[---], [ S ]>)
    (OutRet: <[--d], [---]>) */
  /* <[--d], [ S ]> */
  res = f(I,J,K,L,M);
  /* <[---], [---]> */
  return res;
}

Slicing project worklist [default] =


[slicing] exporting project to 'Sliced code'...
[slicing] applying all slicing requests...
[slicing] applying 0 actions...
[sparecode] remove unused global declarations from project 'Sliced code tmp'
[sparecode] removed unused global declarations in new project 'Sliced code'
/* Generated by Frama-C */
int X;
int g_slice_1(int u, int w)
{
  u ++;
  w ++;
  X = u;
  return w;
}

int f_slice_1(int a, int c, int e)
{
  int r;
  a ++;
  c ++;
  e ++;
  r = g_slice_1(a,c);
  g_slice_1(r,e);
  return X;
}

int I;
int K;
int M;
void main(void)
{
  I = 0;
  K = 0;
  M = 0;
  f_slice_1(I,K,M);
  return;
}


int X;
int Y;
Print slice =
g_slice_1:
(InCtrl: <[---], [--d]>)
(In1: <[---], [--d]>)
(In3: <[---], [--d]>)
(OutRet: <[---], [--d]>)

/**/int g(/* <[---], [--d]> */ int u, /* <[---], [---]> */ int v,
          /* <[---], [--d]> */ int w)
{
  /* <[---], [--d]> */
  u ++;
  /* <[---], [---]> */
  v ++;
  /* <[---], [--d]> */
  w ++;
  /* <[---], [--d]> */
  X = u;
  /* <[---], [---]> */
  Y = u + v;
  /* <[---], [--d]> */
  return w;
}

int Z;
Print slice =
f_slice_1:
(InCtrl: <[--d], [ S ]>)
(In1: <[---], [ S ]>)
(In3: <[--d], [ S ]>)
(In5: <[---], [ S ]>)
(OutRet: <[--d], [---]>)

/**/int f(/* <[---], [ S ]> */ int a, /* <[---], [---]> */ int b,
          /* <[--d], [ S ]> */ int c, /* <[---], [---]> */ int d,
          /* <[---], [ S ]> */ int e)
{
  /* <[--d], [ S ]> */ int r;
  /* <[---], [ S ]> */
  a ++;
  /* <[---], [---]> */
  b ++;
  /* <[--d], [ S ]> */
  c ++;
  /* <[---], [---]> */
  d ++;
  /* <[---], [ S ]> */
  e ++;
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[---], [ S ]>)
    (In3: <[--d], [ S ]>)
    (OutRet: <[--d], [ S ]>) */
  /* call to g_slice_1:
    (InCtrl: <[---], [--d]>)
    (In1: <[---], [--d]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  r = g(a,b,c);
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[--d], [ S ]>)
    (In3: <[---], [ S ]>)
    (Out(X): <[--d], [---]>) */
  /* call to g_slice_1:
    (InCtrl: <[---], [--d]>)
    (In1: <[---], [--d]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  Z = g(r,d,e);
  /* <[--d], [---]> */
  return X;
}

int I;
int J;
int K;
int L;
int M;
Slicing project worklist [default] =


int f(int a, int b, int c, int d, int e)
{
  int r;
  /* 9 */
  a ++;
  /* 10 */
  b ++;
  /* 11 */
  c ++;
  /* 12 */
  d ++;
  /* 13 */
  e ++;
  /* 14 */
  r = g(a,b,c);
  /* 15 */
  Z = g(r,d,e);
  /* 17 */
  return X;
}

Slicing project worklist [default] =
[f_slice_1 = (n:13(restrict to a) ,<[--d], [---]>)]

[slicing] applying all slicing requests...
[slicing] applying 1 actions...
[slicing] applying actions: 1/1...
int X;
int Y;
Print slice =
g_slice_1:
(InCtrl: <[---], [--d]>)
(In1: <[---], [--d]>)
(In3: <[---], [--d]>)
(OutRet: <[---], [--d]>)

/**/int g(/* <[---], [--d]> */ int u, /* <[---], [---]> */ int v,
          /* <[---], [--d]> */ int w)
{
  /* <[---], [--d]> */
  u ++;
  /* <[---], [---]> */
  v ++;
  /* <[---], [--d]> */
  w ++;
  /* <[---], [--d]> */
  X = u;
  /* <[---], [---]> */
  Y = u + v;
  /* <[---], [--d]> */
  return w;
}

int Z;
Print slice =
f_slice_1:
(InCtrl: <[--d], [ S ]>)
(In1: <[--d], [ S ]>)
(In3: <[--d], [ S ]>)
(In5: <[---], [ S ]>)
(OutRet: <[--d], [---]>)

/**/int f(/* <[--d], [ S ]> */ int a, /* <[---], [---]> */ int b,
          /* <[--d], [ S ]> */ int c, /* <[---], [---]> */ int d,
          /* <[---], [ S ]> */ int e)
{
  /* <[--d], [ S ]> */ int r;
  /* <[--d], [ S ]> */
  a ++;
  /* <[---], [---]> */
  b ++;
  /* <[--d], [ S ]> */
  c ++;
  /* <[---], [---]> */
  d ++;
  /* <[---], [ S ]> */
  e ++;
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[---], [ S ]>)
    (In3: <[--d], [ S ]>)
    (OutRet: <[--d], [ S ]>) */
  /* call to g_slice_1:
    (InCtrl: <[---], [--d]>)
    (In1: <[---], [--d]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  r = g(a,b,c);
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[--d], [ S ]>)
    (In3: <[---], [ S ]>)
    (Out(X): <[--d], [---]>) */
  /* call to g_slice_1:
    (InCtrl: <[---], [--d]>)
    (In1: <[---], [--d]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  Z = g(r,d,e);
  /* <[--d], [---]> */
  return X;
}

int I;
int J;
int K;
int L;
int M;
Slicing project worklist [default] =


[slicing] reinitializing slicing ...
[slicing] applying all slicing requests...
[slicing] applying 2 actions...
[slicing] applying actions: 1/2...
[slicing] applying actions: 2/2...
Print slice =
f_slice_2:
(InCtrl: <[--d], [ S ]>)
(In1: <[---], [ S ]>)
(In3: <[---], [ S ]>)
(In5: <[--d], [ S ]>)

/**/int f(/* <[---], [ S ]> */ int a, /* <[---], [---]> */ int b,
          /* <[---], [ S ]> */ int c, /* <[---], [---]> */ int d,
          /* <[--d], [ S ]> */ int e)
{
  /* <[---], [ S ]> */ int r;
  /* <[---], [ S ]> */
  a ++;
  /* <[---], [---]> */
  b ++;
  /* <[---], [ S ]> */
  c ++;
  /* <[---], [---]> */
  d ++;
  /* <[--d], [ S ]> */
  e ++;
  /* sig call:
    (InCtrl: <[---], [ S ]>)
    (In1: <[---], [ S ]>)
    (In3: <[---], [ S ]>)
    (OutRet: <[---], [ S ]>) */
  /* call to g_slice_1:
    (InCtrl: <[---], [--d]>)
    (In1: <[---], [--d]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[---], [ S ]> */
  r = g(a,b,c);
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[---], [ S ]>)
    (In3: <[--d], [ S ]>)
    (OutRet: <[--d], [---]>) */
  /* call to g_slice_1:
    (InCtrl: <[---], [--d]>)
    (In1: <[---], [--d]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  Z = g(r,d,e);
  /* <[---], [---]> */
  return X;
}


[slicing] exporting project to 'Sliced code'...
[slicing] applying all slicing requests...
[slicing] applying 0 actions...
[sparecode] remove unused global declarations from project 'Sliced code tmp'
[sparecode] removed unused global declarations in new project 'Sliced code'
/* Generated by Frama-C */
int X;
int g_slice_1(int u, int w)
{
  u ++;
  w ++;
  X = u;
  return w;
}

int Z;
void f_slice_2(int a, int c, int e)
{
  int r;
  a ++;
  c ++;
  e ++;
  r = g_slice_1(a,c);
  Z = g_slice_1(r,e);
  return;
}

int f_slice_1(int a, int c, int e)
{
  int r;
  a ++;
  c ++;
  e ++;
  r = g_slice_1(a,c);
  g_slice_1(r,e);
  return X;
}


[slicing] reinitializing slicing ...
[slicing] applying all slicing requests...
[slicing] applying 1 actions...
[slicing] applying actions: 1/1...
Slicing project worklist [default] =
[main_slice_1 = change_call for call 24 -> f_slice_1]

[slicing] exporting project to 'Sliced code'...
[slicing] applying all slicing requests...
[slicing] applying 1 actions...
[slicing] applying actions: 1/1...
[sparecode] remove unused global declarations from project 'Sliced code tmp'
[sparecode] removed unused global declarations in new project 'Sliced code'
/* Generated by Frama-C */
int X;
int g_slice_2(int w)
{
  w ++;
  return w;
}

void g_slice_1(int u)
{
  u ++;
  X = u;
  return;
}

int f_slice_1(int c)
{
  int r;
  c ++;
  r = g_slice_2(c);
  g_slice_1(r);
  return X;
}

int K;
void main(void)
{
  K = 0;
  f_slice_1(K);
  return;
}


int X;
int Y;
Print slice =
g_slice_2:
(InCtrl: <[---], [--d]>)
(In3: <[---], [--d]>)
(OutRet: <[---], [--d]>)

/**/int g(/* <[---], [---]> */ int u, /* <[---], [---]> */ int v,
          /* <[---], [--d]> */ int w)
{
  /* <[---], [---]> */
  u ++;
  /* <[---], [---]> */
  v ++;
  /* <[---], [--d]> */
  w ++;
  /* <[---], [---]> */
  X = u;
  /* <[---], [---]> */
  Y = u + v;
  /* <[---], [--d]> */
  return w;
}

Print slice = g_slice_1: (InCtrl: <[---], [--d]>)
                         (In1: <[---], [--d]>)

/**/int g(/* <[---], [--d]> */ int u, /* <[---], [---]> */ int v,
          /* <[---], [---]> */ int w)
{
  /* <[---], [--d]> */
  u ++;
  /* <[---], [---]> */
  v ++;
  /* <[---], [---]> */
  w ++;
  /* <[---], [--d]> */
  X = u;
  /* <[---], [---]> */
  Y = u + v;
  /* <[---], [---]> */
  return w;
}

int Z;
Print slice =
f_slice_1:
(InCtrl: <[--d], [ S ]>)
(In3: <[--d], [ S ]>)
(OutRet: <[--d], [---]>)

/**/int f(/* <[---], [---]> */ int a, /* <[---], [---]> */ int b,
          /* <[--d], [ S ]> */ int c, /* <[---], [---]> */ int d,
          /* <[---], [---]> */ int e)
{
  /* <[--d], [ S ]> */ int r;
  /* <[---], [---]> */
  a ++;
  /* <[---], [---]> */
  b ++;
  /* <[--d], [ S ]> */
  c ++;
  /* <[---], [---]> */
  d ++;
  /* <[---], [---]> */
  e ++;
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In3: <[--d], [ S ]>)
    (OutRet: <[--d], [ S ]>) */
  /* call to g_slice_2:
    (InCtrl: <[---], [--d]>)
    (In3: <[---], [--d]>)
    (OutRet: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  r = g(a,b,c);
  /* sig call:
    (InCtrl: <[--d], [ S ]>)
    (In1: <[--d], [ S ]>)
    (Out(X): <[--d], [---]>) */
  /* call to g_slice_1: (InCtrl: <[---], [--d]>)
                        (In1: <[---], [--d]>) */
  /* <[--d], [ S ]> */
  Z = g(r,d,e);
  /* <[--d], [---]> */
  return X;
}

int I;
int J;
int K;
int L;
int M;
Print slice = main_slice_1: (InCtrl: <[--d], [ S ]>)

/**/int main(void)
{
  /* <[---], [---]> */ int res;
  /* <[---], [---]> */
  I = 0;
  /* <[---], [---]> */
  J = 0;
  /* <[--d], [ S ]> */
  K = 0;
  /* <[---], [---]> */
  L = 0;
  /* <[---], [---]> */
  M = 0;
  /* sig call: (InCtrl: <[--d], [ S ]>)
               (In3: <[--d], [ S ]>) */
  /* call to f_slice_1:
    (InCtrl: <[--d], [ S ]>)
    (In3: <[--d], [ S ]>)
    (OutRet: <[--d], [---]>) */
  /* <[--d], [ S ]> */
  res = f(I,J,K,L,M);
  /* <[---], [---]> */
  return res;
}

Slicing project worklist [default] =


