[kernel] Parsing tests/syntax/vla_loop.i (no preprocessing)
/* Generated by Frama-C */
/*@ assigns \nothing;
    frees p; */
 __attribute__((__FC_BUILTIN__)) void __fc_vla_free(void *p);

/*@ assigns \result;
    assigns \result \from \nothing;
    allocates \result; */
 __attribute__((__FC_BUILTIN__)) void *__fc_vla_alloc(unsigned int size);

void awhile(int x)
{
  int *p;
  while (1) {
    {
      unsigned int __lengthof_a1;
      /*@ assert alloca_bounds: 0 < sizeof(int) * x ≤ 4294967295; */ ;
      __lengthof_a1 = (unsigned int)x;
      int *a1 = __fc_vla_alloc(sizeof(int) * __lengthof_a1);
      p = (int *)(& a1);
      if (x) {
        __fc_vla_free((void *)a1);
        break;
      }
      else {
        __fc_vla_free((void *)a1);
        continue;
      }
    }
  }
  return;
}

int f(int i)
{
  int __retres;
  {
    unsigned int __lengthof_vla;
    if (i > 1) {
      __retres = 1;
      goto return_label;
    }
    /*@ assert alloca_bounds: 0 < sizeof(int) * i ≤ 4294967295; */ ;
    __lengthof_vla = (unsigned int)i;
    int *vla = __fc_vla_alloc(sizeof(int) * __lengthof_vla);
    __retres = 0;
    __fc_vla_free((void *)vla);
  }
  return_label: return __retres;
}

int g(int c)
{
  int __retres;
  {
    int ret;
    unsigned int __lengthof_a;
    if (c <= 0) {
      __retres = 4;
      goto return_label;
    }
    /*@ assert alloca_bounds: 0 < sizeof(int) * c ≤ 4294967295; */ ;
    __lengthof_a = (unsigned int)c;
    int *a = __fc_vla_alloc(sizeof(int) * __lengthof_a);
    *(a + (c - 1)) = 3;
    ret = *(a + (c - 1));
    __retres = ret;
    __fc_vla_free((void *)a);
  }
  return_label: return __retres;
}

int main(int argc, char **argv)
{
  int *p;
  switch (argc) {
    default:
    {
      unsigned int __lengthof_a;
      /*@ assert alloca_bounds: 0 < sizeof(int) * argc ≤ 4294967295; */ ;
      __lengthof_a = (unsigned int)argc;
      int *a = __fc_vla_alloc(sizeof(int) * __lengthof_a);
      while (1) {
        p = (int *)(& a);
        break;
      }
      ;
      __fc_vla_free((void *)a);
    }
  }
  {
    unsigned int __lengthof_b;
    /*@ assert alloca_bounds: 0 < sizeof(int) * argc ≤ 4294967295; */ ;
    __lengthof_b = (unsigned int)argc;
    int *b = __fc_vla_alloc(sizeof(int) * __lengthof_b);
    while (1) {
      p = (int *)(& b);
      break;
    }
    ;
    __fc_vla_free((void *)b);
  }
  {
    unsigned int __lengthof_c;
    /*@ assert alloca_bounds: 0 < sizeof(int) * argc ≤ 4294967295; */ ;
    __lengthof_c = (unsigned int)argc;
    int *c = __fc_vla_alloc(sizeof(int) * __lengthof_c);
    switch (argc) {
      case 1: {
                p = (int *)(& c);
                break;
              }
    }
    ;
    __fc_vla_free((void *)c);
  }
  {
    unsigned int __lengthof_d;
    /*@ assert alloca_bounds: 0 < sizeof(int) * argc ≤ 4294967295; */ ;
    __lengthof_d = (unsigned int)argc;
    int *d = __fc_vla_alloc(sizeof(int) * __lengthof_d);
    switch (argc) case 1: p = (int *)(& d);
    __fc_vla_free((void *)d);
  }
  return argc;
}


