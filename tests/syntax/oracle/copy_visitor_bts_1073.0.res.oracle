[kernel] Parsing tests/syntax/copy_visitor_bts_1073.c (with preprocessing)
/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
int f(int x);

int f(int x)
{
  return x;
}

int f1(int x)
{
  return x;
}

int g(int y)
{
  int tmp;
  tmp = f1(2 * y);
  return tmp;
}

int g1(int y)
{
  int tmp;
  tmp = f1(2 * y);
  return tmp;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1(char const * __restrict format);

/*@ requires valid_read_string(format);
    requires valid_read_string(param1);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param1 + (0 ..)), param0;
 */
int printf_va_2(char const * __restrict format, int param0, char *param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_3(char const * __restrict format, int param0);

int main(int argc, char **argv)
{
  int __retres;
  int i;
  printf_va_1("Hello !\n");
  i = 0;
  while (i < argc) {
    printf_va_2("arg %d : %s\n",i,*(argv + i));
    i ++;
  }
  printf_va_3("Found %d arguments\n",i - 1);
  __retres = 0;
  return __retres;
}

int main1(int argc, char **argv)
{
  int __retres;
  int i;
  printf_va_1("Hello !\n");
  i = 0;
  while (i < argc) {
    printf_va_2("arg %d : %s\n",i,*(argv + i));
    i ++;
  }
  printf_va_3("Found %d arguments\n",i - 1);
  __retres = 0;
  return __retres;
}


