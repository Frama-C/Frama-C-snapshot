[kernel] Parsing share/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/misc/copy_kf.i (no preprocessing)
[kernel] After cloning f:
         /* Generated by Frama-C */
         /*@ requires \valid(p);
             ensures *\old(p) ≡ \old(x);
             assigns *p; */
         extern void g(int *p, int x);
         
         /*@ requires 0 ≤ x ≤ 10;
             ensures \result ≡ 2*\old(x); */
         int f(int x)
         {
           int __retres;
           int y;
           g(& y,x);
           __retres = x + y;
           return __retres;
         }
         
         /*@ requires 0 ≤ x ≤ 10;
             ensures \result ≡ 2*\old(x); */
         int new_f(int x)
         {
           int __retres;
           int y;
           g(& y,x);
           __retres = x + y;
           return __retres;
         }
[kernel] After cloning g:
         /* Generated by Frama-C */
         /*@ requires \valid(p);
             ensures *\old(p) ≡ \old(x);
             assigns *p; */
         extern void g(int *p, int x);
         
         /*@ requires \valid(p);
             ensures *\old(p) ≡ \old(x);
             assigns *p; */
         extern void new_g(int *p, int x);
         
         /*@ requires 0 ≤ x ≤ 10;
             ensures \result ≡ 2*\old(x); */
         int f(int x)
         {
           int __retres;
           int y;
           g(& y,x);
           __retres = x + y;
           return __retres;
         }
         
         /*@ requires 0 ≤ x ≤ 10;
             ensures \result ≡ 2*\old(x); */
         int new_f(int x)
         {
           int __retres;
           int y;
           g(& y,x);
           __retres = x + y;
           return __retres;
         }
[kernel] After replacement:
         /* Generated by Frama-C */
         /*@ requires \valid(p);
             ensures *\old(p) ≡ \old(x);
             assigns *p; */
         extern void g(int *p, int x);
         
         /*@ requires \valid(p);
             ensures *\old(p) ≡ \old(x);
             assigns *p; */
         extern void new_g(int *p, int x);
         
         /*@ requires 0 ≤ x ≤ 10;
             ensures \result ≡ 2*\old(x); */
         int f(int x)
         {
           int __retres;
           int y;
           g(& y,x);
           __retres = x + y;
           return __retres;
         }
         
         /*@ requires 0 ≤ x ≤ 10;
             ensures \result ≡ 2*\old(x); */
         int new_f(int x)
         {
           int __retres;
           int y;
           new_g(& y,x);
           __retres = x + y;
           return __retres;
         }
