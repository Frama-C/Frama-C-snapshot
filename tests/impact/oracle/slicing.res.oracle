[kernel] Parsing share/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/impact/slicing.i (no preprocessing)
[impact] beginning analysis
[value] Analyzing an incomplete application starting at impact
[value] Computing initial state
[value] Initial state computed
[value:initial-state] Values of globals at initialization
  a ∈ [--..--]
  b ∈ [--..--]
  c ∈ [--..--]
  e ∈ [--..--]
  x ∈ [--..--]
  y ∈ [--..--]
  z ∈ [--..--]
  f ∈ [--..--]
  w ∈ [--..--]
tests/impact/slicing.i:13:[value] warning: signed overflow. assert -2147483648 ≤ b + c;
tests/impact/slicing.i:13:[value] warning: signed overflow. assert b + c ≤ 2147483647;
tests/impact/slicing.i:14:[value] warning: signed overflow. assert -2147483648 ≤ x + e;
tests/impact/slicing.i:14:[value] warning: signed overflow. assert x + e ≤ 2147483647;
tests/impact/slicing.i:18:[value] warning: signed overflow. assert -2147483648 ≤ y + f;
tests/impact/slicing.i:18:[value] warning: signed overflow. assert y + f ≤ 2147483647;
[value] Recording results for impact
[value] done for function impact
[pdg] computing for function impact
[pdg] done for function impact
[impact] impacted statements of stmt(s) 6 are:
           tests/impact/slicing.i:13 (sid 9): x = b + c;
           tests/impact/slicing.i:14 (sid 10): y = x + e;
           tests/impact/slicing.i:18 (sid 13): z = y + f;
           tests/impact/slicing.i:19 (sid 14): w = b;
[slicing] making slicing project 'impact slicing'...
[slicing] applying all slicing requests...
[slicing] applying 0 actions...
[slicing] applying all slicing requests...
[slicing] applying 1 actions...
[slicing] applying actions: 1/1...
[slicing] exporting project to 'impact slicing'...
[slicing] applying all slicing requests...
[slicing] applying 0 actions...
[sparecode] remove unused global declarations from project 'impact slicing tmp'
[sparecode] removed unused global declarations in new project 'impact slicing'
[impact] analysis done
/* Generated by Frama-C */
int a;
int b;
int c;
int e;
int x;
int y;
int z;
int f;
int w;
void impact(void)
{
  if (c) a = 18;
  /*@ impact pragma stmt; */
  b = a;
  if (c) {
    x = b + c;
    y = x + e;
  }
  z = y + f;
  w = b;
  return;
}


